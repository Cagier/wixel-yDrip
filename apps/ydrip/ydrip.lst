                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (MINGW32)
                              4 ; This file was generated Sun Oct 30 00:48:27 2016
                              5 ;--------------------------------------------------------
                              6 	.module ydrip
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _setADCInputs
                             14 	.globl _get_packet
                             15 	.globl _delayFor
                             16 	.globl _WaitForPacket
                             17 	.globl _strobe_radio
                             18 	.globl _swap_channel
                             19 	.globl _printfUSB
                             20 	.globl _goToSleep
                             21 	.globl _killWithWatchdog
                             22 	.globl _reset_offsets
                             23 	.globl _makeAllOutputsLow
                             24 	.globl _makeAllOutputs
                             25 	.globl _print_packet
                             26 	.globl _ESPsleep
                             27 	.globl _getTimeBytes
                             28 	.globl _wifiConnect
                             29 	.globl _wifiFlash
                             30 	.globl _getWifiStatus
                             31 	.globl _enableESP
                             32 	.globl _sendAT
                             33 	.globl _getFonaString
                             34 	.globl _initUart1
                             35 	.globl _doServices
                             36 	.globl _clearRxErrors
                             37 	.globl _dexcom_src_to_ascii
                             38 	.globl _dex_num_decoder
                             39 	.globl _bit_reverse_bytes
                             40 	.globl _min8
                             41 	.globl _bit_reverse_byte
                             42 	.globl _getPacketPassedChecksum
                             43 	.globl _blink_red_led
                             44 	.globl _blink_yellow_led
                             45 	.globl _uartDisable
                             46 	.globl _uartEnable
                             47 	.globl _switchToRCOSC
                             48 	.globl _ISR_ST
                             49 	.globl _sleepInit
                             50 	.globl _AES128_CBC_encrypt_buffer
                             51 	.globl _adcSetMillivoltCalibration
                             52 	.globl _adcReadVddMillivolts
                             53 	.globl _strlen
                             54 	.globl _memset
                             55 	.globl _strstr
                             56 	.globl _strcmp
                             57 	.globl _strcat
                             58 	.globl _strcpy
                             59 	.globl _memcpy
                             60 	.globl _sprintf
                             61 	.globl _printf
                             62 	.globl _uart1RxReceiveByte
                             63 	.globl _uart1RxAvailable
                             64 	.globl _uart1TxSendByte
                             65 	.globl _uart1TxAvailable
                             66 	.globl _uart1SetBaudRate
                             67 	.globl _uart1Init
                             68 	.globl _setDigitalOutput
                             69 	.globl _radioQueueRxDoneWithPacket
                             70 	.globl _radioQueueRxCurrentPacket
                             71 	.globl _radioQueueInit
                             72 	.globl _radioMacResume
                             73 	.globl _radioMacSleep
                             74 	.globl _radioMacStrobe
                             75 	.globl _radioMacInit
                             76 	.globl _radioCrcPassed
                             77 	.globl _usbComTxSendByte
                             78 	.globl _usbComTxAvailable
                             79 	.globl _usbComService
                             80 	.globl _usbShowStatusWithGreenLed
                             81 	.globl _delayMs
                             82 	.globl _getMs
                             83 	.globl _disableUsbPullup
                             84 	.globl _enableUsbPullup
                             85 	.globl _usbPowerPresent
                             86 	.globl _boardService
                             87 	.globl _boardClockInit
                             88 	.globl _systemInit
                             89 	.globl _SrcNameTable
                             90 	.globl _AT_TIMEOUT
                             91 	.globl _dmaDesc
                             92 	.globl _PM2_BUF
                             93 	.globl _wixFone_ID
                             94 	.globl _WaitForPacket_PARM_3
                             95 	.globl _swap_channel_PARM_2
                             96 	.globl _dexcom_src_to_ascii_PARM_2
                             97 	.globl _WaitForPacket_PARM_2
                             98 	.globl _bit_reverse_bytes_PARM_2
                             99 	.globl _min8_PARM_2
                            100 	.globl _intMaxStrLen
                            101 	.globl _sequential_missed_packets
                            102 	.globl _usbEnabled
                            103 	.globl _needsTimingCalibration
                            104 	.globl _getSrcValue
                            105 	.globl _putchar
                            106 ;--------------------------------------------------------
                            107 ; special function registers
                            108 ;--------------------------------------------------------
                            109 	.area RSEG    (ABS,DATA)
   0000                     110 	.org 0x0000
                    0080    111 Fydrip$P0$0$0 == 0x0080
                    0080    112 _P0	=	0x0080
                    0081    113 Fydrip$SP$0$0 == 0x0081
                    0081    114 _SP	=	0x0081
                    0082    115 Fydrip$DPL0$0$0 == 0x0082
                    0082    116 _DPL0	=	0x0082
                    0083    117 Fydrip$DPH0$0$0 == 0x0083
                    0083    118 _DPH0	=	0x0083
                    0084    119 Fydrip$DPL1$0$0 == 0x0084
                    0084    120 _DPL1	=	0x0084
                    0085    121 Fydrip$DPH1$0$0 == 0x0085
                    0085    122 _DPH1	=	0x0085
                    0086    123 Fydrip$U0CSR$0$0 == 0x0086
                    0086    124 _U0CSR	=	0x0086
                    0087    125 Fydrip$PCON$0$0 == 0x0087
                    0087    126 _PCON	=	0x0087
                    0088    127 Fydrip$TCON$0$0 == 0x0088
                    0088    128 _TCON	=	0x0088
                    0089    129 Fydrip$P0IFG$0$0 == 0x0089
                    0089    130 _P0IFG	=	0x0089
                    008A    131 Fydrip$P1IFG$0$0 == 0x008a
                    008A    132 _P1IFG	=	0x008a
                    008B    133 Fydrip$P2IFG$0$0 == 0x008b
                    008B    134 _P2IFG	=	0x008b
                    008C    135 Fydrip$PICTL$0$0 == 0x008c
                    008C    136 _PICTL	=	0x008c
                    008D    137 Fydrip$P1IEN$0$0 == 0x008d
                    008D    138 _P1IEN	=	0x008d
                    008F    139 Fydrip$P0INP$0$0 == 0x008f
                    008F    140 _P0INP	=	0x008f
                    0090    141 Fydrip$P1$0$0 == 0x0090
                    0090    142 _P1	=	0x0090
                    0091    143 Fydrip$RFIM$0$0 == 0x0091
                    0091    144 _RFIM	=	0x0091
                    0092    145 Fydrip$DPS$0$0 == 0x0092
                    0092    146 _DPS	=	0x0092
                    0093    147 Fydrip$MPAGE$0$0 == 0x0093
                    0093    148 _MPAGE	=	0x0093
                    0095    149 Fydrip$ENDIAN$0$0 == 0x0095
                    0095    150 _ENDIAN	=	0x0095
                    0098    151 Fydrip$S0CON$0$0 == 0x0098
                    0098    152 _S0CON	=	0x0098
                    009A    153 Fydrip$IEN2$0$0 == 0x009a
                    009A    154 _IEN2	=	0x009a
                    009B    155 Fydrip$S1CON$0$0 == 0x009b
                    009B    156 _S1CON	=	0x009b
                    009C    157 Fydrip$T2CT$0$0 == 0x009c
                    009C    158 _T2CT	=	0x009c
                    009D    159 Fydrip$T2PR$0$0 == 0x009d
                    009D    160 _T2PR	=	0x009d
                    009E    161 Fydrip$T2CTL$0$0 == 0x009e
                    009E    162 _T2CTL	=	0x009e
                    00A0    163 Fydrip$P2$0$0 == 0x00a0
                    00A0    164 _P2	=	0x00a0
                    00A1    165 Fydrip$WORIRQ$0$0 == 0x00a1
                    00A1    166 _WORIRQ	=	0x00a1
                    00A2    167 Fydrip$WORCTRL$0$0 == 0x00a2
                    00A2    168 _WORCTRL	=	0x00a2
                    00A3    169 Fydrip$WOREVT0$0$0 == 0x00a3
                    00A3    170 _WOREVT0	=	0x00a3
                    00A4    171 Fydrip$WOREVT1$0$0 == 0x00a4
                    00A4    172 _WOREVT1	=	0x00a4
                    00A5    173 Fydrip$WORTIME0$0$0 == 0x00a5
                    00A5    174 _WORTIME0	=	0x00a5
                    00A6    175 Fydrip$WORTIME1$0$0 == 0x00a6
                    00A6    176 _WORTIME1	=	0x00a6
                    00A8    177 Fydrip$IEN0$0$0 == 0x00a8
                    00A8    178 _IEN0	=	0x00a8
                    00A9    179 Fydrip$IP0$0$0 == 0x00a9
                    00A9    180 _IP0	=	0x00a9
                    00AB    181 Fydrip$FWT$0$0 == 0x00ab
                    00AB    182 _FWT	=	0x00ab
                    00AC    183 Fydrip$FADDRL$0$0 == 0x00ac
                    00AC    184 _FADDRL	=	0x00ac
                    00AD    185 Fydrip$FADDRH$0$0 == 0x00ad
                    00AD    186 _FADDRH	=	0x00ad
                    00AE    187 Fydrip$FCTL$0$0 == 0x00ae
                    00AE    188 _FCTL	=	0x00ae
                    00AF    189 Fydrip$FWDATA$0$0 == 0x00af
                    00AF    190 _FWDATA	=	0x00af
                    00B1    191 Fydrip$ENCDI$0$0 == 0x00b1
                    00B1    192 _ENCDI	=	0x00b1
                    00B2    193 Fydrip$ENCDO$0$0 == 0x00b2
                    00B2    194 _ENCDO	=	0x00b2
                    00B3    195 Fydrip$ENCCS$0$0 == 0x00b3
                    00B3    196 _ENCCS	=	0x00b3
                    00B4    197 Fydrip$ADCCON1$0$0 == 0x00b4
                    00B4    198 _ADCCON1	=	0x00b4
                    00B5    199 Fydrip$ADCCON2$0$0 == 0x00b5
                    00B5    200 _ADCCON2	=	0x00b5
                    00B6    201 Fydrip$ADCCON3$0$0 == 0x00b6
                    00B6    202 _ADCCON3	=	0x00b6
                    00B8    203 Fydrip$IEN1$0$0 == 0x00b8
                    00B8    204 _IEN1	=	0x00b8
                    00B9    205 Fydrip$IP1$0$0 == 0x00b9
                    00B9    206 _IP1	=	0x00b9
                    00BA    207 Fydrip$ADCL$0$0 == 0x00ba
                    00BA    208 _ADCL	=	0x00ba
                    00BB    209 Fydrip$ADCH$0$0 == 0x00bb
                    00BB    210 _ADCH	=	0x00bb
                    00BC    211 Fydrip$RNDL$0$0 == 0x00bc
                    00BC    212 _RNDL	=	0x00bc
                    00BD    213 Fydrip$RNDH$0$0 == 0x00bd
                    00BD    214 _RNDH	=	0x00bd
                    00BE    215 Fydrip$SLEEP$0$0 == 0x00be
                    00BE    216 _SLEEP	=	0x00be
                    00C0    217 Fydrip$IRCON$0$0 == 0x00c0
                    00C0    218 _IRCON	=	0x00c0
                    00C1    219 Fydrip$U0DBUF$0$0 == 0x00c1
                    00C1    220 _U0DBUF	=	0x00c1
                    00C2    221 Fydrip$U0BAUD$0$0 == 0x00c2
                    00C2    222 _U0BAUD	=	0x00c2
                    00C4    223 Fydrip$U0UCR$0$0 == 0x00c4
                    00C4    224 _U0UCR	=	0x00c4
                    00C5    225 Fydrip$U0GCR$0$0 == 0x00c5
                    00C5    226 _U0GCR	=	0x00c5
                    00C6    227 Fydrip$CLKCON$0$0 == 0x00c6
                    00C6    228 _CLKCON	=	0x00c6
                    00C7    229 Fydrip$MEMCTR$0$0 == 0x00c7
                    00C7    230 _MEMCTR	=	0x00c7
                    00C9    231 Fydrip$WDCTL$0$0 == 0x00c9
                    00C9    232 _WDCTL	=	0x00c9
                    00CA    233 Fydrip$T3CNT$0$0 == 0x00ca
                    00CA    234 _T3CNT	=	0x00ca
                    00CB    235 Fydrip$T3CTL$0$0 == 0x00cb
                    00CB    236 _T3CTL	=	0x00cb
                    00CC    237 Fydrip$T3CCTL0$0$0 == 0x00cc
                    00CC    238 _T3CCTL0	=	0x00cc
                    00CD    239 Fydrip$T3CC0$0$0 == 0x00cd
                    00CD    240 _T3CC0	=	0x00cd
                    00CE    241 Fydrip$T3CCTL1$0$0 == 0x00ce
                    00CE    242 _T3CCTL1	=	0x00ce
                    00CF    243 Fydrip$T3CC1$0$0 == 0x00cf
                    00CF    244 _T3CC1	=	0x00cf
                    00D0    245 Fydrip$PSW$0$0 == 0x00d0
                    00D0    246 _PSW	=	0x00d0
                    00D1    247 Fydrip$DMAIRQ$0$0 == 0x00d1
                    00D1    248 _DMAIRQ	=	0x00d1
                    00D2    249 Fydrip$DMA1CFGL$0$0 == 0x00d2
                    00D2    250 _DMA1CFGL	=	0x00d2
                    00D3    251 Fydrip$DMA1CFGH$0$0 == 0x00d3
                    00D3    252 _DMA1CFGH	=	0x00d3
                    00D4    253 Fydrip$DMA0CFGL$0$0 == 0x00d4
                    00D4    254 _DMA0CFGL	=	0x00d4
                    00D5    255 Fydrip$DMA0CFGH$0$0 == 0x00d5
                    00D5    256 _DMA0CFGH	=	0x00d5
                    00D6    257 Fydrip$DMAARM$0$0 == 0x00d6
                    00D6    258 _DMAARM	=	0x00d6
                    00D7    259 Fydrip$DMAREQ$0$0 == 0x00d7
                    00D7    260 _DMAREQ	=	0x00d7
                    00D8    261 Fydrip$TIMIF$0$0 == 0x00d8
                    00D8    262 _TIMIF	=	0x00d8
                    00D9    263 Fydrip$RFD$0$0 == 0x00d9
                    00D9    264 _RFD	=	0x00d9
                    00DA    265 Fydrip$T1CC0L$0$0 == 0x00da
                    00DA    266 _T1CC0L	=	0x00da
                    00DB    267 Fydrip$T1CC0H$0$0 == 0x00db
                    00DB    268 _T1CC0H	=	0x00db
                    00DC    269 Fydrip$T1CC1L$0$0 == 0x00dc
                    00DC    270 _T1CC1L	=	0x00dc
                    00DD    271 Fydrip$T1CC1H$0$0 == 0x00dd
                    00DD    272 _T1CC1H	=	0x00dd
                    00DE    273 Fydrip$T1CC2L$0$0 == 0x00de
                    00DE    274 _T1CC2L	=	0x00de
                    00DF    275 Fydrip$T1CC2H$0$0 == 0x00df
                    00DF    276 _T1CC2H	=	0x00df
                    00E0    277 Fydrip$ACC$0$0 == 0x00e0
                    00E0    278 _ACC	=	0x00e0
                    00E1    279 Fydrip$RFST$0$0 == 0x00e1
                    00E1    280 _RFST	=	0x00e1
                    00E2    281 Fydrip$T1CNTL$0$0 == 0x00e2
                    00E2    282 _T1CNTL	=	0x00e2
                    00E3    283 Fydrip$T1CNTH$0$0 == 0x00e3
                    00E3    284 _T1CNTH	=	0x00e3
                    00E4    285 Fydrip$T1CTL$0$0 == 0x00e4
                    00E4    286 _T1CTL	=	0x00e4
                    00E5    287 Fydrip$T1CCTL0$0$0 == 0x00e5
                    00E5    288 _T1CCTL0	=	0x00e5
                    00E6    289 Fydrip$T1CCTL1$0$0 == 0x00e6
                    00E6    290 _T1CCTL1	=	0x00e6
                    00E7    291 Fydrip$T1CCTL2$0$0 == 0x00e7
                    00E7    292 _T1CCTL2	=	0x00e7
                    00E8    293 Fydrip$IRCON2$0$0 == 0x00e8
                    00E8    294 _IRCON2	=	0x00e8
                    00E9    295 Fydrip$RFIF$0$0 == 0x00e9
                    00E9    296 _RFIF	=	0x00e9
                    00EA    297 Fydrip$T4CNT$0$0 == 0x00ea
                    00EA    298 _T4CNT	=	0x00ea
                    00EB    299 Fydrip$T4CTL$0$0 == 0x00eb
                    00EB    300 _T4CTL	=	0x00eb
                    00EC    301 Fydrip$T4CCTL0$0$0 == 0x00ec
                    00EC    302 _T4CCTL0	=	0x00ec
                    00ED    303 Fydrip$T4CC0$0$0 == 0x00ed
                    00ED    304 _T4CC0	=	0x00ed
                    00EE    305 Fydrip$T4CCTL1$0$0 == 0x00ee
                    00EE    306 _T4CCTL1	=	0x00ee
                    00EF    307 Fydrip$T4CC1$0$0 == 0x00ef
                    00EF    308 _T4CC1	=	0x00ef
                    00F0    309 Fydrip$B$0$0 == 0x00f0
                    00F0    310 _B	=	0x00f0
                    00F1    311 Fydrip$PERCFG$0$0 == 0x00f1
                    00F1    312 _PERCFG	=	0x00f1
                    00F2    313 Fydrip$ADCCFG$0$0 == 0x00f2
                    00F2    314 _ADCCFG	=	0x00f2
                    00F3    315 Fydrip$P0SEL$0$0 == 0x00f3
                    00F3    316 _P0SEL	=	0x00f3
                    00F4    317 Fydrip$P1SEL$0$0 == 0x00f4
                    00F4    318 _P1SEL	=	0x00f4
                    00F5    319 Fydrip$P2SEL$0$0 == 0x00f5
                    00F5    320 _P2SEL	=	0x00f5
                    00F6    321 Fydrip$P1INP$0$0 == 0x00f6
                    00F6    322 _P1INP	=	0x00f6
                    00F7    323 Fydrip$P2INP$0$0 == 0x00f7
                    00F7    324 _P2INP	=	0x00f7
                    00F8    325 Fydrip$U1CSR$0$0 == 0x00f8
                    00F8    326 _U1CSR	=	0x00f8
                    00F9    327 Fydrip$U1DBUF$0$0 == 0x00f9
                    00F9    328 _U1DBUF	=	0x00f9
                    00FA    329 Fydrip$U1BAUD$0$0 == 0x00fa
                    00FA    330 _U1BAUD	=	0x00fa
                    00FB    331 Fydrip$U1UCR$0$0 == 0x00fb
                    00FB    332 _U1UCR	=	0x00fb
                    00FC    333 Fydrip$U1GCR$0$0 == 0x00fc
                    00FC    334 _U1GCR	=	0x00fc
                    00FD    335 Fydrip$P0DIR$0$0 == 0x00fd
                    00FD    336 _P0DIR	=	0x00fd
                    00FE    337 Fydrip$P1DIR$0$0 == 0x00fe
                    00FE    338 _P1DIR	=	0x00fe
                    00FF    339 Fydrip$P2DIR$0$0 == 0x00ff
                    00FF    340 _P2DIR	=	0x00ff
                    FFFFD5D4    341 Fydrip$DMA0CFG$0$0 == 0xffffd5d4
                    FFFFD5D4    342 _DMA0CFG	=	0xffffd5d4
                    FFFFD3D2    343 Fydrip$DMA1CFG$0$0 == 0xffffd3d2
                    FFFFD3D2    344 _DMA1CFG	=	0xffffd3d2
                    FFFFADAC    345 Fydrip$FADDR$0$0 == 0xffffadac
                    FFFFADAC    346 _FADDR	=	0xffffadac
                    FFFFBBBA    347 Fydrip$ADC$0$0 == 0xffffbbba
                    FFFFBBBA    348 _ADC	=	0xffffbbba
                    FFFFDBDA    349 Fydrip$T1CC0$0$0 == 0xffffdbda
                    FFFFDBDA    350 _T1CC0	=	0xffffdbda
                    FFFFDDDC    351 Fydrip$T1CC1$0$0 == 0xffffdddc
                    FFFFDDDC    352 _T1CC1	=	0xffffdddc
                    FFFFDFDE    353 Fydrip$T1CC2$0$0 == 0xffffdfde
                    FFFFDFDE    354 _T1CC2	=	0xffffdfde
                            355 ;--------------------------------------------------------
                            356 ; special function bits
                            357 ;--------------------------------------------------------
                            358 	.area RSEG    (ABS,DATA)
   0000                     359 	.org 0x0000
                    0080    360 Fydrip$P0_0$0$0 == 0x0080
                    0080    361 _P0_0	=	0x0080
                    0081    362 Fydrip$P0_1$0$0 == 0x0081
                    0081    363 _P0_1	=	0x0081
                    0082    364 Fydrip$P0_2$0$0 == 0x0082
                    0082    365 _P0_2	=	0x0082
                    0083    366 Fydrip$P0_3$0$0 == 0x0083
                    0083    367 _P0_3	=	0x0083
                    0084    368 Fydrip$P0_4$0$0 == 0x0084
                    0084    369 _P0_4	=	0x0084
                    0085    370 Fydrip$P0_5$0$0 == 0x0085
                    0085    371 _P0_5	=	0x0085
                    0086    372 Fydrip$P0_6$0$0 == 0x0086
                    0086    373 _P0_6	=	0x0086
                    0087    374 Fydrip$P0_7$0$0 == 0x0087
                    0087    375 _P0_7	=	0x0087
                    0088    376 Fydrip$_TCON_0$0$0 == 0x0088
                    0088    377 __TCON_0	=	0x0088
                    0089    378 Fydrip$RFTXRXIF$0$0 == 0x0089
                    0089    379 _RFTXRXIF	=	0x0089
                    008A    380 Fydrip$_TCON_2$0$0 == 0x008a
                    008A    381 __TCON_2	=	0x008a
                    008B    382 Fydrip$URX0IF$0$0 == 0x008b
                    008B    383 _URX0IF	=	0x008b
                    008C    384 Fydrip$_TCON_4$0$0 == 0x008c
                    008C    385 __TCON_4	=	0x008c
                    008D    386 Fydrip$ADCIF$0$0 == 0x008d
                    008D    387 _ADCIF	=	0x008d
                    008E    388 Fydrip$_TCON_6$0$0 == 0x008e
                    008E    389 __TCON_6	=	0x008e
                    008F    390 Fydrip$URX1IF$0$0 == 0x008f
                    008F    391 _URX1IF	=	0x008f
                    0090    392 Fydrip$P1_0$0$0 == 0x0090
                    0090    393 _P1_0	=	0x0090
                    0091    394 Fydrip$P1_1$0$0 == 0x0091
                    0091    395 _P1_1	=	0x0091
                    0092    396 Fydrip$P1_2$0$0 == 0x0092
                    0092    397 _P1_2	=	0x0092
                    0093    398 Fydrip$P1_3$0$0 == 0x0093
                    0093    399 _P1_3	=	0x0093
                    0094    400 Fydrip$P1_4$0$0 == 0x0094
                    0094    401 _P1_4	=	0x0094
                    0095    402 Fydrip$P1_5$0$0 == 0x0095
                    0095    403 _P1_5	=	0x0095
                    0096    404 Fydrip$P1_6$0$0 == 0x0096
                    0096    405 _P1_6	=	0x0096
                    0097    406 Fydrip$P1_7$0$0 == 0x0097
                    0097    407 _P1_7	=	0x0097
                    0098    408 Fydrip$ENCIF_0$0$0 == 0x0098
                    0098    409 _ENCIF_0	=	0x0098
                    0099    410 Fydrip$ENCIF_1$0$0 == 0x0099
                    0099    411 _ENCIF_1	=	0x0099
                    009A    412 Fydrip$_SOCON2$0$0 == 0x009a
                    009A    413 __SOCON2	=	0x009a
                    009B    414 Fydrip$_SOCON3$0$0 == 0x009b
                    009B    415 __SOCON3	=	0x009b
                    009C    416 Fydrip$_SOCON4$0$0 == 0x009c
                    009C    417 __SOCON4	=	0x009c
                    009D    418 Fydrip$_SOCON5$0$0 == 0x009d
                    009D    419 __SOCON5	=	0x009d
                    009E    420 Fydrip$_SOCON6$0$0 == 0x009e
                    009E    421 __SOCON6	=	0x009e
                    009F    422 Fydrip$_SOCON7$0$0 == 0x009f
                    009F    423 __SOCON7	=	0x009f
                    00A0    424 Fydrip$P2_0$0$0 == 0x00a0
                    00A0    425 _P2_0	=	0x00a0
                    00A1    426 Fydrip$P2_1$0$0 == 0x00a1
                    00A1    427 _P2_1	=	0x00a1
                    00A2    428 Fydrip$P2_2$0$0 == 0x00a2
                    00A2    429 _P2_2	=	0x00a2
                    00A3    430 Fydrip$P2_3$0$0 == 0x00a3
                    00A3    431 _P2_3	=	0x00a3
                    00A4    432 Fydrip$P2_4$0$0 == 0x00a4
                    00A4    433 _P2_4	=	0x00a4
                    00A5    434 Fydrip$P2_5$0$0 == 0x00a5
                    00A5    435 _P2_5	=	0x00a5
                    00A6    436 Fydrip$P2_6$0$0 == 0x00a6
                    00A6    437 _P2_6	=	0x00a6
                    00A7    438 Fydrip$P2_7$0$0 == 0x00a7
                    00A7    439 _P2_7	=	0x00a7
                    00A8    440 Fydrip$RFTXRXIE$0$0 == 0x00a8
                    00A8    441 _RFTXRXIE	=	0x00a8
                    00A9    442 Fydrip$ADCIE$0$0 == 0x00a9
                    00A9    443 _ADCIE	=	0x00a9
                    00AA    444 Fydrip$URX0IE$0$0 == 0x00aa
                    00AA    445 _URX0IE	=	0x00aa
                    00AB    446 Fydrip$URX1IE$0$0 == 0x00ab
                    00AB    447 _URX1IE	=	0x00ab
                    00AC    448 Fydrip$ENCIE$0$0 == 0x00ac
                    00AC    449 _ENCIE	=	0x00ac
                    00AD    450 Fydrip$STIE$0$0 == 0x00ad
                    00AD    451 _STIE	=	0x00ad
                    00AE    452 Fydrip$_IEN06$0$0 == 0x00ae
                    00AE    453 __IEN06	=	0x00ae
                    00AF    454 Fydrip$EA$0$0 == 0x00af
                    00AF    455 _EA	=	0x00af
                    00B8    456 Fydrip$DMAIE$0$0 == 0x00b8
                    00B8    457 _DMAIE	=	0x00b8
                    00B9    458 Fydrip$T1IE$0$0 == 0x00b9
                    00B9    459 _T1IE	=	0x00b9
                    00BA    460 Fydrip$T2IE$0$0 == 0x00ba
                    00BA    461 _T2IE	=	0x00ba
                    00BB    462 Fydrip$T3IE$0$0 == 0x00bb
                    00BB    463 _T3IE	=	0x00bb
                    00BC    464 Fydrip$T4IE$0$0 == 0x00bc
                    00BC    465 _T4IE	=	0x00bc
                    00BD    466 Fydrip$P0IE$0$0 == 0x00bd
                    00BD    467 _P0IE	=	0x00bd
                    00BE    468 Fydrip$_IEN16$0$0 == 0x00be
                    00BE    469 __IEN16	=	0x00be
                    00BF    470 Fydrip$_IEN17$0$0 == 0x00bf
                    00BF    471 __IEN17	=	0x00bf
                    00C0    472 Fydrip$DMAIF$0$0 == 0x00c0
                    00C0    473 _DMAIF	=	0x00c0
                    00C1    474 Fydrip$T1IF$0$0 == 0x00c1
                    00C1    475 _T1IF	=	0x00c1
                    00C2    476 Fydrip$T2IF$0$0 == 0x00c2
                    00C2    477 _T2IF	=	0x00c2
                    00C3    478 Fydrip$T3IF$0$0 == 0x00c3
                    00C3    479 _T3IF	=	0x00c3
                    00C4    480 Fydrip$T4IF$0$0 == 0x00c4
                    00C4    481 _T4IF	=	0x00c4
                    00C5    482 Fydrip$P0IF$0$0 == 0x00c5
                    00C5    483 _P0IF	=	0x00c5
                    00C6    484 Fydrip$_IRCON6$0$0 == 0x00c6
                    00C6    485 __IRCON6	=	0x00c6
                    00C7    486 Fydrip$STIF$0$0 == 0x00c7
                    00C7    487 _STIF	=	0x00c7
                    00D0    488 Fydrip$P$0$0 == 0x00d0
                    00D0    489 _P	=	0x00d0
                    00D1    490 Fydrip$F1$0$0 == 0x00d1
                    00D1    491 _F1	=	0x00d1
                    00D2    492 Fydrip$OV$0$0 == 0x00d2
                    00D2    493 _OV	=	0x00d2
                    00D3    494 Fydrip$RS0$0$0 == 0x00d3
                    00D3    495 _RS0	=	0x00d3
                    00D4    496 Fydrip$RS1$0$0 == 0x00d4
                    00D4    497 _RS1	=	0x00d4
                    00D5    498 Fydrip$F0$0$0 == 0x00d5
                    00D5    499 _F0	=	0x00d5
                    00D6    500 Fydrip$AC$0$0 == 0x00d6
                    00D6    501 _AC	=	0x00d6
                    00D7    502 Fydrip$CY$0$0 == 0x00d7
                    00D7    503 _CY	=	0x00d7
                    00D8    504 Fydrip$T3OVFIF$0$0 == 0x00d8
                    00D8    505 _T3OVFIF	=	0x00d8
                    00D9    506 Fydrip$T3CH0IF$0$0 == 0x00d9
                    00D9    507 _T3CH0IF	=	0x00d9
                    00DA    508 Fydrip$T3CH1IF$0$0 == 0x00da
                    00DA    509 _T3CH1IF	=	0x00da
                    00DB    510 Fydrip$T4OVFIF$0$0 == 0x00db
                    00DB    511 _T4OVFIF	=	0x00db
                    00DC    512 Fydrip$T4CH0IF$0$0 == 0x00dc
                    00DC    513 _T4CH0IF	=	0x00dc
                    00DD    514 Fydrip$T4CH1IF$0$0 == 0x00dd
                    00DD    515 _T4CH1IF	=	0x00dd
                    00DE    516 Fydrip$OVFIM$0$0 == 0x00de
                    00DE    517 _OVFIM	=	0x00de
                    00DF    518 Fydrip$_TIMIF7$0$0 == 0x00df
                    00DF    519 __TIMIF7	=	0x00df
                    00E0    520 Fydrip$ACC_0$0$0 == 0x00e0
                    00E0    521 _ACC_0	=	0x00e0
                    00E1    522 Fydrip$ACC_1$0$0 == 0x00e1
                    00E1    523 _ACC_1	=	0x00e1
                    00E2    524 Fydrip$ACC_2$0$0 == 0x00e2
                    00E2    525 _ACC_2	=	0x00e2
                    00E3    526 Fydrip$ACC_3$0$0 == 0x00e3
                    00E3    527 _ACC_3	=	0x00e3
                    00E4    528 Fydrip$ACC_4$0$0 == 0x00e4
                    00E4    529 _ACC_4	=	0x00e4
                    00E5    530 Fydrip$ACC_5$0$0 == 0x00e5
                    00E5    531 _ACC_5	=	0x00e5
                    00E6    532 Fydrip$ACC_6$0$0 == 0x00e6
                    00E6    533 _ACC_6	=	0x00e6
                    00E7    534 Fydrip$ACC_7$0$0 == 0x00e7
                    00E7    535 _ACC_7	=	0x00e7
                    00E8    536 Fydrip$P2IF$0$0 == 0x00e8
                    00E8    537 _P2IF	=	0x00e8
                    00E9    538 Fydrip$UTX0IF$0$0 == 0x00e9
                    00E9    539 _UTX0IF	=	0x00e9
                    00EA    540 Fydrip$UTX1IF$0$0 == 0x00ea
                    00EA    541 _UTX1IF	=	0x00ea
                    00EB    542 Fydrip$P1IF$0$0 == 0x00eb
                    00EB    543 _P1IF	=	0x00eb
                    00EC    544 Fydrip$WDTIF$0$0 == 0x00ec
                    00EC    545 _WDTIF	=	0x00ec
                    00ED    546 Fydrip$_IRCON25$0$0 == 0x00ed
                    00ED    547 __IRCON25	=	0x00ed
                    00EE    548 Fydrip$_IRCON26$0$0 == 0x00ee
                    00EE    549 __IRCON26	=	0x00ee
                    00EF    550 Fydrip$_IRCON27$0$0 == 0x00ef
                    00EF    551 __IRCON27	=	0x00ef
                    00F0    552 Fydrip$B_0$0$0 == 0x00f0
                    00F0    553 _B_0	=	0x00f0
                    00F1    554 Fydrip$B_1$0$0 == 0x00f1
                    00F1    555 _B_1	=	0x00f1
                    00F2    556 Fydrip$B_2$0$0 == 0x00f2
                    00F2    557 _B_2	=	0x00f2
                    00F3    558 Fydrip$B_3$0$0 == 0x00f3
                    00F3    559 _B_3	=	0x00f3
                    00F4    560 Fydrip$B_4$0$0 == 0x00f4
                    00F4    561 _B_4	=	0x00f4
                    00F5    562 Fydrip$B_5$0$0 == 0x00f5
                    00F5    563 _B_5	=	0x00f5
                    00F6    564 Fydrip$B_6$0$0 == 0x00f6
                    00F6    565 _B_6	=	0x00f6
                    00F7    566 Fydrip$B_7$0$0 == 0x00f7
                    00F7    567 _B_7	=	0x00f7
                    00F8    568 Fydrip$U1ACTIVE$0$0 == 0x00f8
                    00F8    569 _U1ACTIVE	=	0x00f8
                    00F9    570 Fydrip$U1TX_BYTE$0$0 == 0x00f9
                    00F9    571 _U1TX_BYTE	=	0x00f9
                    00FA    572 Fydrip$U1RX_BYTE$0$0 == 0x00fa
                    00FA    573 _U1RX_BYTE	=	0x00fa
                    00FB    574 Fydrip$U1ERR$0$0 == 0x00fb
                    00FB    575 _U1ERR	=	0x00fb
                    00FC    576 Fydrip$U1FE$0$0 == 0x00fc
                    00FC    577 _U1FE	=	0x00fc
                    00FD    578 Fydrip$U1SLAVE$0$0 == 0x00fd
                    00FD    579 _U1SLAVE	=	0x00fd
                    00FE    580 Fydrip$U1RE$0$0 == 0x00fe
                    00FE    581 _U1RE	=	0x00fe
                    00FF    582 Fydrip$U1MODE$0$0 == 0x00ff
                    00FF    583 _U1MODE	=	0x00ff
                            584 ;--------------------------------------------------------
                            585 ; overlayable register banks
                            586 ;--------------------------------------------------------
                            587 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     588 	.ds 8
                            589 	.area REG_BANK_1	(REL,OVR,DATA)
   0000                     590 	.ds 8
                            591 ;--------------------------------------------------------
                            592 ; overlayable bit register bank
                            593 ;--------------------------------------------------------
                            594 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     595 bits:
   0000                     596 	.ds 1
                    8000    597 	b0 = bits[0]
                    8100    598 	b1 = bits[1]
                    8200    599 	b2 = bits[2]
                    8300    600 	b3 = bits[3]
                    8400    601 	b4 = bits[4]
                    8500    602 	b5 = bits[5]
                    8600    603 	b6 = bits[6]
                    8700    604 	b7 = bits[7]
                            605 ;--------------------------------------------------------
                            606 ; internal ram data
                            607 ;--------------------------------------------------------
                            608 	.area DSEG    (DATA)
                    0000    609 Lydrip.getFonaString$sloc0$1$0==.
   0000                     610 _getFonaString_sloc0_1_0:
   0000                     611 	.ds 4
                    0004    612 Lydrip.print_packet$sloc0$1$0==.
   0004                     613 _print_packet_sloc0_1_0:
   0004                     614 	.ds 2
                    0006    615 Lydrip.print_packet$sloc1$1$0==.
   0006                     616 _print_packet_sloc1_1_0:
   0006                     617 	.ds 2
                    0008    618 Lydrip.print_packet$sloc2$1$0==.
   0008                     619 _print_packet_sloc2_1_0:
   0008                     620 	.ds 4
                    000C    621 Lydrip.goToSleep$sloc0$1$0==.
   000C                     622 _goToSleep_sloc0_1_0:
   000C                     623 	.ds 2
                    000E    624 Lydrip.goToSleep$sloc1$1$0==.
   000E                     625 _goToSleep_sloc1_1_0:
   000E                     626 	.ds 4
                    0012    627 Lydrip.WaitForPacket$sloc0$1$0==.
   0012                     628 _WaitForPacket_sloc0_1_0:
   0012                     629 	.ds 1
                    0013    630 Lydrip.WaitForPacket$sloc1$1$0==.
   0013                     631 _WaitForPacket_sloc1_1_0:
   0013                     632 	.ds 4
                    0017    633 Lydrip.WaitForPacket$sloc2$1$0==.
   0017                     634 _WaitForPacket_sloc2_1_0:
   0017                     635 	.ds 2
                    0019    636 Lydrip.WaitForPacket$sloc3$1$0==.
   0019                     637 _WaitForPacket_sloc3_1_0:
   0019                     638 	.ds 4
                    001D    639 Lydrip.WaitForPacket$sloc4$1$0==.
   001D                     640 _WaitForPacket_sloc4_1_0:
   001D                     641 	.ds 4
                    0021    642 Lydrip.WaitForPacket$sloc5$1$0==.
   0021                     643 _WaitForPacket_sloc5_1_0:
   0021                     644 	.ds 4
                    0025    645 Lydrip.delayFor$sloc0$1$0==.
   0025                     646 _delayFor_sloc0_1_0:
   0025                     647 	.ds 4
                            648 ;--------------------------------------------------------
                            649 ; overlayable items in internal ram 
                            650 ;--------------------------------------------------------
                            651 	.area	OSEG    (OVR,DATA)
                    0000    652 Lydrip.dexcom_src_to_ascii$sloc0$1$0==.
   0000                     653 _dexcom_src_to_ascii_sloc0_1_0:
   0000                     654 	.ds 4
                            655 ;--------------------------------------------------------
                            656 ; Stack segment in internal ram 
                            657 ;--------------------------------------------------------
                            658 	.area	SSEG	(DATA)
   0000                     659 __start__stack:
   0000                     660 	.ds	1
                            661 
                            662 ;--------------------------------------------------------
                            663 ; indirectly addressable internal ram data
                            664 ;--------------------------------------------------------
                            665 	.area ISEG    (DATA)
                            666 ;--------------------------------------------------------
                            667 ; absolute internal ram data
                            668 ;--------------------------------------------------------
                            669 	.area IABS    (ABS,DATA)
                            670 	.area IABS    (ABS,DATA)
                            671 ;--------------------------------------------------------
                            672 ; bit data
                            673 ;--------------------------------------------------------
                            674 	.area BSEG    (BIT)
                    0000    675 Fydrip$only_listen_for_my_transmitter$0$0==.
   0000                     676 _only_listen_for_my_transmitter:
   0000                     677 	.ds 1
                    0001    678 Fydrip$status_lights$0$0==.
   0001                     679 _status_lights:
   0001                     680 	.ds 1
                    0002    681 Fydrip$allow_alternate_usb_protocol$0$0==.
   0002                     682 _allow_alternate_usb_protocol:
   0002                     683 	.ds 1
                    0003    684 Fydrip$debug_mode$0$0==.
   0003                     685 _debug_mode:
   0003                     686 	.ds 1
                    0004    687 Fydrip$encrypt_output$0$0==.
   0004                     688 _encrypt_output:
   0004                     689 	.ds 1
                    0005    690 G$needsTimingCalibration$0$0==.
   0005                     691 _needsTimingCalibration::
   0005                     692 	.ds 1
                    0006    693 G$usbEnabled$0$0==.
   0006                     694 _usbEnabled::
   0006                     695 	.ds 1
                    0007    696 Lydrip.goToSleep$storedDma0Armed$3$3==.
   0007                     697 _goToSleep_storedDma0Armed_3_3:
   0007                     698 	.ds 1
                    0008    699 Lydrip.goToSleep$savedP0IE$3$3==.
   0008                     700 _goToSleep_savedP0IE_3_3:
   0008                     701 	.ds 1
                            702 ;--------------------------------------------------------
                            703 ; paged external ram data
                            704 ;--------------------------------------------------------
                            705 	.area PSEG    (PAG,XDATA)
                    0000    706 Fydrip$wake_earlier_for_next_miss$0$0==.
   0000                     707 _wake_earlier_for_next_miss:
   0000                     708 	.ds 1
                    0001    709 Fydrip$misses_until_failure$0$0==.
   0001                     710 _misses_until_failure:
   0001                     711 	.ds 1
                    0002    712 Fydrip$fOffset$0$0==.
   0002                     713 _fOffset:
   0002                     714 	.ds 4
                    0006    715 Fydrip$nChannels$0$0==.
   0006                     716 _nChannels:
   0006                     717 	.ds 4
                    000A    718 Fydrip$waitTimes$0$0==.
   000A                     719 _waitTimes:
   000A                     720 	.ds 16
                    001A    721 Fydrip$delayedWaitTimes$0$0==.
   001A                     722 _delayedWaitTimes:
   001A                     723 	.ds 16
                    002A    724 Fydrip$catch_offsets$0$0==.
   002A                     725 _catch_offsets:
   002A                     726 	.ds 16
                    003A    727 Fydrip$last_catch_channel$0$0==.
   003A                     728 _last_catch_channel:
   003A                     729 	.ds 1
                    003B    730 Fydrip$save_IEN0$0$0==.
   003B                     731 _save_IEN0:
   003B                     732 	.ds 1
                    003C    733 Fydrip$save_IEN1$0$0==.
   003C                     734 _save_IEN1:
   003C                     735 	.ds 1
                    003D    736 Fydrip$save_IEN2$0$0==.
   003D                     737 _save_IEN2:
   003D                     738 	.ds 1
                    003E    739 G$sequential_missed_packets$0$0==.
   003E                     740 _sequential_missed_packets::
   003E                     741 	.ds 1
                    003F    742 G$intMaxStrLen$0$0==.
   003F                     743 _intMaxStrLen::
   003F                     744 	.ds 1
                    0040    745 Lydrip.min8$b$1$1==.
   0040                     746 _min8_PARM_2:
   0040                     747 	.ds 1
                    0041    748 Lydrip.bit_reverse_bytes$nLen$1$1==.
   0041                     749 _bit_reverse_bytes_PARM_2:
   0041                     750 	.ds 1
                    0042    751 Lydrip.bit_reverse_bytes$buf$1$1==.
   0042                     752 _bit_reverse_bytes_buf_1_1:
   0042                     753 	.ds 3
                    0045    754 Lydrip.getTimeBytes$tVector$1$1==.
   0045                     755 _getTimeBytes_tVector_1_1:
   0045                     756 	.ds 2
                    0047    757 Lydrip.print_packet$pPkt$1$1==.
   0047                     758 _print_packet_pPkt_1_1:
   0047                     759 	.ds 2
                    0049    760 Lydrip.goToSleep$storedDescHigh$3$3==.
   0049                     761 _goToSleep_storedDescHigh_3_3:
   0049                     762 	.ds 1
                    004A    763 Lydrip.goToSleep$storedDescLow$3$3==.
   004A                     764 _goToSleep_storedDescLow_3_3:
   004A                     765 	.ds 1
                    004B    766 Lydrip.goToSleep$storedIEN1$3$3==.
   004B                     767 _goToSleep_storedIEN1_3_3:
   004B                     768 	.ds 1
                    004C    769 Lydrip.goToSleep$storedIEN2$3$3==.
   004C                     770 _goToSleep_storedIEN2_3_3:
   004C                     771 	.ds 1
                    004D    772 Lydrip.goToSleep$savedP1SEL$3$3==.
   004D                     773 _goToSleep_savedP1SEL_3_3:
   004D                     774 	.ds 1
                    004E    775 Lydrip.goToSleep$savedP1DIR$3$3==.
   004E                     776 _goToSleep_savedP1DIR_3_3:
   004E                     777 	.ds 1
                    004F    778 Lydrip.goToSleep$start_waiting$3$8==.
   004F                     779 _goToSleep_start_waiting_3_8:
   004F                     780 	.ds 4
                    0053    781 Lydrip.WaitForPacket$pkt$1$1==.
   0053                     782 _WaitForPacket_PARM_2:
   0053                     783 	.ds 2
                    0055    784 Lydrip.get_packet$pPkt$1$1==.
   0055                     785 _get_packet_pPkt_1_1:
   0055                     786 	.ds 2
                            787 ;--------------------------------------------------------
                            788 ; external ram data
                            789 ;--------------------------------------------------------
                            790 	.area XSEG    (XDATA)
                    DF00    791 Fydrip$SYNC1$0$0 == 0xdf00
                    DF00    792 _SYNC1	=	0xdf00
                    DF01    793 Fydrip$SYNC0$0$0 == 0xdf01
                    DF01    794 _SYNC0	=	0xdf01
                    DF02    795 Fydrip$PKTLEN$0$0 == 0xdf02
                    DF02    796 _PKTLEN	=	0xdf02
                    DF03    797 Fydrip$PKTCTRL1$0$0 == 0xdf03
                    DF03    798 _PKTCTRL1	=	0xdf03
                    DF04    799 Fydrip$PKTCTRL0$0$0 == 0xdf04
                    DF04    800 _PKTCTRL0	=	0xdf04
                    DF05    801 Fydrip$ADDR$0$0 == 0xdf05
                    DF05    802 _ADDR	=	0xdf05
                    DF06    803 Fydrip$CHANNR$0$0 == 0xdf06
                    DF06    804 _CHANNR	=	0xdf06
                    DF07    805 Fydrip$FSCTRL1$0$0 == 0xdf07
                    DF07    806 _FSCTRL1	=	0xdf07
                    DF08    807 Fydrip$FSCTRL0$0$0 == 0xdf08
                    DF08    808 _FSCTRL0	=	0xdf08
                    DF09    809 Fydrip$FREQ2$0$0 == 0xdf09
                    DF09    810 _FREQ2	=	0xdf09
                    DF0A    811 Fydrip$FREQ1$0$0 == 0xdf0a
                    DF0A    812 _FREQ1	=	0xdf0a
                    DF0B    813 Fydrip$FREQ0$0$0 == 0xdf0b
                    DF0B    814 _FREQ0	=	0xdf0b
                    DF0C    815 Fydrip$MDMCFG4$0$0 == 0xdf0c
                    DF0C    816 _MDMCFG4	=	0xdf0c
                    DF0D    817 Fydrip$MDMCFG3$0$0 == 0xdf0d
                    DF0D    818 _MDMCFG3	=	0xdf0d
                    DF0E    819 Fydrip$MDMCFG2$0$0 == 0xdf0e
                    DF0E    820 _MDMCFG2	=	0xdf0e
                    DF0F    821 Fydrip$MDMCFG1$0$0 == 0xdf0f
                    DF0F    822 _MDMCFG1	=	0xdf0f
                    DF10    823 Fydrip$MDMCFG0$0$0 == 0xdf10
                    DF10    824 _MDMCFG0	=	0xdf10
                    DF11    825 Fydrip$DEVIATN$0$0 == 0xdf11
                    DF11    826 _DEVIATN	=	0xdf11
                    DF12    827 Fydrip$MCSM2$0$0 == 0xdf12
                    DF12    828 _MCSM2	=	0xdf12
                    DF13    829 Fydrip$MCSM1$0$0 == 0xdf13
                    DF13    830 _MCSM1	=	0xdf13
                    DF14    831 Fydrip$MCSM0$0$0 == 0xdf14
                    DF14    832 _MCSM0	=	0xdf14
                    DF15    833 Fydrip$FOCCFG$0$0 == 0xdf15
                    DF15    834 _FOCCFG	=	0xdf15
                    DF16    835 Fydrip$BSCFG$0$0 == 0xdf16
                    DF16    836 _BSCFG	=	0xdf16
                    DF17    837 Fydrip$AGCCTRL2$0$0 == 0xdf17
                    DF17    838 _AGCCTRL2	=	0xdf17
                    DF18    839 Fydrip$AGCCTRL1$0$0 == 0xdf18
                    DF18    840 _AGCCTRL1	=	0xdf18
                    DF19    841 Fydrip$AGCCTRL0$0$0 == 0xdf19
                    DF19    842 _AGCCTRL0	=	0xdf19
                    DF1A    843 Fydrip$FREND1$0$0 == 0xdf1a
                    DF1A    844 _FREND1	=	0xdf1a
                    DF1B    845 Fydrip$FREND0$0$0 == 0xdf1b
                    DF1B    846 _FREND0	=	0xdf1b
                    DF1C    847 Fydrip$FSCAL3$0$0 == 0xdf1c
                    DF1C    848 _FSCAL3	=	0xdf1c
                    DF1D    849 Fydrip$FSCAL2$0$0 == 0xdf1d
                    DF1D    850 _FSCAL2	=	0xdf1d
                    DF1E    851 Fydrip$FSCAL1$0$0 == 0xdf1e
                    DF1E    852 _FSCAL1	=	0xdf1e
                    DF1F    853 Fydrip$FSCAL0$0$0 == 0xdf1f
                    DF1F    854 _FSCAL0	=	0xdf1f
                    DF23    855 Fydrip$TEST2$0$0 == 0xdf23
                    DF23    856 _TEST2	=	0xdf23
                    DF24    857 Fydrip$TEST1$0$0 == 0xdf24
                    DF24    858 _TEST1	=	0xdf24
                    DF25    859 Fydrip$TEST0$0$0 == 0xdf25
                    DF25    860 _TEST0	=	0xdf25
                    DF2E    861 Fydrip$PA_TABLE0$0$0 == 0xdf2e
                    DF2E    862 _PA_TABLE0	=	0xdf2e
                    DF2F    863 Fydrip$IOCFG2$0$0 == 0xdf2f
                    DF2F    864 _IOCFG2	=	0xdf2f
                    DF30    865 Fydrip$IOCFG1$0$0 == 0xdf30
                    DF30    866 _IOCFG1	=	0xdf30
                    DF31    867 Fydrip$IOCFG0$0$0 == 0xdf31
                    DF31    868 _IOCFG0	=	0xdf31
                    DF36    869 Fydrip$PARTNUM$0$0 == 0xdf36
                    DF36    870 _PARTNUM	=	0xdf36
                    DF37    871 Fydrip$VERSION$0$0 == 0xdf37
                    DF37    872 _VERSION	=	0xdf37
                    DF38    873 Fydrip$FREQEST$0$0 == 0xdf38
                    DF38    874 _FREQEST	=	0xdf38
                    DF39    875 Fydrip$LQI$0$0 == 0xdf39
                    DF39    876 _LQI	=	0xdf39
                    DF3A    877 Fydrip$RSSI$0$0 == 0xdf3a
                    DF3A    878 _RSSI	=	0xdf3a
                    DF3B    879 Fydrip$MARCSTATE$0$0 == 0xdf3b
                    DF3B    880 _MARCSTATE	=	0xdf3b
                    DF3C    881 Fydrip$PKTSTATUS$0$0 == 0xdf3c
                    DF3C    882 _PKTSTATUS	=	0xdf3c
                    DF3D    883 Fydrip$VCO_VC_DAC$0$0 == 0xdf3d
                    DF3D    884 _VCO_VC_DAC	=	0xdf3d
                    DF40    885 Fydrip$I2SCFG0$0$0 == 0xdf40
                    DF40    886 _I2SCFG0	=	0xdf40
                    DF41    887 Fydrip$I2SCFG1$0$0 == 0xdf41
                    DF41    888 _I2SCFG1	=	0xdf41
                    DF42    889 Fydrip$I2SDATL$0$0 == 0xdf42
                    DF42    890 _I2SDATL	=	0xdf42
                    DF43    891 Fydrip$I2SDATH$0$0 == 0xdf43
                    DF43    892 _I2SDATH	=	0xdf43
                    DF44    893 Fydrip$I2SWCNT$0$0 == 0xdf44
                    DF44    894 _I2SWCNT	=	0xdf44
                    DF45    895 Fydrip$I2SSTAT$0$0 == 0xdf45
                    DF45    896 _I2SSTAT	=	0xdf45
                    DF46    897 Fydrip$I2SCLKF0$0$0 == 0xdf46
                    DF46    898 _I2SCLKF0	=	0xdf46
                    DF47    899 Fydrip$I2SCLKF1$0$0 == 0xdf47
                    DF47    900 _I2SCLKF1	=	0xdf47
                    DF48    901 Fydrip$I2SCLKF2$0$0 == 0xdf48
                    DF48    902 _I2SCLKF2	=	0xdf48
                    DE00    903 Fydrip$USBADDR$0$0 == 0xde00
                    DE00    904 _USBADDR	=	0xde00
                    DE01    905 Fydrip$USBPOW$0$0 == 0xde01
                    DE01    906 _USBPOW	=	0xde01
                    DE02    907 Fydrip$USBIIF$0$0 == 0xde02
                    DE02    908 _USBIIF	=	0xde02
                    DE04    909 Fydrip$USBOIF$0$0 == 0xde04
                    DE04    910 _USBOIF	=	0xde04
                    DE06    911 Fydrip$USBCIF$0$0 == 0xde06
                    DE06    912 _USBCIF	=	0xde06
                    DE07    913 Fydrip$USBIIE$0$0 == 0xde07
                    DE07    914 _USBIIE	=	0xde07
                    DE09    915 Fydrip$USBOIE$0$0 == 0xde09
                    DE09    916 _USBOIE	=	0xde09
                    DE0B    917 Fydrip$USBCIE$0$0 == 0xde0b
                    DE0B    918 _USBCIE	=	0xde0b
                    DE0C    919 Fydrip$USBFRML$0$0 == 0xde0c
                    DE0C    920 _USBFRML	=	0xde0c
                    DE0D    921 Fydrip$USBFRMH$0$0 == 0xde0d
                    DE0D    922 _USBFRMH	=	0xde0d
                    DE0E    923 Fydrip$USBINDEX$0$0 == 0xde0e
                    DE0E    924 _USBINDEX	=	0xde0e
                    DE10    925 Fydrip$USBMAXI$0$0 == 0xde10
                    DE10    926 _USBMAXI	=	0xde10
                    DE11    927 Fydrip$USBCSIL$0$0 == 0xde11
                    DE11    928 _USBCSIL	=	0xde11
                    DE12    929 Fydrip$USBCSIH$0$0 == 0xde12
                    DE12    930 _USBCSIH	=	0xde12
                    DE13    931 Fydrip$USBMAXO$0$0 == 0xde13
                    DE13    932 _USBMAXO	=	0xde13
                    DE14    933 Fydrip$USBCSOL$0$0 == 0xde14
                    DE14    934 _USBCSOL	=	0xde14
                    DE15    935 Fydrip$USBCSOH$0$0 == 0xde15
                    DE15    936 _USBCSOH	=	0xde15
                    DE16    937 Fydrip$USBCNTL$0$0 == 0xde16
                    DE16    938 _USBCNTL	=	0xde16
                    DE17    939 Fydrip$USBCNTH$0$0 == 0xde17
                    DE17    940 _USBCNTH	=	0xde17
                    DE20    941 Fydrip$USBF0$0$0 == 0xde20
                    DE20    942 _USBF0	=	0xde20
                    DE22    943 Fydrip$USBF1$0$0 == 0xde22
                    DE22    944 _USBF1	=	0xde22
                    DE24    945 Fydrip$USBF2$0$0 == 0xde24
                    DE24    946 _USBF2	=	0xde24
                    DE26    947 Fydrip$USBF3$0$0 == 0xde26
                    DE26    948 _USBF3	=	0xde26
                    DE28    949 Fydrip$USBF4$0$0 == 0xde28
                    DE28    950 _USBF4	=	0xde28
                    DE2A    951 Fydrip$USBF5$0$0 == 0xde2a
                    DE2A    952 _USBF5	=	0xde2a
                    0000    953 Lydrip.bit_reverse_byte$bRet$1$1==.
   0000                     954 _bit_reverse_byte_bRet_1_1:
   0000                     955 	.ds 1
                    0001    956 Lydrip.dex_num_decoder$usReversed$1$1==.
   0001                     957 _dex_num_decoder_usReversed_1_1:
   0001                     958 	.ds 2
                    0003    959 Lydrip.dexcom_src_to_ascii$addr$1$1==.
   0003                     960 _dexcom_src_to_ascii_PARM_2:
   0003                     961 	.ds 2
                    0005    962 Lydrip.dexcom_src_to_ascii$src$1$1==.
   0005                     963 _dexcom_src_to_ascii_src_1_1:
   0005                     964 	.ds 4
                    0009    965 Lydrip.getSrcValue$srcVal$1$1==.
   0009                     966 _getSrcValue_srcVal_1_1:
   0009                     967 	.ds 1
                    000A    968 Lydrip.getFonaString$uartCharacters$1$1==.
   000A                     969 _getFonaString_uartCharacters_1_1:
   000A                     970 	.ds 80
                    005A    971 Lydrip.getFonaString$stop$1$1==.
   005A                     972 _getFonaString_stop_1_1:
   005A                     973 	.ds 4
                    005E    974 Lydrip.getFonaString$now$1$1==.
   005E                     975 _getFonaString_now_1_1:
   005E                     976 	.ds 4
                    0062    977 Lydrip.sendAT$atString$1$1==.
   0062                     978 _sendAT_atString_1_1:
   0062                     979 	.ds 2
                    0064    980 Lydrip.sendAT$ATresponse$1$1==.
   0064                     981 _sendAT_ATresponse_1_1:
   0064                     982 	.ds 80
                    00B4    983 Lydrip.enableESP$c$1$1==.
   00B4                     984 _enableESP_c_1_1:
   00B4                     985 	.ds 80
                    0104    986 Lydrip.enableESP$nofile$1$1==.
   0104                     987 _enableESP_nofile_1_1:
   0104                     988 	.ds 7
                    010B    989 Lydrip.getWifiStatus$i$1$1==.
   010B                     990 _getWifiStatus_i_1_1:
   010B                     991 	.ds 2
                    010D    992 Lydrip.getWifiStatus$intStatus$1$1==.
   010D                     993 _getWifiStatus_intStatus_1_1:
   010D                     994 	.ds 2
                    010F    995 Lydrip.getWifiStatus$c$1$1==.
   010F                     996 _getWifiStatus_c_1_1:
   010F                     997 	.ds 80
                    015F    998 Lydrip.wifiConnect$atString$1$1==.
   015F                     999 _wifiConnect_atString_1_1:
   015F                    1000 	.ds 40
                    0187   1001 Lydrip.wifiConnect$intWifiStatus$1$1==.
   0187                    1002 _wifiConnect_intWifiStatus_1_1:
   0187                    1003 	.ds 2
                    0189   1004 Lydrip.getTimeBytes$c$1$1==.
   0189                    1005 _getTimeBytes_c_1_1:
   0189                    1006 	.ds 80
                    01D9   1007 Lydrip.getTimeBytes$strMMM$1$1==.
   01D9                    1008 _getTimeBytes_strMMM_1_1:
   01D9                    1009 	.ds 4
                    01DD   1010 Lydrip.print_packet$transID$1$1==.
   01DD                    1011 _print_packet_transID_1_1:
   01DD                    1012 	.ds 6
                    01E3   1013 Lydrip.print_packet$iv$1$1==.
   01E3                    1014 _print_packet_iv_1_1:
   01E3                    1015 	.ds 16
                    01F3   1016 Lydrip.print_packet$sprintfBuffer$1$1==.
   01F3                    1017 _print_packet_sprintfBuffer_1_1:
   01F3                    1018 	.ds 64
                    0233   1019 Lydrip.print_packet$AESBuffer$1$1==.
   0233                    1020 _print_packet_AESBuffer_1_1:
   0233                    1021 	.ds 64
                    0273   1022 Lydrip.print_packet$getTimeResponse$1$1==.
   0273                    1023 _print_packet_getTimeResponse_1_1:
   0273                    1024 	.ds 17
                    0284   1025 Lydrip.goToSleep$seconds$1$1==.
   0284                    1026 _goToSleep_seconds_1_1:
   0284                    1027 	.ds 2
                    0286   1028 Lydrip.putchar$c$1$1==.
   0286                    1029 _putchar_c_1_1:
   0286                    1030 	.ds 1
                    0287   1031 Lydrip.swap_channel$newFSCTRL0$1$1==.
   0287                    1032 _swap_channel_PARM_2:
   0287                    1033 	.ds 1
                    0288   1034 Lydrip.swap_channel$channel$1$1==.
   0288                    1035 _swap_channel_channel_1_1:
   0288                    1036 	.ds 1
                    0289   1037 Lydrip.WaitForPacket$channel$1$1==.
   0289                    1038 _WaitForPacket_PARM_3:
   0289                    1039 	.ds 1
                    028A   1040 Lydrip.WaitForPacket$milliseconds$1$1==.
   028A                    1041 _WaitForPacket_milliseconds_1_1:
   028A                    1042 	.ds 2
                    028C   1043 Lydrip.WaitForPacket$six_minutes$1$1==.
   028C                    1044 _WaitForPacket_six_minutes_1_1:
   028C                    1045 	.ds 4
                    0290   1046 Lydrip.WaitForPacket$transID$1$1==.
   0290                    1047 _WaitForPacket_transID_1_1:
   0290                    1048 	.ds 6
                    0296   1049 Lydrip.delayFor$wait_chan$1$1==.
   0296                    1050 _delayFor_wait_chan_1_1:
   0296                    1051 	.ds 2
                    0298   1052 Lydrip.main$Pkt$2$2==.
   0298                    1053 _main_Pkt_2_2:
   0298                    1054 	.ds 21
                           1055 ;--------------------------------------------------------
                           1056 ; absolute external ram data
                           1057 ;--------------------------------------------------------
                           1058 	.area XABS    (ABS,XDATA)
                           1059 ;--------------------------------------------------------
                           1060 ; external initialized ram data
                           1061 ;--------------------------------------------------------
                           1062 	.area XISEG   (XDATA)
                    0000   1063 Fydrip$transmitter_id$0$0==.
   0000                    1064 _transmitter_id:
   0000                    1065 	.ds 6
                    0006   1066 Fydrip$dexie_host_address$0$0==.
   0006                    1067 _dexie_host_address:
   0006                    1068 	.ds 25
                    001F   1069 Fydrip$dexie_host_port$0$0==.
   001F                    1070 _dexie_host_port:
   001F                    1071 	.ds 6
                    0025   1072 G$wixFone_ID$0$0==.
   0025                    1073 _wixFone_ID::
   0025                    1074 	.ds 8
                    002D   1075 Fydrip$key$0$0==.
   002D                    1076 _key:
   002D                    1077 	.ds 16
                    003D   1078 Fydrip$start_channel$0$0==.
   003D                    1079 _start_channel:
   003D                    1080 	.ds 1
                    003E   1081 Fydrip$defaultfOffset$0$0==.
   003E                    1082 _defaultfOffset:
   003E                    1083 	.ds 4
                    0042   1084 G$PM2_BUF$0$0==.
   0042                    1085 _PM2_BUF::
   0042                    1086 	.ds 7
                    0049   1087 G$dmaDesc$0$0==.
   0049                    1088 _dmaDesc::
   0049                    1089 	.ds 8
                    0051   1090 G$AT_TIMEOUT$0$0==.
   0051                    1091 _AT_TIMEOUT::
   0051                    1092 	.ds 1
                    0052   1093 Fydrip$defaultATWait$0$0==.
   0052                    1094 _defaultATWait:
   0052                    1095 	.ds 4
                    0056   1096 G$SrcNameTable$0$0==.
   0056                    1097 _SrcNameTable::
   0056                    1098 	.ds 32
                           1099 	.area HOME    (CODE)
                           1100 	.area GSINIT0 (CODE)
                           1101 	.area GSINIT1 (CODE)
                           1102 	.area GSINIT2 (CODE)
                           1103 	.area GSINIT3 (CODE)
                           1104 	.area GSINIT4 (CODE)
                           1105 	.area GSINIT5 (CODE)
                           1106 	.area GSINIT  (CODE)
                           1107 	.area GSFINAL (CODE)
                           1108 	.area CSEG    (CODE)
                           1109 ;--------------------------------------------------------
                           1110 ; interrupt vector 
                           1111 ;--------------------------------------------------------
                           1112 	.area HOME    (CODE)
   0000                    1113 __interrupt_vect:
   0000 02s00r00           1114 	ljmp	__sdcc_gsinit_startup
   0003 32                 1115 	reti
   0004                    1116 	.ds	7
   000B 32                 1117 	reti
   000C                    1118 	.ds	7
   0013 32                 1119 	reti
   0014                    1120 	.ds	7
   001B 02s00r00           1121 	ljmp	_ISR_URX1
   001E                    1122 	.ds	5
   0023 32                 1123 	reti
   0024                    1124 	.ds	7
   002B 02s00r04           1125 	ljmp	_ISR_ST
   002E                    1126 	.ds	5
   0033 32                 1127 	reti
   0034                    1128 	.ds	7
   003B 32                 1129 	reti
   003C                    1130 	.ds	7
   0043 32                 1131 	reti
   0044                    1132 	.ds	7
   004B 32                 1133 	reti
   004C                    1134 	.ds	7
   0053 32                 1135 	reti
   0054                    1136 	.ds	7
   005B 32                 1137 	reti
   005C                    1138 	.ds	7
   0063 02s00r00           1139 	ljmp	_ISR_T4
   0066                    1140 	.ds	5
   006B 32                 1141 	reti
   006C                    1142 	.ds	7
   0073 02s00r00           1143 	ljmp	_ISR_UTX1
   0076                    1144 	.ds	5
   007B 32                 1145 	reti
   007C                    1146 	.ds	7
   0083 02s00r00           1147 	ljmp	_ISR_RF
                           1148 ;--------------------------------------------------------
                           1149 ; global & static initialisations
                           1150 ;--------------------------------------------------------
                           1151 	.area HOME    (CODE)
                           1152 	.area GSINIT  (CODE)
                           1153 	.area GSFINAL (CODE)
                           1154 	.area GSINIT  (CODE)
                           1155 	.globl __sdcc_gsinit_startup
                           1156 	.globl __sdcc_program_startup
                           1157 	.globl __start__stack
                           1158 	.globl __mcs51_genXINIT
                           1159 	.globl __mcs51_genXRAMCLEAR
                           1160 	.globl __mcs51_genRAMCLEAR
                           1161 ;------------------------------------------------------------
                           1162 ;Allocation info for local variables in function 'getWifiStatus'
                           1163 ;------------------------------------------------------------
                           1164 ;i                         Allocated with name '_getWifiStatus_i_1_1'
                           1165 ;intStatus                 Allocated with name '_getWifiStatus_intStatus_1_1'
                           1166 ;c                         Allocated with name '_getWifiStatus_c_1_1'
                           1167 ;------------------------------------------------------------
                    0000   1168 	G$getWifiStatus$0$0 ==.
                    0000   1169 	C$ydrip.c$475$1$1 ==.
                           1170 ;	apps/ydrip/ydrip.c:475: XDATA static int16 i=0;
   0000 90s01r0B           1171 	mov	dptr,#_getWifiStatus_i_1_1
   0003 E4                 1172 	clr	a
   0004 F0                 1173 	movx	@dptr,a
   0005 A3                 1174 	inc	dptr
   0006 F0                 1175 	movx	@dptr,a
                    0007   1176 	G$main$0$0 ==.
                    0007   1177 	C$ydrip.c$65$1$1 ==.
                           1178 ;	apps/ydrip/ydrip.c:65: static volatile BIT only_listen_for_my_transmitter = 1;                                           //
   0007 D2*00              1179 	setb	_only_listen_for_my_transmitter
                    0009   1180 	G$main$0$0 ==.
                    0009   1181 	C$ydrip.c$68$1$1 ==.
                           1182 ;	apps/ydrip/ydrip.c:68: static volatile BIT status_lights = 1;                                                            //
   0009 D2*01              1183 	setb	_status_lights
                    000B   1184 	G$main$0$0 ==.
                    000B   1185 	C$ydrip.c$72$1$1 ==.
                           1186 ;	apps/ydrip/ydrip.c:72: static volatile BIT allow_alternate_usb_protocol = 0;
   000B C2*02              1187 	clr	_allow_alternate_usb_protocol
                    000D   1188 	G$main$0$0 ==.
                    000D   1189 	C$ydrip.c$76$1$1 ==.
                           1190 ;	apps/ydrip/ydrip.c:76: static volatile BIT debug_mode = 0;
   000D C2*03              1191 	clr	_debug_mode
                    000F   1192 	G$main$0$0 ==.
                    000F   1193 	C$ydrip.c$104$1$1 ==.
                           1194 ;	apps/ydrip/ydrip.c:104: static volatile BIT encrypt_output = 1;
   000F D2*04              1195 	setb	_encrypt_output
                    0011   1196 	G$main$0$0 ==.
                    0011   1197 	C$ydrip.c$144$1$1 ==.
                           1198 ;	apps/ydrip/ydrip.c:144: BIT needsTimingCalibration = 1;
   0011 D2*05              1199 	setb	_needsTimingCalibration
                    0013   1200 	G$main$0$0 ==.
                    0013   1201 	C$ydrip.c$145$1$1 ==.
                           1202 ;	apps/ydrip/ydrip.c:145: BIT usbEnabled = 1;
   0013 D2*06              1203 	setb	_usbEnabled
                    0015   1204 	G$main$0$0 ==.
                    0015   1205 	C$ydrip.c$93$1$1 ==.
                           1206 ;	apps/ydrip/ydrip.c:93: static volatile uint8 wake_earlier_for_next_miss = 20;                                            //
   0015 78r00              1207 	mov	r0,#_wake_earlier_for_next_miss
   0017 74 14              1208 	mov	a,#0x14
   0019 F2                 1209 	movx	@r0,a
                    001A   1210 	G$main$0$0 ==.
                    001A   1211 	C$ydrip.c$97$1$1 ==.
                           1212 ;	apps/ydrip/ydrip.c:97: static volatile uint8 misses_until_failure = 0;                                                   //
   001A 78r01              1213 	mov	r0,#_misses_until_failure
   001C E4                 1214 	clr	a
   001D F2                 1215 	movx	@r0,a
                    001E   1216 	G$main$0$0 ==.
                    001E   1217 	C$ydrip.c$136$1$1 ==.
                           1218 ;	apps/ydrip/ydrip.c:136: static int8 fOffset[NUM_CHANNELS] = {0xCE,0xD5,0xE6,0xE5};
   001E 78r02              1219 	mov	r0,#_fOffset
   0020 74 CE              1220 	mov	a,#0xCE
   0022 F2                 1221 	movx	@r0,a
   0023 78r03              1222 	mov	r0,#(_fOffset + 0x0001)
   0025 74 D5              1223 	mov	a,#0xD5
   0027 F2                 1224 	movx	@r0,a
   0028 78r04              1225 	mov	r0,#(_fOffset + 0x0002)
   002A 74 E6              1226 	mov	a,#0xE6
   002C F2                 1227 	movx	@r0,a
   002D 78r05              1228 	mov	r0,#(_fOffset + 0x0003)
   002F 74 E5              1229 	mov	a,#0xE5
   0031 F2                 1230 	movx	@r0,a
                    0032   1231 	G$main$0$0 ==.
                    0032   1232 	C$ydrip.c$138$1$1 ==.
                           1233 ;	apps/ydrip/ydrip.c:138: static uint8 nChannels[NUM_CHANNELS] = { 0, 100, 199, 209 };
   0032 78r06              1234 	mov	r0,#_nChannels
   0034 E4                 1235 	clr	a
   0035 F2                 1236 	movx	@r0,a
   0036 78r07              1237 	mov	r0,#(_nChannels + 0x0001)
   0038 74 64              1238 	mov	a,#0x64
   003A F2                 1239 	movx	@r0,a
   003B 78r08              1240 	mov	r0,#(_nChannels + 0x0002)
   003D 74 C7              1241 	mov	a,#0xC7
   003F F2                 1242 	movx	@r0,a
   0040 78r09              1243 	mov	r0,#(_nChannels + 0x0003)
   0042 74 D1              1244 	mov	a,#0xD1
   0044 F2                 1245 	movx	@r0,a
                    0045   1246 	G$main$0$0 ==.
                    0045   1247 	C$ydrip.c$139$1$1 ==.
                           1248 ;	apps/ydrip/ydrip.c:139: static uint32 waitTimes[NUM_CHANNELS] = { 13500, 500, 500, 500 };
   0045 78r0A              1249 	mov	r0,#_waitTimes
   0047 74 BC              1250 	mov	a,#0xBC
   0049 F2                 1251 	movx	@r0,a
   004A 08                 1252 	inc	r0
   004B 74 34              1253 	mov	a,#0x34
   004D F2                 1254 	movx	@r0,a
   004E 08                 1255 	inc	r0
   004F E4                 1256 	clr	a
   0050 F2                 1257 	movx	@r0,a
   0051 08                 1258 	inc	r0
   0052 F2                 1259 	movx	@r0,a
   0053 78r0E              1260 	mov	r0,#(_waitTimes + 0x0004)
   0055 74 F4              1261 	mov	a,#0xF4
   0057 F2                 1262 	movx	@r0,a
   0058 08                 1263 	inc	r0
   0059 74 01              1264 	mov	a,#0x01
   005B F2                 1265 	movx	@r0,a
   005C 08                 1266 	inc	r0
   005D E4                 1267 	clr	a
   005E F2                 1268 	movx	@r0,a
   005F 08                 1269 	inc	r0
   0060 F2                 1270 	movx	@r0,a
   0061 78r12              1271 	mov	r0,#(_waitTimes + 0x0008)
   0063 74 F4              1272 	mov	a,#0xF4
   0065 F2                 1273 	movx	@r0,a
   0066 08                 1274 	inc	r0
   0067 74 01              1275 	mov	a,#0x01
   0069 F2                 1276 	movx	@r0,a
   006A 08                 1277 	inc	r0
   006B E4                 1278 	clr	a
   006C F2                 1279 	movx	@r0,a
   006D 08                 1280 	inc	r0
   006E F2                 1281 	movx	@r0,a
   006F 78r16              1282 	mov	r0,#(_waitTimes + 0x000c)
   0071 74 F4              1283 	mov	a,#0xF4
   0073 F2                 1284 	movx	@r0,a
   0074 08                 1285 	inc	r0
   0075 74 01              1286 	mov	a,#0x01
   0077 F2                 1287 	movx	@r0,a
   0078 08                 1288 	inc	r0
   0079 E4                 1289 	clr	a
   007A F2                 1290 	movx	@r0,a
   007B 08                 1291 	inc	r0
   007C F2                 1292 	movx	@r0,a
                    007D   1293 	G$main$0$0 ==.
                    007D   1294 	C$ydrip.c$141$1$1 ==.
                           1295 ;	apps/ydrip/ydrip.c:141: static uint32 delayedWaitTimes[NUM_CHANNELS] = { 0, 700, 700, 700 };
   007D 78r1A              1296 	mov	r0,#_delayedWaitTimes
   007F E4                 1297 	clr	a
   0080 F2                 1298 	movx	@r0,a
   0081 08                 1299 	inc	r0
   0082 F2                 1300 	movx	@r0,a
   0083 08                 1301 	inc	r0
   0084 F2                 1302 	movx	@r0,a
   0085 08                 1303 	inc	r0
   0086 F2                 1304 	movx	@r0,a
   0087 78r1E              1305 	mov	r0,#(_delayedWaitTimes + 0x0004)
   0089 74 BC              1306 	mov	a,#0xBC
   008B F2                 1307 	movx	@r0,a
   008C 08                 1308 	inc	r0
   008D 74 02              1309 	mov	a,#0x02
   008F F2                 1310 	movx	@r0,a
   0090 08                 1311 	inc	r0
   0091 E4                 1312 	clr	a
   0092 F2                 1313 	movx	@r0,a
   0093 08                 1314 	inc	r0
   0094 F2                 1315 	movx	@r0,a
   0095 78r22              1316 	mov	r0,#(_delayedWaitTimes + 0x0008)
   0097 74 BC              1317 	mov	a,#0xBC
   0099 F2                 1318 	movx	@r0,a
   009A 08                 1319 	inc	r0
   009B 74 02              1320 	mov	a,#0x02
   009D F2                 1321 	movx	@r0,a
   009E 08                 1322 	inc	r0
   009F E4                 1323 	clr	a
   00A0 F2                 1324 	movx	@r0,a
   00A1 08                 1325 	inc	r0
   00A2 F2                 1326 	movx	@r0,a
   00A3 78r26              1327 	mov	r0,#(_delayedWaitTimes + 0x000c)
   00A5 74 BC              1328 	mov	a,#0xBC
   00A7 F2                 1329 	movx	@r0,a
   00A8 08                 1330 	inc	r0
   00A9 74 02              1331 	mov	a,#0x02
   00AB F2                 1332 	movx	@r0,a
   00AC 08                 1333 	inc	r0
   00AD E4                 1334 	clr	a
   00AE F2                 1335 	movx	@r0,a
   00AF 08                 1336 	inc	r0
   00B0 F2                 1337 	movx	@r0,a
                    00B1   1338 	G$main$0$0 ==.
                    00B1   1339 	C$ydrip.c$142$1$1 ==.
                           1340 ;	apps/ydrip/ydrip.c:142: static uint32 catch_offsets[NUM_CHANNELS] = { 0, 0, 0, 0 };
   00B1 78r2A              1341 	mov	r0,#_catch_offsets
   00B3 E4                 1342 	clr	a
   00B4 F2                 1343 	movx	@r0,a
   00B5 08                 1344 	inc	r0
   00B6 F2                 1345 	movx	@r0,a
   00B7 08                 1346 	inc	r0
   00B8 F2                 1347 	movx	@r0,a
   00B9 08                 1348 	inc	r0
   00BA F2                 1349 	movx	@r0,a
   00BB 78r2E              1350 	mov	r0,#(_catch_offsets + 0x0004)
   00BD E4                 1351 	clr	a
   00BE F2                 1352 	movx	@r0,a
   00BF 08                 1353 	inc	r0
   00C0 F2                 1354 	movx	@r0,a
   00C1 08                 1355 	inc	r0
   00C2 F2                 1356 	movx	@r0,a
   00C3 08                 1357 	inc	r0
   00C4 F2                 1358 	movx	@r0,a
   00C5 78r32              1359 	mov	r0,#(_catch_offsets + 0x0008)
   00C7 E4                 1360 	clr	a
   00C8 F2                 1361 	movx	@r0,a
   00C9 08                 1362 	inc	r0
   00CA F2                 1363 	movx	@r0,a
   00CB 08                 1364 	inc	r0
   00CC F2                 1365 	movx	@r0,a
   00CD 08                 1366 	inc	r0
   00CE F2                 1367 	movx	@r0,a
   00CF 78r36              1368 	mov	r0,#(_catch_offsets + 0x000c)
   00D1 E4                 1369 	clr	a
   00D2 F2                 1370 	movx	@r0,a
   00D3 08                 1371 	inc	r0
   00D4 F2                 1372 	movx	@r0,a
   00D5 08                 1373 	inc	r0
   00D6 F2                 1374 	movx	@r0,a
   00D7 08                 1375 	inc	r0
   00D8 F2                 1376 	movx	@r0,a
                    00D9   1377 	G$main$0$0 ==.
                    00D9   1378 	C$ydrip.c$143$1$1 ==.
                           1379 ;	apps/ydrip/ydrip.c:143: static uint8 last_catch_channel = 0;
   00D9 78r3A              1380 	mov	r0,#_last_catch_channel
   00DB E4                 1381 	clr	a
   00DC F2                 1382 	movx	@r0,a
                    00DD   1383 	G$main$0$0 ==.
                    00DD   1384 	C$ydrip.c$151$1$1 ==.
                           1385 ;	apps/ydrip/ydrip.c:151: volatile uint8 sequential_missed_packets = 0;
   00DD 78r3E              1386 	mov	r0,#_sequential_missed_packets
   00DF E4                 1387 	clr	a
   00E0 F2                 1388 	movx	@r0,a
                    00E1   1389 	G$main$0$0 ==.
                    00E1   1390 	C$ydrip.c$153$1$1 ==.
                           1391 ;	apps/ydrip/ydrip.c:153: uint8 intMaxStrLen = 80;
   00E1 78r3F              1392 	mov	r0,#_intMaxStrLen
   00E3 74 50              1393 	mov	a,#0x50
   00E5 F2                 1394 	movx	@r0,a
                           1395 	.area GSFINAL (CODE)
   0000 02s00r86           1396 	ljmp	__sdcc_program_startup
                           1397 ;--------------------------------------------------------
                           1398 ; Home
                           1399 ;--------------------------------------------------------
                           1400 	.area HOME    (CODE)
                           1401 	.area HOME    (CODE)
   0086                    1402 __sdcc_program_startup:
   0086 12s25r01           1403 	lcall	_main
                           1404 ;	return from main will lock up
   0089 80 FE              1405 	sjmp .
                           1406 ;--------------------------------------------------------
                           1407 ; code
                           1408 ;--------------------------------------------------------
                           1409 	.area CSEG    (CODE)
                           1410 ;------------------------------------------------------------
                           1411 ;Allocation info for local variables in function 'sleepInit'
                           1412 ;------------------------------------------------------------
                    0000   1413 	G$sleepInit$0$0 ==.
                    0000   1414 	C$ydrip.c$179$0$0 ==.
                           1415 ;	apps/ydrip/ydrip.c:179: void sleepInit(void) {
                           1416 ;	-----------------------------------------
                           1417 ;	 function sleepInit
                           1418 ;	-----------------------------------------
   0000                    1419 _sleepInit:
                    0007   1420 	ar7 = 0x07
                    0006   1421 	ar6 = 0x06
                    0005   1422 	ar5 = 0x05
                    0004   1423 	ar4 = 0x04
                    0003   1424 	ar3 = 0x03
                    0002   1425 	ar2 = 0x02
                    0001   1426 	ar1 = 0x01
                    0000   1427 	ar0 = 0x00
                    0000   1428 	C$ydrip.c$180$1$1 ==.
                           1429 ;	apps/ydrip/ydrip.c:180: WORIRQ  |= (1<<4);
   0000 43 A1 10           1430 	orl	_WORIRQ,#0x10
                    0003   1431 	C$ydrip.c$181$1$1 ==.
                    0003   1432 	XG$sleepInit$0$0 ==.
   0003 22                 1433 	ret
                           1434 ;------------------------------------------------------------
                           1435 ;Allocation info for local variables in function 'ISR_ST'
                           1436 ;------------------------------------------------------------
                    0004   1437 	G$ISR_ST$0$0 ==.
                    0004   1438 	C$ydrip.c$183$1$1 ==.
                           1439 ;	apps/ydrip/ydrip.c:183: ISR(ST, 1) {
                           1440 ;	-----------------------------------------
                           1441 ;	 function ISR_ST
                           1442 ;	-----------------------------------------
   0004                    1443 _ISR_ST:
                    000F   1444 	ar7 = 0x0F
                    000E   1445 	ar6 = 0x0E
                    000D   1446 	ar5 = 0x0D
                    000C   1447 	ar4 = 0x0C
                    000B   1448 	ar3 = 0x0B
                    000A   1449 	ar2 = 0x0A
                    0009   1450 	ar1 = 0x09
                    0008   1451 	ar0 = 0x08
                    0004   1452 	C$ydrip.c$184$1$1 ==.
                           1453 ;	apps/ydrip/ydrip.c:184: IRCON &= 0x7F;
   0004 53 C0 7F           1454 	anl	_IRCON,#0x7F
                    0007   1455 	C$ydrip.c$185$1$1 ==.
                           1456 ;	apps/ydrip/ydrip.c:185: WORIRQ &= 0xFE;
   0007 53 A1 FE           1457 	anl	_WORIRQ,#0xFE
                    000A   1458 	C$ydrip.c$186$1$1 ==.
                           1459 ;	apps/ydrip/ydrip.c:186: SLEEP &= 0xFC;
   000A 53 BE FC           1460 	anl	_SLEEP,#0xFC
                    000D   1461 	C$ydrip.c$187$1$1 ==.
                    000D   1462 	XG$ISR_ST$0$0 ==.
   000D 32                 1463 	reti
                           1464 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           1465 ;	eliminated unneeded push/pop psw
                           1466 ;	eliminated unneeded push/pop dpl
                           1467 ;	eliminated unneeded push/pop dph
                           1468 ;	eliminated unneeded push/pop b
                           1469 ;	eliminated unneeded push/pop acc
                           1470 ;------------------------------------------------------------
                           1471 ;Allocation info for local variables in function 'switchToRCOSC'
                           1472 ;------------------------------------------------------------
                    000E   1473 	G$switchToRCOSC$0$0 ==.
                    000E   1474 	C$ydrip.c$189$1$1 ==.
                           1475 ;	apps/ydrip/ydrip.c:189: void switchToRCOSC(void) {
                           1476 ;	-----------------------------------------
                           1477 ;	 function switchToRCOSC
                           1478 ;	-----------------------------------------
   000E                    1479 _switchToRCOSC:
                    0007   1480 	ar7 = 0x07
                    0006   1481 	ar6 = 0x06
                    0005   1482 	ar5 = 0x05
                    0004   1483 	ar4 = 0x04
                    0003   1484 	ar3 = 0x03
                    0002   1485 	ar2 = 0x02
                    0001   1486 	ar1 = 0x01
                    0000   1487 	ar0 = 0x00
                    000E   1488 	C$ydrip.c$190$1$1 ==.
                           1489 ;	apps/ydrip/ydrip.c:190: SLEEP &= ~0x04;
   000E AF BE              1490 	mov	r7,_SLEEP
   0010 53 07 FB           1491 	anl	ar7,#0xFB
   0013 8F BE              1492 	mov	_SLEEP,r7
                    0015   1493 	C$ydrip.c$191$1$1 ==.
                           1494 ;	apps/ydrip/ydrip.c:191: while ( ! (SLEEP & 0x20) );
   0015                    1495 00101$:
   0015 E5 BE              1496 	mov	a,_SLEEP
   0017 30 E5 FB           1497 	jnb	acc.5,00101$
                    001A   1498 	C$ydrip.c$192$1$1 ==.
                           1499 ;	apps/ydrip/ydrip.c:192: CLKCON = (CLKCON & ~0x07) | 0x40 | 0x01;
   001A AF C6              1500 	mov	r7,_CLKCON
   001C 74 F8              1501 	mov	a,#0xF8
   001E 5F                 1502 	anl	a,r7
   001F 44 41              1503 	orl	a,#0x41
   0021 FF                 1504 	mov	r7,a
   0022 8F C6              1505 	mov	_CLKCON,r7
                    0024   1506 	C$ydrip.c$193$1$1 ==.
                           1507 ;	apps/ydrip/ydrip.c:193: while ( !(CLKCON & 0x40) );
   0024                    1508 00104$:
   0024 E5 C6              1509 	mov	a,_CLKCON
   0026 30 E6 FB           1510 	jnb	acc.6,00104$
                    0029   1511 	C$ydrip.c$194$1$1 ==.
                           1512 ;	apps/ydrip/ydrip.c:194: SLEEP |= 0x04;
   0029 43 BE 04           1513 	orl	_SLEEP,#0x04
                    002C   1514 	C$ydrip.c$195$1$1 ==.
                    002C   1515 	XG$switchToRCOSC$0$0 ==.
   002C 22                 1516 	ret
                           1517 ;------------------------------------------------------------
                           1518 ;Allocation info for local variables in function 'uartEnable'
                           1519 ;------------------------------------------------------------
                    002D   1520 	G$uartEnable$0$0 ==.
                    002D   1521 	C$ydrip.c$197$1$1 ==.
                           1522 ;	apps/ydrip/ydrip.c:197: void uartEnable() {
                           1523 ;	-----------------------------------------
                           1524 ;	 function uartEnable
                           1525 ;	-----------------------------------------
   002D                    1526 _uartEnable:
                    002D   1527 	C$ydrip.c$199$1$1 ==.
                           1528 ;	apps/ydrip/ydrip.c:199: U1UCR &= ~0x40; //CTS/RTS Off
   002D AF FB              1529 	mov	r7,_U1UCR
   002F 53 07 BF           1530 	anl	ar7,#0xBF
   0032 8F FB              1531 	mov	_U1UCR,r7
                    0034   1532 	C$ydrip.c$200$1$1 ==.
                           1533 ;	apps/ydrip/ydrip.c:200: U1CSR |= 0x40;
   0034 43 F8 40           1534 	orl	_U1CSR,#0x40
                    0037   1535 	C$ydrip.c$201$1$1 ==.
                           1536 ;	apps/ydrip/ydrip.c:201: delayMs(100);
   0037 90 00 64           1537 	mov	dptr,#0x0064
   003A 12s00r00           1538 	lcall	_delayMs
                    003D   1539 	C$ydrip.c$202$1$1 ==.
                    003D   1540 	XG$uartEnable$0$0 ==.
   003D 22                 1541 	ret
                           1542 ;------------------------------------------------------------
                           1543 ;Allocation info for local variables in function 'uartDisable'
                           1544 ;------------------------------------------------------------
                    003E   1545 	G$uartDisable$0$0 ==.
                    003E   1546 	C$ydrip.c$204$1$1 ==.
                           1547 ;	apps/ydrip/ydrip.c:204: void uartDisable() {
                           1548 ;	-----------------------------------------
                           1549 ;	 function uartDisable
                           1550 ;	-----------------------------------------
   003E                    1551 _uartDisable:
                    003E   1552 	C$ydrip.c$205$1$1 ==.
                           1553 ;	apps/ydrip/ydrip.c:205: delayMs(100);
   003E 90 00 64           1554 	mov	dptr,#0x0064
   0041 12s00r00           1555 	lcall	_delayMs
                    0044   1556 	C$ydrip.c$206$1$1 ==.
                           1557 ;	apps/ydrip/ydrip.c:206: U1UCR &= ~0x40; //CTS/RTS Off
   0044 AF FB              1558 	mov	r7,_U1UCR
   0046 53 07 BF           1559 	anl	ar7,#0xBF
   0049 8F FB              1560 	mov	_U1UCR,r7
                    004B   1561 	C$ydrip.c$207$1$1 ==.
                           1562 ;	apps/ydrip/ydrip.c:207: U1CSR &= ~0x40; // Receiver disable
   004B AF F8              1563 	mov	r7,_U1CSR
   004D 53 07 BF           1564 	anl	ar7,#0xBF
   0050 8F F8              1565 	mov	_U1CSR,r7
                    0052   1566 	C$ydrip.c$208$1$1 ==.
                    0052   1567 	XG$uartDisable$0$0 ==.
   0052 22                 1568 	ret
                           1569 ;------------------------------------------------------------
                           1570 ;Allocation info for local variables in function 'blink_yellow_led'
                           1571 ;------------------------------------------------------------
                    0053   1572 	G$blink_yellow_led$0$0 ==.
                    0053   1573 	C$ydrip.c$210$1$1 ==.
                           1574 ;	apps/ydrip/ydrip.c:210: void blink_yellow_led() {
                           1575 ;	-----------------------------------------
                           1576 ;	 function blink_yellow_led
                           1577 ;	-----------------------------------------
   0053                    1578 _blink_yellow_led:
                    0053   1579 	C$ydrip.c$211$1$1 ==.
                           1580 ;	apps/ydrip/ydrip.c:211: if(status_lights) {
   0053 30*01 37           1581 	jnb	_status_lights,00103$
                    0056   1582 	C$ydrip.c$212$3$3 ==.
                           1583 ;	apps/ydrip/ydrip.c:212: LED_YELLOW(((getMs()/250) % 2));//Blink quarter seconds
   0056 12s00r00           1584 	lcall	_getMs
   0059 AC 82              1585 	mov	r4,dpl
   005B AD 83              1586 	mov	r5,dph
   005D AE F0              1587 	mov	r6,b
   005F FF                 1588 	mov	r7,a
   0060 78r00              1589 	mov	r0,#__divulong_PARM_2
   0062 74 FA              1590 	mov	a,#0xFA
   0064 F2                 1591 	movx	@r0,a
   0065 08                 1592 	inc	r0
   0066 E4                 1593 	clr	a
   0067 F2                 1594 	movx	@r0,a
   0068 08                 1595 	inc	r0
   0069 F2                 1596 	movx	@r0,a
   006A 08                 1597 	inc	r0
   006B F2                 1598 	movx	@r0,a
   006C 8C 82              1599 	mov	dpl,r4
   006E 8D 83              1600 	mov	dph,r5
   0070 8E F0              1601 	mov	b,r6
   0072 EF                 1602 	mov	a,r7
   0073 12s00r00           1603 	lcall	__divulong
   0076 AC 82              1604 	mov	r4,dpl
   0078 AD 83              1605 	mov	r5,dph
   007A AE F0              1606 	mov	r6,b
   007C FF                 1607 	mov	r7,a
   007D EC                 1608 	mov	a,r4
   007E 30 E0 05           1609 	jnb	acc.0,00105$
   0081 43 FF 04           1610 	orl	_P2DIR,#0x04
   0084 80 07              1611 	sjmp	00103$
   0086                    1612 00105$:
   0086 AF FF              1613 	mov	r7,_P2DIR
   0088 53 07 FB           1614 	anl	ar7,#0xFB
   008B 8F FF              1615 	mov	_P2DIR,r7
   008D                    1616 00103$:
                    008D   1617 	C$ydrip.c$214$3$1 ==.
                    008D   1618 	XG$blink_yellow_led$0$0 ==.
   008D 22                 1619 	ret
                           1620 ;------------------------------------------------------------
                           1621 ;Allocation info for local variables in function 'blink_red_led'
                           1622 ;------------------------------------------------------------
                    008E   1623 	G$blink_red_led$0$0 ==.
                    008E   1624 	C$ydrip.c$216$3$1 ==.
                           1625 ;	apps/ydrip/ydrip.c:216: void blink_red_led() {
                           1626 ;	-----------------------------------------
                           1627 ;	 function blink_red_led
                           1628 ;	-----------------------------------------
   008E                    1629 _blink_red_led:
                    008E   1630 	C$ydrip.c$217$1$1 ==.
                           1631 ;	apps/ydrip/ydrip.c:217: if(status_lights) {
   008E 30*01 39           1632 	jnb	_status_lights,00103$
                    0091   1633 	C$ydrip.c$218$3$3 ==.
                           1634 ;	apps/ydrip/ydrip.c:218: LED_RED(((getMs()/500) % 2));//Blink half seconds
   0091 12s00r00           1635 	lcall	_getMs
   0094 AC 82              1636 	mov	r4,dpl
   0096 AD 83              1637 	mov	r5,dph
   0098 AE F0              1638 	mov	r6,b
   009A FF                 1639 	mov	r7,a
   009B 78r00              1640 	mov	r0,#__divulong_PARM_2
   009D 74 F4              1641 	mov	a,#0xF4
   009F F2                 1642 	movx	@r0,a
   00A0 08                 1643 	inc	r0
   00A1 74 01              1644 	mov	a,#0x01
   00A3 F2                 1645 	movx	@r0,a
   00A4 08                 1646 	inc	r0
   00A5 E4                 1647 	clr	a
   00A6 F2                 1648 	movx	@r0,a
   00A7 08                 1649 	inc	r0
   00A8 F2                 1650 	movx	@r0,a
   00A9 8C 82              1651 	mov	dpl,r4
   00AB 8D 83              1652 	mov	dph,r5
   00AD 8E F0              1653 	mov	b,r6
   00AF EF                 1654 	mov	a,r7
   00B0 12s00r00           1655 	lcall	__divulong
   00B3 AC 82              1656 	mov	r4,dpl
   00B5 AD 83              1657 	mov	r5,dph
   00B7 AE F0              1658 	mov	r6,b
   00B9 FF                 1659 	mov	r7,a
   00BA EC                 1660 	mov	a,r4
   00BB 30 E0 05           1661 	jnb	acc.0,00105$
   00BE 43 FF 02           1662 	orl	_P2DIR,#0x02
   00C1 80 07              1663 	sjmp	00103$
   00C3                    1664 00105$:
   00C3 AF FF              1665 	mov	r7,_P2DIR
   00C5 53 07 FD           1666 	anl	ar7,#0xFD
   00C8 8F FF              1667 	mov	_P2DIR,r7
   00CA                    1668 00103$:
                    00CA   1669 	C$ydrip.c$220$3$1 ==.
                    00CA   1670 	XG$blink_red_led$0$0 ==.
   00CA 22                 1671 	ret
                           1672 ;------------------------------------------------------------
                           1673 ;Allocation info for local variables in function 'getPacketPassedChecksum'
                           1674 ;------------------------------------------------------------
                    00CB   1675 	G$getPacketPassedChecksum$0$0 ==.
                    00CB   1676 	C$ydrip.c$228$3$1 ==.
                           1677 ;	apps/ydrip/ydrip.c:228: uint8 getPacketPassedChecksum(Dexcom_packet* p) {
                           1678 ;	-----------------------------------------
                           1679 ;	 function getPacketPassedChecksum
                           1680 ;	-----------------------------------------
   00CB                    1681 _getPacketPassedChecksum:
   00CB AE 82              1682 	mov	r6,dpl
   00CD AF 83              1683 	mov	r7,dph
                    00CF   1684 	C$ydrip.c$229$1$1 ==.
                           1685 ;	apps/ydrip/ydrip.c:229: return ((p->LQI & 0x80)==0x80) ? 1:0;
   00CF 74 14              1686 	mov	a,#0x14
   00D1 2E                 1687 	add	a,r6
   00D2 F5 82              1688 	mov	dpl,a
   00D4 E4                 1689 	clr	a
   00D5 3F                 1690 	addc	a,r7
   00D6 F5 83              1691 	mov	dph,a
   00D8 E0                 1692 	movx	a,@dptr
   00D9 FF                 1693 	mov	r7,a
   00DA 53 07 80           1694 	anl	ar7,#0x80
   00DD BF 80 04           1695 	cjne	r7,#0x80,00103$
   00E0 7F 01              1696 	mov	r7,#0x01
   00E2 80 02              1697 	sjmp	00104$
   00E4                    1698 00103$:
   00E4 7F 00              1699 	mov	r7,#0x00
   00E6                    1700 00104$:
   00E6 8F 82              1701 	mov	dpl,r7
                    00E8   1702 	C$ydrip.c$230$1$1 ==.
                    00E8   1703 	XG$getPacketPassedChecksum$0$0 ==.
   00E8 22                 1704 	ret
                           1705 ;------------------------------------------------------------
                           1706 ;Allocation info for local variables in function 'bit_reverse_byte'
                           1707 ;------------------------------------------------------------
                           1708 ;bRet                      Allocated with name '_bit_reverse_byte_bRet_1_1'
                           1709 ;------------------------------------------------------------
                    00E9   1710 	G$bit_reverse_byte$0$0 ==.
                    00E9   1711 	C$ydrip.c$232$1$1 ==.
                           1712 ;	apps/ydrip/ydrip.c:232: uint8 bit_reverse_byte(uint8 in) {
                           1713 ;	-----------------------------------------
                           1714 ;	 function bit_reverse_byte
                           1715 ;	-----------------------------------------
   00E9                    1716 _bit_reverse_byte:
   00E9 AF 82              1717 	mov	r7,dpl
                    00EB   1718 	C$ydrip.c$233$1$1 ==.
                           1719 ;	apps/ydrip/ydrip.c:233: uint8 XDATA bRet = 0;
   00EB 90s00r00           1720 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   00EE E4                 1721 	clr	a
   00EF F0                 1722 	movx	@dptr,a
                    00F0   1723 	C$ydrip.c$234$1$1 ==.
                           1724 ;	apps/ydrip/ydrip.c:234: if(in & 0x01)
   00F0 EF                 1725 	mov	a,r7
   00F1 30 E0 06           1726 	jnb	acc.0,00102$
                    00F4   1727 	C$ydrip.c$235$1$1 ==.
                           1728 ;	apps/ydrip/ydrip.c:235: bRet |= 0x80;
   00F4 90s00r00           1729 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   00F7 74 80              1730 	mov	a,#0x80
   00F9 F0                 1731 	movx	@dptr,a
   00FA                    1732 00102$:
                    00FA   1733 	C$ydrip.c$236$1$1 ==.
                           1734 ;	apps/ydrip/ydrip.c:236: if(in & 0x02)
   00FA EF                 1735 	mov	a,r7
   00FB 30 E1 08           1736 	jnb	acc.1,00104$
                    00FE   1737 	C$ydrip.c$237$1$1 ==.
                           1738 ;	apps/ydrip/ydrip.c:237: bRet |= 0x40;
   00FE 90s00r00           1739 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0101 E0                 1740 	movx	a,@dptr
   0102 FE                 1741 	mov	r6,a
   0103 44 40              1742 	orl	a,#0x40
   0105 F0                 1743 	movx	@dptr,a
   0106                    1744 00104$:
                    0106   1745 	C$ydrip.c$238$1$1 ==.
                           1746 ;	apps/ydrip/ydrip.c:238: if(in & 0x04)
   0106 EF                 1747 	mov	a,r7
   0107 30 E2 08           1748 	jnb	acc.2,00106$
                    010A   1749 	C$ydrip.c$239$1$1 ==.
                           1750 ;	apps/ydrip/ydrip.c:239: bRet |= 0x20;
   010A 90s00r00           1751 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   010D E0                 1752 	movx	a,@dptr
   010E FE                 1753 	mov	r6,a
   010F 44 20              1754 	orl	a,#0x20
   0111 F0                 1755 	movx	@dptr,a
   0112                    1756 00106$:
                    0112   1757 	C$ydrip.c$240$1$1 ==.
                           1758 ;	apps/ydrip/ydrip.c:240: if(in & 0x08)
   0112 EF                 1759 	mov	a,r7
   0113 30 E3 08           1760 	jnb	acc.3,00108$
                    0116   1761 	C$ydrip.c$241$1$1 ==.
                           1762 ;	apps/ydrip/ydrip.c:241: bRet |= 0x10;
   0116 90s00r00           1763 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0119 E0                 1764 	movx	a,@dptr
   011A FE                 1765 	mov	r6,a
   011B 44 10              1766 	orl	a,#0x10
   011D F0                 1767 	movx	@dptr,a
   011E                    1768 00108$:
                    011E   1769 	C$ydrip.c$242$1$1 ==.
                           1770 ;	apps/ydrip/ydrip.c:242: if(in & 0x10)
   011E EF                 1771 	mov	a,r7
   011F 30 E4 08           1772 	jnb	acc.4,00110$
                    0122   1773 	C$ydrip.c$243$1$1 ==.
                           1774 ;	apps/ydrip/ydrip.c:243: bRet |= 0x08;
   0122 90s00r00           1775 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0125 E0                 1776 	movx	a,@dptr
   0126 FE                 1777 	mov	r6,a
   0127 44 08              1778 	orl	a,#0x08
   0129 F0                 1779 	movx	@dptr,a
   012A                    1780 00110$:
                    012A   1781 	C$ydrip.c$244$1$1 ==.
                           1782 ;	apps/ydrip/ydrip.c:244: if(in & 0x20)
   012A EF                 1783 	mov	a,r7
   012B 30 E5 08           1784 	jnb	acc.5,00112$
                    012E   1785 	C$ydrip.c$245$1$1 ==.
                           1786 ;	apps/ydrip/ydrip.c:245: bRet |= 0x04;
   012E 90s00r00           1787 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0131 E0                 1788 	movx	a,@dptr
   0132 FE                 1789 	mov	r6,a
   0133 44 04              1790 	orl	a,#0x04
   0135 F0                 1791 	movx	@dptr,a
   0136                    1792 00112$:
                    0136   1793 	C$ydrip.c$246$1$1 ==.
                           1794 ;	apps/ydrip/ydrip.c:246: if(in & 0x40)
   0136 EF                 1795 	mov	a,r7
   0137 30 E6 08           1796 	jnb	acc.6,00114$
                    013A   1797 	C$ydrip.c$247$1$1 ==.
                           1798 ;	apps/ydrip/ydrip.c:247: bRet |= 0x02;
   013A 90s00r00           1799 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   013D E0                 1800 	movx	a,@dptr
   013E FE                 1801 	mov	r6,a
   013F 44 02              1802 	orl	a,#0x02
   0141 F0                 1803 	movx	@dptr,a
   0142                    1804 00114$:
                    0142   1805 	C$ydrip.c$248$1$1 ==.
                           1806 ;	apps/ydrip/ydrip.c:248: if(in & 0x80)
   0142 EF                 1807 	mov	a,r7
   0143 30 E7 08           1808 	jnb	acc.7,00116$
                    0146   1809 	C$ydrip.c$249$1$1 ==.
                           1810 ;	apps/ydrip/ydrip.c:249: bRet |= 0x01;
   0146 90s00r00           1811 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0149 E0                 1812 	movx	a,@dptr
   014A FF                 1813 	mov	r7,a
   014B 44 01              1814 	orl	a,#0x01
   014D F0                 1815 	movx	@dptr,a
   014E                    1816 00116$:
                    014E   1817 	C$ydrip.c$250$1$1 ==.
                           1818 ;	apps/ydrip/ydrip.c:250: return bRet;
   014E 90s00r00           1819 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0151 E0                 1820 	movx	a,@dptr
                    0152   1821 	C$ydrip.c$251$1$1 ==.
                    0152   1822 	XG$bit_reverse_byte$0$0 ==.
   0152 F5 82              1823 	mov	dpl,a
   0154 22                 1824 	ret
                           1825 ;------------------------------------------------------------
                           1826 ;Allocation info for local variables in function 'min8'
                           1827 ;------------------------------------------------------------
                    0155   1828 	G$min8$0$0 ==.
                    0155   1829 	C$ydrip.c$253$1$1 ==.
                           1830 ;	apps/ydrip/ydrip.c:253: uint8 min8(uint8 a, uint8 b) {
                           1831 ;	-----------------------------------------
                           1832 ;	 function min8
                           1833 ;	-----------------------------------------
   0155                    1834 _min8:
   0155 AF 82              1835 	mov	r7,dpl
                    0157   1836 	C$ydrip.c$254$1$1 ==.
                           1837 ;	apps/ydrip/ydrip.c:254: if(a < b) return a;
   0157 78r40              1838 	mov	r0,#_min8_PARM_2
   0159 C3                 1839 	clr	c
   015A E2                 1840 	movx	a,@r0
   015B F5 F0              1841 	mov	b,a
   015D EF                 1842 	mov	a,r7
   015E 95 F0              1843 	subb	a,b
   0160 50 04              1844 	jnc	00102$
   0162 8F 82              1845 	mov	dpl,r7
   0164 80 05              1846 	sjmp	00103$
   0166                    1847 00102$:
                    0166   1848 	C$ydrip.c$255$1$1 ==.
                           1849 ;	apps/ydrip/ydrip.c:255: return b;
   0166 78r40              1850 	mov	r0,#_min8_PARM_2
   0168 E2                 1851 	movx	a,@r0
   0169 F5 82              1852 	mov	dpl,a
   016B                    1853 00103$:
                    016B   1854 	C$ydrip.c$256$1$1 ==.
                    016B   1855 	XG$min8$0$0 ==.
   016B 22                 1856 	ret
                           1857 ;------------------------------------------------------------
                           1858 ;Allocation info for local variables in function 'bit_reverse_bytes'
                           1859 ;------------------------------------------------------------
                           1860 ;i                         Allocated with name '_bit_reverse_bytes_i_1_1'
                           1861 ;------------------------------------------------------------
                    016C   1862 	G$bit_reverse_bytes$0$0 ==.
                    016C   1863 	C$ydrip.c$258$1$1 ==.
                           1864 ;	apps/ydrip/ydrip.c:258: void bit_reverse_bytes(uint8* buf, uint8 nLen) {
                           1865 ;	-----------------------------------------
                           1866 ;	 function bit_reverse_bytes
                           1867 ;	-----------------------------------------
   016C                    1868 _bit_reverse_bytes:
   016C AF F0              1869 	mov	r7,b
   016E AE 83              1870 	mov	r6,dph
   0170 E5 82              1871 	mov	a,dpl
   0172 78r42              1872 	mov	r0,#_bit_reverse_bytes_buf_1_1
   0174 F2                 1873 	movx	@r0,a
   0175 08                 1874 	inc	r0
   0176 EE                 1875 	mov	a,r6
   0177 F2                 1876 	movx	@r0,a
   0178 08                 1877 	inc	r0
   0179 EF                 1878 	mov	a,r7
   017A F2                 1879 	movx	@r0,a
                    017B   1880 	C$ydrip.c$259$1$1 ==.
                           1881 ;	apps/ydrip/ydrip.c:259: uint8 XDATA i = 0;
   017B 7C 00              1882 	mov	r4,#0x00
   017D                    1883 00101$:
                    017D   1884 	C$ydrip.c$260$1$1 ==.
                           1885 ;	apps/ydrip/ydrip.c:260: for(; i < nLen; i++) {
   017D 78r41              1886 	mov	r0,#_bit_reverse_bytes_PARM_2
   017F C3                 1887 	clr	c
   0180 E2                 1888 	movx	a,@r0
   0181 F5 F0              1889 	mov	b,a
   0183 EC                 1890 	mov	a,r4
   0184 95 F0              1891 	subb	a,b
   0186 50 3A              1892 	jnc	00105$
                    0188   1893 	C$ydrip.c$261$2$2 ==.
                           1894 ;	apps/ydrip/ydrip.c:261: buf[i] = bit_reverse_byte(buf[i]);
   0188 78r42              1895 	mov	r0,#_bit_reverse_bytes_buf_1_1
   018A E2                 1896 	movx	a,@r0
   018B 2C                 1897 	add	a,r4
   018C FA                 1898 	mov	r2,a
   018D 08                 1899 	inc	r0
   018E E2                 1900 	movx	a,@r0
   018F 34 00              1901 	addc	a,#0x00
   0191 FB                 1902 	mov	r3,a
   0192 08                 1903 	inc	r0
   0193 E2                 1904 	movx	a,@r0
   0194 FF                 1905 	mov	r7,a
   0195 8A 82              1906 	mov	dpl,r2
   0197 8B 83              1907 	mov	dph,r3
   0199 8F F0              1908 	mov	b,r7
   019B 12s00r00           1909 	lcall	__gptrget
   019E F5 82              1910 	mov	dpl,a
   01A0 C0 07              1911 	push	ar7
   01A2 C0 04              1912 	push	ar4
   01A4 C0 03              1913 	push	ar3
   01A6 C0 02              1914 	push	ar2
   01A8 12s00rE9           1915 	lcall	_bit_reverse_byte
   01AB AE 82              1916 	mov	r6,dpl
   01AD D0 02              1917 	pop	ar2
   01AF D0 03              1918 	pop	ar3
   01B1 D0 04              1919 	pop	ar4
   01B3 D0 07              1920 	pop	ar7
   01B5 8A 82              1921 	mov	dpl,r2
   01B7 8B 83              1922 	mov	dph,r3
   01B9 8F F0              1923 	mov	b,r7
   01BB EE                 1924 	mov	a,r6
   01BC 12s00r00           1925 	lcall	__gptrput
                    01BF   1926 	C$ydrip.c$260$1$1 ==.
                           1927 ;	apps/ydrip/ydrip.c:260: for(; i < nLen; i++) {
   01BF 0C                 1928 	inc	r4
   01C0 80 BB              1929 	sjmp	00101$
   01C2                    1930 00105$:
                    01C2   1931 	C$ydrip.c$263$1$1 ==.
                    01C2   1932 	XG$bit_reverse_bytes$0$0 ==.
   01C2 22                 1933 	ret
                           1934 ;------------------------------------------------------------
                           1935 ;Allocation info for local variables in function 'dex_num_decoder'
                           1936 ;------------------------------------------------------------
                           1937 ;usReversed                Allocated with name '_dex_num_decoder_usReversed_1_1'
                           1938 ;usExponent                Allocated with name '_dex_num_decoder_usExponent_1_1'
                           1939 ;usMantissa                Allocated with name '_dex_num_decoder_usMantissa_1_1'
                           1940 ;------------------------------------------------------------
                    01C3   1941 	G$dex_num_decoder$0$0 ==.
                    01C3   1942 	C$ydrip.c$265$1$1 ==.
                           1943 ;	apps/ydrip/ydrip.c:265: uint32 dex_num_decoder(uint16 usShortFloat) {
                           1944 ;	-----------------------------------------
                           1945 ;	 function dex_num_decoder
                           1946 ;	-----------------------------------------
   01C3                    1947 _dex_num_decoder:
   01C3 AE 82              1948 	mov	r6,dpl
   01C5 AF 83              1949 	mov	r7,dph
                    01C7   1950 	C$ydrip.c$266$1$1 ==.
                           1951 ;	apps/ydrip/ydrip.c:266: uint16 XDATA usReversed = usShortFloat;
   01C7 90s00r01           1952 	mov	dptr,#_dex_num_decoder_usReversed_1_1
   01CA EE                 1953 	mov	a,r6
   01CB F0                 1954 	movx	@dptr,a
   01CC A3                 1955 	inc	dptr
   01CD EF                 1956 	mov	a,r7
   01CE F0                 1957 	movx	@dptr,a
                    01CF   1958 	C$ydrip.c$269$1$1 ==.
                           1959 ;	apps/ydrip/ydrip.c:269: bit_reverse_bytes((uint8*)&usReversed, 2);
   01CF 7Er01              1960 	mov	r6,#_dex_num_decoder_usReversed_1_1
   01D1 7Fs00              1961 	mov	r7,#(_dex_num_decoder_usReversed_1_1 >> 8)
   01D3 7D 00              1962 	mov	r5,#0x00
   01D5 78r41              1963 	mov	r0,#_bit_reverse_bytes_PARM_2
   01D7 74 02              1964 	mov	a,#0x02
   01D9 F2                 1965 	movx	@r0,a
   01DA 8E 82              1966 	mov	dpl,r6
   01DC 8F 83              1967 	mov	dph,r7
   01DE 8D F0              1968 	mov	b,r5
   01E0 12s01r6C           1969 	lcall	_bit_reverse_bytes
                    01E3   1970 	C$ydrip.c$270$1$1 ==.
                           1971 ;	apps/ydrip/ydrip.c:270: usExponent = ((usReversed & 0xE000) >> 13);
   01E3 90s00r01           1972 	mov	dptr,#_dex_num_decoder_usReversed_1_1
   01E6 E0                 1973 	movx	a,@dptr
   01E7 FE                 1974 	mov	r6,a
   01E8 A3                 1975 	inc	dptr
   01E9 E0                 1976 	movx	a,@dptr
   01EA FF                 1977 	mov	r7,a
   01EB 74 E0              1978 	mov	a,#0xE0
   01ED 5F                 1979 	anl	a,r7
   01EE C4                 1980 	swap	a
   01EF 03                 1981 	rr	a
   01F0 54 07              1982 	anl	a,#0x07
   01F2 FC                 1983 	mov	r4,a
                    01F3   1984 	C$ydrip.c$271$1$1 ==.
                           1985 ;	apps/ydrip/ydrip.c:271: usMantissa = (usReversed & 0x1FFF);
   01F3 53 07 1F           1986 	anl	ar7,#0x1F
   01F6 7D 00              1987 	mov	r5,#0x00
   01F8 7B 00              1988 	mov	r3,#0x00
                    01FA   1989 	C$ydrip.c$272$1$1 ==.
                           1990 ;	apps/ydrip/ydrip.c:272: return usMantissa << usExponent;
   01FA 8C F0              1991 	mov	b,r4
   01FC 05 F0              1992 	inc	b
   01FE 80 0C              1993 	sjmp	00104$
   0200                    1994 00103$:
   0200 EE                 1995 	mov	a,r6
   0201 2E                 1996 	add	a,r6
   0202 FE                 1997 	mov	r6,a
   0203 EF                 1998 	mov	a,r7
   0204 33                 1999 	rlc	a
   0205 FF                 2000 	mov	r7,a
   0206 ED                 2001 	mov	a,r5
   0207 33                 2002 	rlc	a
   0208 FD                 2003 	mov	r5,a
   0209 EB                 2004 	mov	a,r3
   020A 33                 2005 	rlc	a
   020B FB                 2006 	mov	r3,a
   020C                    2007 00104$:
   020C D5 F0 F1           2008 	djnz	b,00103$
   020F 8E 82              2009 	mov	dpl,r6
   0211 8F 83              2010 	mov	dph,r7
   0213 8D F0              2011 	mov	b,r5
   0215 EB                 2012 	mov	a,r3
                    0216   2013 	C$ydrip.c$273$1$1 ==.
                    0216   2014 	XG$dex_num_decoder$0$0 ==.
   0216 22                 2015 	ret
                           2016 ;------------------------------------------------------------
                           2017 ;Allocation info for local variables in function 'dexcom_src_to_ascii'
                           2018 ;------------------------------------------------------------
                           2019 ;addr                      Allocated with name '_dexcom_src_to_ascii_PARM_2'
                           2020 ;src                       Allocated with name '_dexcom_src_to_ascii_src_1_1'
                           2021 ;sloc0                     Allocated with name '_dexcom_src_to_ascii_sloc0_1_0'
                           2022 ;------------------------------------------------------------
                    0217   2023 	G$dexcom_src_to_ascii$0$0 ==.
                    0217   2024 	C$ydrip.c$280$1$1 ==.
                           2025 ;	apps/ydrip/ydrip.c:280: void dexcom_src_to_ascii(XDATA uint32 src, XDATA char addr[6]) {
                           2026 ;	-----------------------------------------
                           2027 ;	 function dexcom_src_to_ascii
                           2028 ;	-----------------------------------------
   0217                    2029 _dexcom_src_to_ascii:
   0217 AF 82              2030 	mov	r7,dpl
   0219 AE 83              2031 	mov	r6,dph
   021B AD F0              2032 	mov	r5,b
   021D FC                 2033 	mov	r4,a
   021E 90s00r05           2034 	mov	dptr,#_dexcom_src_to_ascii_src_1_1
   0221 EF                 2035 	mov	a,r7
   0222 F0                 2036 	movx	@dptr,a
   0223 A3                 2037 	inc	dptr
   0224 EE                 2038 	mov	a,r6
   0225 F0                 2039 	movx	@dptr,a
   0226 A3                 2040 	inc	dptr
   0227 ED                 2041 	mov	a,r5
   0228 F0                 2042 	movx	@dptr,a
   0229 A3                 2043 	inc	dptr
   022A EC                 2044 	mov	a,r4
   022B F0                 2045 	movx	@dptr,a
                    022C   2046 	C$ydrip.c$281$1$1 ==.
                           2047 ;	apps/ydrip/ydrip.c:281: addr[0] = SrcNameTable[(src >> 20) & 0x1F];
   022C 90s00r03           2048 	mov	dptr,#_dexcom_src_to_ascii_PARM_2
   022F E0                 2049 	movx	a,@dptr
   0230 FE                 2050 	mov	r6,a
   0231 A3                 2051 	inc	dptr
   0232 E0                 2052 	movx	a,@dptr
   0233 FF                 2053 	mov	r7,a
   0234 90s00r05           2054 	mov	dptr,#_dexcom_src_to_ascii_src_1_1
   0237 E0                 2055 	movx	a,@dptr
   0238 F5*00              2056 	mov	_dexcom_src_to_ascii_sloc0_1_0,a
   023A A3                 2057 	inc	dptr
   023B E0                 2058 	movx	a,@dptr
   023C F5*01              2059 	mov	(_dexcom_src_to_ascii_sloc0_1_0 + 1),a
   023E A3                 2060 	inc	dptr
   023F E0                 2061 	movx	a,@dptr
   0240 F5*02              2062 	mov	(_dexcom_src_to_ascii_sloc0_1_0 + 2),a
   0242 A3                 2063 	inc	dptr
   0243 E0                 2064 	movx	a,@dptr
   0244 F5*03              2065 	mov	(_dexcom_src_to_ascii_sloc0_1_0 + 3),a
   0246 A8*02              2066 	mov	r0,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   0248 C4                 2067 	swap	a
   0249 C8                 2068 	xch	a,r0
   024A C4                 2069 	swap	a
   024B 54 0F              2070 	anl	a,#0x0F
   024D 68                 2071 	xrl	a,r0
   024E C8                 2072 	xch	a,r0
   024F 54 0F              2073 	anl	a,#0x0F
   0251 C8                 2074 	xch	a,r0
   0252 68                 2075 	xrl	a,r0
   0253 C8                 2076 	xch	a,r0
   0254 53 00 1F           2077 	anl	ar0,#0x1F
   0257 E4                 2078 	clr	a
   0258 F9                 2079 	mov	r1,a
   0259 E8                 2080 	mov	a,r0
   025A 24r56              2081 	add	a,#_SrcNameTable
   025C F5 82              2082 	mov	dpl,a
   025E E9                 2083 	mov	a,r1
   025F 34s00              2084 	addc	a,#(_SrcNameTable >> 8)
   0261 F5 83              2085 	mov	dph,a
   0263 E0                 2086 	movx	a,@dptr
   0264 8E 82              2087 	mov	dpl,r6
   0266 8F 83              2088 	mov	dph,r7
   0268 F0                 2089 	movx	@dptr,a
                    0269   2090 	C$ydrip.c$282$1$1 ==.
                           2091 ;	apps/ydrip/ydrip.c:282: addr[1] = SrcNameTable[(src >> 15) & 0x1F];
   0269 74 01              2092 	mov	a,#0x01
   026B 2E                 2093 	add	a,r6
   026C FC                 2094 	mov	r4,a
   026D E4                 2095 	clr	a
   026E 3F                 2096 	addc	a,r7
   026F FD                 2097 	mov	r5,a
   0270 A8*01              2098 	mov	r0,(_dexcom_src_to_ascii_sloc0_1_0 + 1)
   0272 E5*02              2099 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   0274 A2 E7              2100 	mov	c,acc.7
   0276 C8                 2101 	xch	a,r0
   0277 33                 2102 	rlc	a
   0278 C8                 2103 	xch	a,r0
   0279 33                 2104 	rlc	a
   027A C8                 2105 	xch	a,r0
   027B 54 01              2106 	anl	a,#0x01
   027D F9                 2107 	mov	r1,a
   027E E5*03              2108 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   0280 25*03              2109 	add	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   0282 49                 2110 	orl	a,r1
   0283 E5*03              2111 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   0285 23                 2112 	rl	a
   0286 54 01              2113 	anl	a,#0x01
   0288 53 00 1F           2114 	anl	ar0,#0x1F
   028B E4                 2115 	clr	a
   028C F9                 2116 	mov	r1,a
   028D E8                 2117 	mov	a,r0
   028E 24r56              2118 	add	a,#_SrcNameTable
   0290 F5 82              2119 	mov	dpl,a
   0292 E9                 2120 	mov	a,r1
   0293 34s00              2121 	addc	a,#(_SrcNameTable >> 8)
   0295 F5 83              2122 	mov	dph,a
   0297 E0                 2123 	movx	a,@dptr
   0298 8C 82              2124 	mov	dpl,r4
   029A 8D 83              2125 	mov	dph,r5
   029C F0                 2126 	movx	@dptr,a
                    029D   2127 	C$ydrip.c$283$1$1 ==.
                           2128 ;	apps/ydrip/ydrip.c:283: addr[2] = SrcNameTable[(src >> 10) & 0x1F];
   029D 74 02              2129 	mov	a,#0x02
   029F 2E                 2130 	add	a,r6
   02A0 FC                 2131 	mov	r4,a
   02A1 E4                 2132 	clr	a
   02A2 3F                 2133 	addc	a,r7
   02A3 FD                 2134 	mov	r5,a
   02A4 A8*01              2135 	mov	r0,(_dexcom_src_to_ascii_sloc0_1_0 + 1)
   02A6 E5*02              2136 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   02A8 C3                 2137 	clr	c
   02A9 13                 2138 	rrc	a
   02AA C8                 2139 	xch	a,r0
   02AB 13                 2140 	rrc	a
   02AC C8                 2141 	xch	a,r0
   02AD C3                 2142 	clr	c
   02AE 13                 2143 	rrc	a
   02AF C8                 2144 	xch	a,r0
   02B0 13                 2145 	rrc	a
   02B1 C8                 2146 	xch	a,r0
   02B2 F9                 2147 	mov	r1,a
   02B3 E5*03              2148 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   02B5 03                 2149 	rr	a
   02B6 03                 2150 	rr	a
   02B7 54 C0              2151 	anl	a,#0xC0
   02B9 49                 2152 	orl	a,r1
   02BA E5*03              2153 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   02BC 03                 2154 	rr	a
   02BD 03                 2155 	rr	a
   02BE 54 3F              2156 	anl	a,#0x3F
   02C0 53 00 1F           2157 	anl	ar0,#0x1F
   02C3 E4                 2158 	clr	a
   02C4 F9                 2159 	mov	r1,a
   02C5 E8                 2160 	mov	a,r0
   02C6 24r56              2161 	add	a,#_SrcNameTable
   02C8 F5 82              2162 	mov	dpl,a
   02CA E9                 2163 	mov	a,r1
   02CB 34s00              2164 	addc	a,#(_SrcNameTable >> 8)
   02CD F5 83              2165 	mov	dph,a
   02CF E0                 2166 	movx	a,@dptr
   02D0 8C 82              2167 	mov	dpl,r4
   02D2 8D 83              2168 	mov	dph,r5
   02D4 F0                 2169 	movx	@dptr,a
                    02D5   2170 	C$ydrip.c$284$1$1 ==.
                           2171 ;	apps/ydrip/ydrip.c:284: addr[3] = SrcNameTable[(src >> 5) & 0x1F];
   02D5 74 03              2172 	mov	a,#0x03
   02D7 2E                 2173 	add	a,r6
   02D8 FC                 2174 	mov	r4,a
   02D9 E4                 2175 	clr	a
   02DA 3F                 2176 	addc	a,r7
   02DB FD                 2177 	mov	r5,a
   02DC A8*00              2178 	mov	r0,_dexcom_src_to_ascii_sloc0_1_0
   02DE E5*01              2179 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 1)
   02E0 C4                 2180 	swap	a
   02E1 03                 2181 	rr	a
   02E2 C8                 2182 	xch	a,r0
   02E3 C4                 2183 	swap	a
   02E4 03                 2184 	rr	a
   02E5 54 07              2185 	anl	a,#0x07
   02E7 68                 2186 	xrl	a,r0
   02E8 C8                 2187 	xch	a,r0
   02E9 54 07              2188 	anl	a,#0x07
   02EB C8                 2189 	xch	a,r0
   02EC 68                 2190 	xrl	a,r0
   02ED C8                 2191 	xch	a,r0
   02EE F9                 2192 	mov	r1,a
   02EF E5*02              2193 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   02F1 C4                 2194 	swap	a
   02F2 03                 2195 	rr	a
   02F3 54 F8              2196 	anl	a,#0xF8
   02F5 49                 2197 	orl	a,r1
   02F6 AA*02              2198 	mov	r2,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   02F8 E5*03              2199 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   02FA C4                 2200 	swap	a
   02FB 03                 2201 	rr	a
   02FC CA                 2202 	xch	a,r2
   02FD C4                 2203 	swap	a
   02FE 03                 2204 	rr	a
   02FF 54 07              2205 	anl	a,#0x07
   0301 6A                 2206 	xrl	a,r2
   0302 CA                 2207 	xch	a,r2
   0303 54 07              2208 	anl	a,#0x07
   0305 CA                 2209 	xch	a,r2
   0306 6A                 2210 	xrl	a,r2
   0307 CA                 2211 	xch	a,r2
   0308 53 00 1F           2212 	anl	ar0,#0x1F
   030B E4                 2213 	clr	a
   030C F9                 2214 	mov	r1,a
   030D E8                 2215 	mov	a,r0
   030E 24r56              2216 	add	a,#_SrcNameTable
   0310 F5 82              2217 	mov	dpl,a
   0312 E9                 2218 	mov	a,r1
   0313 34s00              2219 	addc	a,#(_SrcNameTable >> 8)
   0315 F5 83              2220 	mov	dph,a
   0317 E0                 2221 	movx	a,@dptr
   0318 8C 82              2222 	mov	dpl,r4
   031A 8D 83              2223 	mov	dph,r5
   031C F0                 2224 	movx	@dptr,a
                    031D   2225 	C$ydrip.c$285$1$1 ==.
                           2226 ;	apps/ydrip/ydrip.c:285: addr[4] = SrcNameTable[(src >> 0) & 0x1F];
   031D 74 04              2227 	mov	a,#0x04
   031F 2E                 2228 	add	a,r6
   0320 FC                 2229 	mov	r4,a
   0321 E4                 2230 	clr	a
   0322 3F                 2231 	addc	a,r7
   0323 FD                 2232 	mov	r5,a
   0324 A8*00              2233 	mov	r0,_dexcom_src_to_ascii_sloc0_1_0
   0326 53 00 1F           2234 	anl	ar0,#0x1F
   0329 E4                 2235 	clr	a
   032A F9                 2236 	mov	r1,a
   032B E8                 2237 	mov	a,r0
   032C 24r56              2238 	add	a,#_SrcNameTable
   032E F5 82              2239 	mov	dpl,a
   0330 E9                 2240 	mov	a,r1
   0331 34s00              2241 	addc	a,#(_SrcNameTable >> 8)
   0333 F5 83              2242 	mov	dph,a
   0335 E0                 2243 	movx	a,@dptr
   0336 8C 82              2244 	mov	dpl,r4
   0338 8D 83              2245 	mov	dph,r5
   033A F0                 2246 	movx	@dptr,a
                    033B   2247 	C$ydrip.c$286$1$1 ==.
                           2248 ;	apps/ydrip/ydrip.c:286: addr[5] = 0;
   033B 8E 82              2249 	mov	dpl,r6
   033D 8F 83              2250 	mov	dph,r7
   033F A3                 2251 	inc	dptr
   0340 A3                 2252 	inc	dptr
   0341 A3                 2253 	inc	dptr
   0342 A3                 2254 	inc	dptr
   0343 A3                 2255 	inc	dptr
   0344 E4                 2256 	clr	a
   0345 F0                 2257 	movx	@dptr,a
                    0346   2258 	C$ydrip.c$287$1$1 ==.
                    0346   2259 	XG$dexcom_src_to_ascii$0$0 ==.
   0346 22                 2260 	ret
                           2261 ;------------------------------------------------------------
                           2262 ;Allocation info for local variables in function 'clearRxErrors'
                           2263 ;------------------------------------------------------------
                    0347   2264 	G$clearRxErrors$0$0 ==.
                    0347   2265 	C$ydrip.c$289$1$1 ==.
                           2266 ;	apps/ydrip/ydrip.c:289: void clearRxErrors() {	
                           2267 ;	-----------------------------------------
                           2268 ;	 function clearRxErrors
                           2269 ;	-----------------------------------------
   0347                    2270 _clearRxErrors:
                    0347   2271 	C$ydrip.c$290$1$1 ==.
                           2272 ;	apps/ydrip/ydrip.c:290: if (uart1RxBufferFullOccurred)
                    0347   2273 	C$ydrip.c$291$2$2 ==.
                           2274 ;	apps/ydrip/ydrip.c:291: {   uart1RxBufferFullOccurred = 0;							// Clear Buffer Full Errors
   0347 10*00 02           2275 	jbc	_uart1RxBufferFullOccurred,00112$
   034A 80 03              2276 	sjmp	00102$
   034C                    2277 00112$:
                    034C   2278 	C$ydrip.c$292$3$3 ==.
                           2279 ;	apps/ydrip/ydrip.c:292: LED_RED(1);												// Error Indicator
   034C 43 FF 02           2280 	orl	_P2DIR,#0x02
   034F                    2281 00102$:
                    034F   2282 	C$ydrip.c$294$1$1 ==.
                           2283 ;	apps/ydrip/ydrip.c:294: if (uart1RxParityErrorOccurred)
                    034F   2284 	C$ydrip.c$295$2$4 ==.
                           2285 ;	apps/ydrip/ydrip.c:295: {   uart1RxParityErrorOccurred = 0;							// Clear Parity Errors
   034F 10*00 02           2286 	jbc	_uart1RxParityErrorOccurred,00113$
   0352 80 03              2287 	sjmp	00104$
   0354                    2288 00113$:
                    0354   2289 	C$ydrip.c$296$3$5 ==.
                           2290 ;	apps/ydrip/ydrip.c:296: LED_RED(1);												// Error Indicator
   0354 43 FF 02           2291 	orl	_P2DIR,#0x02
   0357                    2292 00104$:
                    0357   2293 	C$ydrip.c$298$1$1 ==.
                           2294 ;	apps/ydrip/ydrip.c:298: if (uart1RxFramingErrorOccurred)
                    0357   2295 	C$ydrip.c$299$2$6 ==.
                           2296 ;	apps/ydrip/ydrip.c:299: {   uart1RxFramingErrorOccurred = 0;
   0357 10*00 02           2297 	jbc	_uart1RxFramingErrorOccurred,00114$
   035A 80 0F              2298 	sjmp	00106$
   035C                    2299 00114$:
                    035C   2300 	C$ydrip.c$300$3$7 ==.
                           2301 ;	apps/ydrip/ydrip.c:300: LED_RED(1);												// Put the red LED on to show there was an error
   035C 43 FF 02           2302 	orl	_P2DIR,#0x02
                    035F   2303 	C$ydrip.c$301$2$6 ==.
                           2304 ;	apps/ydrip/ydrip.c:301: uartDisable();
   035F 12s00r3E           2305 	lcall	_uartDisable
                    0362   2306 	C$ydrip.c$303$2$6 ==.
                           2307 ;	apps/ydrip/ydrip.c:303: delayMs(250);											// Crude and will slow us down but we can take the small hit
   0362 90 00 FA           2308 	mov	dptr,#0x00FA
   0365 12s00r00           2309 	lcall	_delayMs
                    0368   2310 	C$ydrip.c$306$2$6 ==.
                           2311 ;	apps/ydrip/ydrip.c:306: uartEnable();
   0368 12s00r2D           2312 	lcall	_uartEnable
   036B                    2313 00106$:
                    036B   2314 	C$ydrip.c$308$2$8 ==.
                           2315 ;	apps/ydrip/ydrip.c:308: LED_RED(0);												// Error Indicator
   036B AF FF              2316 	mov	r7,_P2DIR
   036D 53 07 FD           2317 	anl	ar7,#0xFD
   0370 8F FF              2318 	mov	_P2DIR,r7
                    0372   2319 	C$ydrip.c$309$2$8 ==.
                    0372   2320 	XG$clearRxErrors$0$0 ==.
   0372 22                 2321 	ret
                           2322 ;------------------------------------------------------------
                           2323 ;Allocation info for local variables in function 'doServices'
                           2324 ;------------------------------------------------------------
                    0373   2325 	G$doServices$0$0 ==.
                    0373   2326 	C$ydrip.c$311$2$8 ==.
                           2327 ;	apps/ydrip/ydrip.c:311: void doServices() {
                           2328 ;	-----------------------------------------
                           2329 ;	 function doServices
                           2330 ;	-----------------------------------------
   0373                    2331 _doServices:
                    0373   2332 	C$ydrip.c$312$1$1 ==.
                           2333 ;	apps/ydrip/ydrip.c:312: boardService();
   0373 12s00r00           2334 	lcall	_boardService
                    0376   2335 	C$ydrip.c$313$1$1 ==.
                           2336 ;	apps/ydrip/ydrip.c:313: if(usbPowerPresent()) {
   0376 12s00r00           2337 	lcall	_usbPowerPresent
   0379 50 06              2338 	jnc	00103$
                    037B   2339 	C$ydrip.c$314$2$2 ==.
                           2340 ;	apps/ydrip/ydrip.c:314: usbComService();
   037B 12s00r00           2341 	lcall	_usbComService
                    037E   2342 	C$ydrip.c$315$2$2 ==.
                           2343 ;	apps/ydrip/ydrip.c:315: usbShowStatusWithGreenLed();
   037E 12s00r00           2344 	lcall	_usbShowStatusWithGreenLed
   0381                    2345 00103$:
                    0381   2346 	C$ydrip.c$319$2$1 ==.
                    0381   2347 	XG$doServices$0$0 ==.
   0381 22                 2348 	ret
                           2349 ;------------------------------------------------------------
                           2350 ;Allocation info for local variables in function 'initUart1'
                           2351 ;------------------------------------------------------------
                    0382   2352 	G$initUart1$0$0 ==.
                    0382   2353 	C$ydrip.c$321$2$1 ==.
                           2354 ;	apps/ydrip/ydrip.c:321: void initUart1() {
                           2355 ;	-----------------------------------------
                           2356 ;	 function initUart1
                           2357 ;	-----------------------------------------
   0382                    2358 _initUart1:
                    0382   2359 	C$ydrip.c$322$1$1 ==.
                           2360 ;	apps/ydrip/ydrip.c:322: uart1Init();
   0382 12s00r00           2361 	lcall	_uart1Init
                    0385   2362 	C$ydrip.c$323$1$1 ==.
                           2363 ;	apps/ydrip/ydrip.c:323: uart1SetBaudRate(9600);
   0385 90 25 80           2364 	mov	dptr,#0x2580
   0388 E4                 2365 	clr	a
   0389 F5 F0              2366 	mov	b,a
   038B 12s00r00           2367 	lcall	_uart1SetBaudRate
                    038E   2368 	C$ydrip.c$324$1$1 ==.
                    038E   2369 	XG$initUart1$0$0 ==.
   038E 22                 2370 	ret
                           2371 ;------------------------------------------------------------
                           2372 ;Allocation info for local variables in function 'getSrcValue'
                           2373 ;------------------------------------------------------------
                           2374 ;srcVal                    Allocated with name '_getSrcValue_srcVal_1_1'
                           2375 ;i                         Allocated with name '_getSrcValue_i_1_1'
                           2376 ;------------------------------------------------------------
                    038F   2377 	G$getSrcValue$0$0 ==.
                    038F   2378 	C$ydrip.c$338$1$1 ==.
                           2379 ;	apps/ydrip/ydrip.c:338: uint32 getSrcValue(XDATA char srcVal) {
                           2380 ;	-----------------------------------------
                           2381 ;	 function getSrcValue
                           2382 ;	-----------------------------------------
   038F                    2383 _getSrcValue:
   038F E5 82              2384 	mov	a,dpl
                    0391   2385 	C$ydrip.c$340$2$2 ==.
                           2386 ;	apps/ydrip/ydrip.c:340: for(i = 0; i < 32; i++) {
   0391 90s00r09           2387 	mov	dptr,#_getSrcValue_srcVal_1_1
   0394 F0                 2388 	movx	@dptr,a
   0395 FF                 2389 	mov	r7,a
   0396 7E 00              2390 	mov	r6,#0x00
   0398                    2391 00103$:
   0398 BE 20 00           2392 	cjne	r6,#0x20,00113$
   039B                    2393 00113$:
   039B 50 14              2394 	jnc	00106$
                    039D   2395 	C$ydrip.c$341$2$2 ==.
                           2396 ;	apps/ydrip/ydrip.c:341: if (SrcNameTable[i]==srcVal) break;
   039D EE                 2397 	mov	a,r6
   039E 24r56              2398 	add	a,#_SrcNameTable
   03A0 F5 82              2399 	mov	dpl,a
   03A2 E4                 2400 	clr	a
   03A3 34s00              2401 	addc	a,#(_SrcNameTable >> 8)
   03A5 F5 83              2402 	mov	dph,a
   03A7 E0                 2403 	movx	a,@dptr
   03A8 FD                 2404 	mov	r5,a
   03A9 B5 07 02           2405 	cjne	a,ar7,00115$
   03AC 80 03              2406 	sjmp	00106$
   03AE                    2407 00115$:
                    03AE   2408 	C$ydrip.c$340$1$1 ==.
                           2409 ;	apps/ydrip/ydrip.c:340: for(i = 0; i < 32; i++) {
   03AE 0E                 2410 	inc	r6
   03AF 80 E7              2411 	sjmp	00103$
   03B1                    2412 00106$:
                    03B1   2413 	C$ydrip.c$343$1$1 ==.
                           2414 ;	apps/ydrip/ydrip.c:343: return i & 0xFF;
   03B1 7F 00              2415 	mov	r7,#0x00
   03B3 7D 00              2416 	mov	r5,#0x00
   03B5 7C 00              2417 	mov	r4,#0x00
   03B7 8E 82              2418 	mov	dpl,r6
   03B9 8F 83              2419 	mov	dph,r7
   03BB 8D F0              2420 	mov	b,r5
   03BD EC                 2421 	mov	a,r4
                    03BE   2422 	C$ydrip.c$344$1$1 ==.
                    03BE   2423 	XG$getSrcValue$0$0 ==.
   03BE 22                 2424 	ret
                           2425 ;------------------------------------------------------------
                           2426 ;Allocation info for local variables in function 'getFonaString'
                           2427 ;------------------------------------------------------------
                           2428 ;sloc0                     Allocated with name '_getFonaString_sloc0_1_0'
                           2429 ;uartCharacters            Allocated with name '_getFonaString_uartCharacters_1_1'
                           2430 ;i                         Allocated with name '_getFonaString_i_1_1'
                           2431 ;stop                      Allocated with name '_getFonaString_stop_1_1'
                           2432 ;now                       Allocated with name '_getFonaString_now_1_1'
                           2433 ;------------------------------------------------------------
                    03BF   2434 	G$getFonaString$0$0 ==.
                    03BF   2435 	C$ydrip.c$346$1$1 ==.
                           2436 ;	apps/ydrip/ydrip.c:346: XDATA char * getFonaString() {					// Read the uart input buffer once character at a time
                           2437 ;	-----------------------------------------
                           2438 ;	 function getFonaString
                           2439 ;	-----------------------------------------
   03BF                    2440 _getFonaString:
                    03BF   2441 	C$ydrip.c$354$1$1 ==.
                           2442 ;	apps/ydrip/ydrip.c:354: stop = (getMs() + (AT_TIMEOUT * 1000));
   03BF 12s00r00           2443 	lcall	_getMs
   03C2 85 82*00           2444 	mov	_getFonaString_sloc0_1_0,dpl
   03C5 85 83*01           2445 	mov	(_getFonaString_sloc0_1_0 + 1),dph
   03C8 85 F0*02           2446 	mov	(_getFonaString_sloc0_1_0 + 2),b
   03CB F5*03              2447 	mov	(_getFonaString_sloc0_1_0 + 3),a
   03CD 90s00r51           2448 	mov	dptr,#_AT_TIMEOUT
   03D0 E0                 2449 	movx	a,@dptr
   03D1 78r00              2450 	mov	r0,#__mulint_PARM_2
   03D3 F2                 2451 	movx	@r0,a
   03D4 08                 2452 	inc	r0
   03D5 E4                 2453 	clr	a
   03D6 F2                 2454 	movx	@r0,a
   03D7 90 03 E8           2455 	mov	dptr,#0x03E8
   03DA 12s00r00           2456 	lcall	__mulint
   03DD AA 82              2457 	mov	r2,dpl
   03DF E5 83              2458 	mov	a,dph
   03E1 FB                 2459 	mov	r3,a
   03E2 33                 2460 	rlc	a
   03E3 95 E0              2461 	subb	a,acc
   03E5 FE                 2462 	mov	r6,a
   03E6 FF                 2463 	mov	r7,a
   03E7 EA                 2464 	mov	a,r2
   03E8 25*00              2465 	add	a,_getFonaString_sloc0_1_0
   03EA FA                 2466 	mov	r2,a
   03EB EB                 2467 	mov	a,r3
   03EC 35*01              2468 	addc	a,(_getFonaString_sloc0_1_0 + 1)
   03EE FB                 2469 	mov	r3,a
   03EF EE                 2470 	mov	a,r6
   03F0 35*02              2471 	addc	a,(_getFonaString_sloc0_1_0 + 2)
   03F2 FE                 2472 	mov	r6,a
   03F3 EF                 2473 	mov	a,r7
   03F4 35*03              2474 	addc	a,(_getFonaString_sloc0_1_0 + 3)
   03F6 FF                 2475 	mov	r7,a
   03F7 90s00r5A           2476 	mov	dptr,#_getFonaString_stop_1_1
   03FA EA                 2477 	mov	a,r2
   03FB F0                 2478 	movx	@dptr,a
   03FC A3                 2479 	inc	dptr
   03FD EB                 2480 	mov	a,r3
   03FE F0                 2481 	movx	@dptr,a
   03FF A3                 2482 	inc	dptr
   0400 EE                 2483 	mov	a,r6
   0401 F0                 2484 	movx	@dptr,a
   0402 A3                 2485 	inc	dptr
   0403 EF                 2486 	mov	a,r7
   0404 F0                 2487 	movx	@dptr,a
                    0405   2488 	C$ydrip.c$355$1$1 ==.
                           2489 ;	apps/ydrip/ydrip.c:355: now  = getMs();
   0405 12s00r00           2490 	lcall	_getMs
   0408 AC 82              2491 	mov	r4,dpl
   040A AD 83              2492 	mov	r5,dph
   040C AE F0              2493 	mov	r6,b
   040E FF                 2494 	mov	r7,a
   040F 90s00r5E           2495 	mov	dptr,#_getFonaString_now_1_1
   0412 EC                 2496 	mov	a,r4
   0413 F0                 2497 	movx	@dptr,a
   0414 A3                 2498 	inc	dptr
   0415 ED                 2499 	mov	a,r5
   0416 F0                 2500 	movx	@dptr,a
   0417 A3                 2501 	inc	dptr
   0418 EE                 2502 	mov	a,r6
   0419 F0                 2503 	movx	@dptr,a
   041A A3                 2504 	inc	dptr
   041B EF                 2505 	mov	a,r7
   041C F0                 2506 	movx	@dptr,a
                    041D   2507 	C$ydrip.c$357$1$1 ==.
                           2508 ;	apps/ydrip/ydrip.c:357: while (uart1RxAvailable() == 0 && stop > now) {				// This && is still using up some DSEG but is cheaper than comparing stop to getMS()
   041D 90s00r5A           2509 	mov	dptr,#_getFonaString_stop_1_1
   0420 E0                 2510 	movx	a,@dptr
   0421 F5*00              2511 	mov	_getFonaString_sloc0_1_0,a
   0423 A3                 2512 	inc	dptr
   0424 E0                 2513 	movx	a,@dptr
   0425 F5*01              2514 	mov	(_getFonaString_sloc0_1_0 + 1),a
   0427 A3                 2515 	inc	dptr
   0428 E0                 2516 	movx	a,@dptr
   0429 F5*02              2517 	mov	(_getFonaString_sloc0_1_0 + 2),a
   042B A3                 2518 	inc	dptr
   042C E0                 2519 	movx	a,@dptr
   042D F5*03              2520 	mov	(_getFonaString_sloc0_1_0 + 3),a
   042F                    2521 00102$:
   042F 12s00r00           2522 	lcall	_uart1RxAvailable
   0432 E5 82              2523 	mov	a,dpl
   0434 70 45              2524 	jnz	00123$
   0436 90s00r5E           2525 	mov	dptr,#_getFonaString_now_1_1
   0439 E0                 2526 	movx	a,@dptr
   043A FA                 2527 	mov	r2,a
   043B A3                 2528 	inc	dptr
   043C E0                 2529 	movx	a,@dptr
   043D FB                 2530 	mov	r3,a
   043E A3                 2531 	inc	dptr
   043F E0                 2532 	movx	a,@dptr
   0440 FE                 2533 	mov	r6,a
   0441 A3                 2534 	inc	dptr
   0442 E0                 2535 	movx	a,@dptr
   0443 FF                 2536 	mov	r7,a
   0444 C3                 2537 	clr	c
   0445 EA                 2538 	mov	a,r2
   0446 95*00              2539 	subb	a,_getFonaString_sloc0_1_0
   0448 EB                 2540 	mov	a,r3
   0449 95*01              2541 	subb	a,(_getFonaString_sloc0_1_0 + 1)
   044B EE                 2542 	mov	a,r6
   044C 95*02              2543 	subb	a,(_getFonaString_sloc0_1_0 + 2)
   044E EF                 2544 	mov	a,r7
   044F 64 80              2545 	xrl	a,#0x80
   0451 85*03 F0           2546 	mov	b,(_getFonaString_sloc0_1_0 + 3)
   0454 63 F0 80           2547 	xrl	b,#0x80
   0457 95 F0              2548 	subb	a,b
   0459 50 20              2549 	jnc	00123$
                    045B   2550 	C$ydrip.c$358$2$2 ==.
                           2551 ;	apps/ydrip/ydrip.c:358: now  = getMs();
   045B 12s00r00           2552 	lcall	_getMs
   045E AC 82              2553 	mov	r4,dpl
   0460 AD 83              2554 	mov	r5,dph
   0462 AE F0              2555 	mov	r6,b
   0464 FF                 2556 	mov	r7,a
   0465 90s00r5E           2557 	mov	dptr,#_getFonaString_now_1_1
   0468 EC                 2558 	mov	a,r4
   0469 F0                 2559 	movx	@dptr,a
   046A A3                 2560 	inc	dptr
   046B ED                 2561 	mov	a,r5
   046C F0                 2562 	movx	@dptr,a
   046D A3                 2563 	inc	dptr
   046E EE                 2564 	mov	a,r6
   046F F0                 2565 	movx	@dptr,a
   0470 A3                 2566 	inc	dptr
   0471 EF                 2567 	mov	a,r7
   0472 F0                 2568 	movx	@dptr,a
                    0473   2569 	C$ydrip.c$359$2$2 ==.
                           2570 ;	apps/ydrip/ydrip.c:359: delayMs(10);
   0473 90 00 0A           2571 	mov	dptr,#0x000A
   0476 12s00r00           2572 	lcall	_delayMs
                    0479   2573 	C$ydrip.c$362$1$1 ==.
                           2574 ;	apps/ydrip/ydrip.c:362: while (uart1RxAvailable() && i < 80) {
   0479 80 B4              2575 	sjmp	00102$
   047B                    2576 00123$:
   047B 7F 00              2577 	mov	r7,#0x00
   047D                    2578 00111$:
   047D C0 07              2579 	push	ar7
   047F 12s00r00           2580 	lcall	_uart1RxAvailable
   0482 E5 82              2581 	mov	a,dpl
   0484 D0 07              2582 	pop	ar7
   0486 60 61              2583 	jz	00113$
   0488 C3                 2584 	clr	c
   0489 EF                 2585 	mov	a,r7
   048A 64 80              2586 	xrl	a,#0x80
   048C 94 D0              2587 	subb	a,#0xd0
   048E 50 59              2588 	jnc	00113$
                    0490   2589 	C$ydrip.c$364$2$3 ==.
                           2590 ;	apps/ydrip/ydrip.c:364: uartCharacters[i] = uart1RxReceiveByte();
   0490 EF                 2591 	mov	a,r7
   0491 24r0A              2592 	add	a,#_getFonaString_uartCharacters_1_1
   0493 FD                 2593 	mov	r5,a
   0494 E4                 2594 	clr	a
   0495 34s00              2595 	addc	a,#(_getFonaString_uartCharacters_1_1 >> 8)
   0497 FE                 2596 	mov	r6,a
   0498 C0 07              2597 	push	ar7
   049A C0 06              2598 	push	ar6
   049C C0 05              2599 	push	ar5
   049E 12s00r00           2600 	lcall	_uart1RxReceiveByte
   04A1 AC 82              2601 	mov	r4,dpl
   04A3 D0 05              2602 	pop	ar5
   04A5 D0 06              2603 	pop	ar6
   04A7 8D 82              2604 	mov	dpl,r5
   04A9 8E 83              2605 	mov	dph,r6
   04AB EC                 2606 	mov	a,r4
   04AC F0                 2607 	movx	@dptr,a
                    04AD   2608 	C$ydrip.c$367$2$3 ==.
                           2609 ;	apps/ydrip/ydrip.c:367: if (usbPowerPresent()) {
   04AD 12s00r00           2610 	lcall	_usbPowerPresent
   04B0 D0 07              2611 	pop	ar7
   04B2 50 28              2612 	jnc	00109$
                    04B4   2613 	C$ydrip.c$368$3$4 ==.
                           2614 ;	apps/ydrip/ydrip.c:368: while(usbComTxAvailable() == 0) {							//  Loop until space in the TX buffer to send a character
   04B4                    2615 00105$:
   04B4 C0 07              2616 	push	ar7
   04B6 12s00r00           2617 	lcall	_usbComTxAvailable
   04B9 E5 82              2618 	mov	a,dpl
   04BB D0 07              2619 	pop	ar7
   04BD 70 09              2620 	jnz	00107$
                    04BF   2621 	C$ydrip.c$370$4$5 ==.
                           2622 ;	apps/ydrip/ydrip.c:370: doServices();
   04BF C0 07              2623 	push	ar7
   04C1 12s03r73           2624 	lcall	_doServices
   04C4 D0 07              2625 	pop	ar7
   04C6 80 EC              2626 	sjmp	00105$
   04C8                    2627 00107$:
                    04C8   2628 	C$ydrip.c$372$3$4 ==.
                           2629 ;	apps/ydrip/ydrip.c:372: usbComTxSendByte(uartCharacters[i]);
   04C8 EF                 2630 	mov	a,r7
   04C9 24r0A              2631 	add	a,#_getFonaString_uartCharacters_1_1
   04CB F5 82              2632 	mov	dpl,a
   04CD E4                 2633 	clr	a
   04CE 34s00              2634 	addc	a,#(_getFonaString_uartCharacters_1_1 >> 8)
   04D0 F5 83              2635 	mov	dph,a
   04D2 E0                 2636 	movx	a,@dptr
   04D3 F5 82              2637 	mov	dpl,a
   04D5 C0 07              2638 	push	ar7
   04D7 12s00r00           2639 	lcall	_usbComTxSendByte
   04DA D0 07              2640 	pop	ar7
   04DC                    2641 00109$:
                    04DC   2642 	C$ydrip.c$374$2$3 ==.
                           2643 ;	apps/ydrip/ydrip.c:374: delayMs(10);
   04DC 90 00 0A           2644 	mov	dptr,#0x000A
   04DF C0 07              2645 	push	ar7
   04E1 12s00r00           2646 	lcall	_delayMs
   04E4 D0 07              2647 	pop	ar7
                    04E6   2648 	C$ydrip.c$375$2$3 ==.
                           2649 ;	apps/ydrip/ydrip.c:375: i++;
   04E6 0F                 2650 	inc	r7
   04E7 80 94              2651 	sjmp	00111$
   04E9                    2652 00113$:
                    04E9   2653 	C$ydrip.c$378$1$1 ==.
                           2654 ;	apps/ydrip/ydrip.c:378: uartCharacters[i] = 0;										// Add an end-of-string character after copying the input into the character array
   04E9 EF                 2655 	mov	a,r7
   04EA 24r0A              2656 	add	a,#_getFonaString_uartCharacters_1_1
   04EC F5 82              2657 	mov	dpl,a
   04EE E4                 2658 	clr	a
   04EF 34s00              2659 	addc	a,#(_getFonaString_uartCharacters_1_1 >> 8)
   04F1 F5 83              2660 	mov	dph,a
   04F3 E4                 2661 	clr	a
   04F4 F0                 2662 	movx	@dptr,a
                    04F5   2663 	C$ydrip.c$379$1$1 ==.
                           2664 ;	apps/ydrip/ydrip.c:379: return uartCharacters;
   04F5 90s00r0A           2665 	mov	dptr,#_getFonaString_uartCharacters_1_1
                    04F8   2666 	C$ydrip.c$380$1$1 ==.
                    04F8   2667 	XG$getFonaString$0$0 ==.
   04F8 22                 2668 	ret
                           2669 ;------------------------------------------------------------
                           2670 ;Allocation info for local variables in function 'sendAT'
                           2671 ;------------------------------------------------------------
                           2672 ;atString                  Allocated with name '_sendAT_atString_1_1'
                           2673 ;ATresponse                Allocated with name '_sendAT_ATresponse_1_1'
                           2674 ;------------------------------------------------------------
                    04F9   2675 	G$sendAT$0$0 ==.
                    04F9   2676 	C$ydrip.c$382$1$1 ==.
                           2677 ;	apps/ydrip/ydrip.c:382: void sendAT(XDATA char atString[40]) {
                           2678 ;	-----------------------------------------
                           2679 ;	 function sendAT
                           2680 ;	-----------------------------------------
   04F9                    2681 _sendAT:
   04F9 AF 83              2682 	mov	r7,dph
   04FB E5 82              2683 	mov	a,dpl
   04FD 90s00r62           2684 	mov	dptr,#_sendAT_atString_1_1
   0500 F0                 2685 	movx	@dptr,a
   0501 A3                 2686 	inc	dptr
   0502 EF                 2687 	mov	a,r7
   0503 F0                 2688 	movx	@dptr,a
                    0504   2689 	C$ydrip.c$383$1$1 ==.
                           2690 ;	apps/ydrip/ydrip.c:383: XDATA char ATresponse[80]={0};
   0504 90s00r64           2691 	mov	dptr,#_sendAT_ATresponse_1_1
   0507 E4                 2692 	clr	a
   0508 F0                 2693 	movx	@dptr,a
   0509 90s00r65           2694 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0001)
   050C F0                 2695 	movx	@dptr,a
   050D 90s00r66           2696 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0002)
   0510 F0                 2697 	movx	@dptr,a
   0511 90s00r67           2698 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0003)
   0514 F0                 2699 	movx	@dptr,a
   0515 90s00r68           2700 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0004)
   0518 E4                 2701 	clr	a
   0519 F0                 2702 	movx	@dptr,a
   051A 90s00r69           2703 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0005)
   051D F0                 2704 	movx	@dptr,a
   051E 90s00r6A           2705 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0006)
   0521 F0                 2706 	movx	@dptr,a
   0522 90s00r6B           2707 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0007)
   0525 F0                 2708 	movx	@dptr,a
   0526 90s00r6C           2709 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0008)
   0529 E4                 2710 	clr	a
   052A F0                 2711 	movx	@dptr,a
   052B 90s00r6D           2712 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0009)
   052E F0                 2713 	movx	@dptr,a
   052F 90s00r6E           2714 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000a)
   0532 F0                 2715 	movx	@dptr,a
   0533 90s00r6F           2716 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000b)
   0536 F0                 2717 	movx	@dptr,a
   0537 90s00r70           2718 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000c)
   053A E4                 2719 	clr	a
   053B F0                 2720 	movx	@dptr,a
   053C 90s00r71           2721 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000d)
   053F F0                 2722 	movx	@dptr,a
   0540 90s00r72           2723 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000e)
   0543 F0                 2724 	movx	@dptr,a
   0544 90s00r73           2725 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000f)
   0547 F0                 2726 	movx	@dptr,a
   0548 90s00r74           2727 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0010)
   054B E4                 2728 	clr	a
   054C F0                 2729 	movx	@dptr,a
   054D 90s00r75           2730 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0011)
   0550 F0                 2731 	movx	@dptr,a
   0551 90s00r76           2732 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0012)
   0554 F0                 2733 	movx	@dptr,a
   0555 90s00r77           2734 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0013)
   0558 F0                 2735 	movx	@dptr,a
   0559 90s00r78           2736 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0014)
   055C E4                 2737 	clr	a
   055D F0                 2738 	movx	@dptr,a
   055E 90s00r79           2739 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0015)
   0561 F0                 2740 	movx	@dptr,a
   0562 90s00r7A           2741 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0016)
   0565 F0                 2742 	movx	@dptr,a
   0566 90s00r7B           2743 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0017)
   0569 F0                 2744 	movx	@dptr,a
   056A 90s00r7C           2745 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0018)
   056D E4                 2746 	clr	a
   056E F0                 2747 	movx	@dptr,a
   056F 90s00r7D           2748 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0019)
   0572 F0                 2749 	movx	@dptr,a
   0573 90s00r7E           2750 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001a)
   0576 F0                 2751 	movx	@dptr,a
   0577 90s00r7F           2752 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001b)
   057A F0                 2753 	movx	@dptr,a
   057B 90s00r80           2754 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001c)
   057E E4                 2755 	clr	a
   057F F0                 2756 	movx	@dptr,a
   0580 90s00r81           2757 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001d)
   0583 F0                 2758 	movx	@dptr,a
   0584 90s00r82           2759 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001e)
   0587 F0                 2760 	movx	@dptr,a
   0588 90s00r83           2761 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001f)
   058B F0                 2762 	movx	@dptr,a
   058C 90s00r84           2763 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0020)
   058F E4                 2764 	clr	a
   0590 F0                 2765 	movx	@dptr,a
   0591 90s00r85           2766 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0021)
   0594 F0                 2767 	movx	@dptr,a
   0595 90s00r86           2768 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0022)
   0598 F0                 2769 	movx	@dptr,a
   0599 90s00r87           2770 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0023)
   059C F0                 2771 	movx	@dptr,a
   059D 90s00r88           2772 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0024)
   05A0 E4                 2773 	clr	a
   05A1 F0                 2774 	movx	@dptr,a
   05A2 90s00r89           2775 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0025)
   05A5 F0                 2776 	movx	@dptr,a
   05A6 90s00r8A           2777 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0026)
   05A9 F0                 2778 	movx	@dptr,a
   05AA 90s00r8B           2779 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0027)
   05AD F0                 2780 	movx	@dptr,a
   05AE 90s00r8C           2781 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0028)
   05B1 E4                 2782 	clr	a
   05B2 F0                 2783 	movx	@dptr,a
   05B3 90s00r8D           2784 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0029)
   05B6 F0                 2785 	movx	@dptr,a
   05B7 90s00r8E           2786 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002a)
   05BA F0                 2787 	movx	@dptr,a
   05BB 90s00r8F           2788 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002b)
   05BE F0                 2789 	movx	@dptr,a
   05BF 90s00r90           2790 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002c)
   05C2 E4                 2791 	clr	a
   05C3 F0                 2792 	movx	@dptr,a
   05C4 90s00r91           2793 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002d)
   05C7 F0                 2794 	movx	@dptr,a
   05C8 90s00r92           2795 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002e)
   05CB F0                 2796 	movx	@dptr,a
   05CC 90s00r93           2797 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002f)
   05CF F0                 2798 	movx	@dptr,a
   05D0 90s00r94           2799 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0030)
   05D3 E4                 2800 	clr	a
   05D4 F0                 2801 	movx	@dptr,a
   05D5 90s00r95           2802 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0031)
   05D8 F0                 2803 	movx	@dptr,a
   05D9 90s00r96           2804 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0032)
   05DC F0                 2805 	movx	@dptr,a
   05DD 90s00r97           2806 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0033)
   05E0 F0                 2807 	movx	@dptr,a
   05E1 90s00r98           2808 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0034)
   05E4 E4                 2809 	clr	a
   05E5 F0                 2810 	movx	@dptr,a
   05E6 90s00r99           2811 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0035)
   05E9 F0                 2812 	movx	@dptr,a
   05EA 90s00r9A           2813 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0036)
   05ED F0                 2814 	movx	@dptr,a
   05EE 90s00r9B           2815 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0037)
   05F1 F0                 2816 	movx	@dptr,a
   05F2 90s00r9C           2817 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0038)
   05F5 E4                 2818 	clr	a
   05F6 F0                 2819 	movx	@dptr,a
   05F7 90s00r9D           2820 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0039)
   05FA F0                 2821 	movx	@dptr,a
   05FB 90s00r9E           2822 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003a)
   05FE F0                 2823 	movx	@dptr,a
   05FF 90s00r9F           2824 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003b)
   0602 F0                 2825 	movx	@dptr,a
   0603 90s00rA0           2826 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003c)
   0606 E4                 2827 	clr	a
   0607 F0                 2828 	movx	@dptr,a
   0608 90s00rA1           2829 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003d)
   060B F0                 2830 	movx	@dptr,a
   060C 90s00rA2           2831 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003e)
   060F F0                 2832 	movx	@dptr,a
   0610 90s00rA3           2833 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003f)
   0613 F0                 2834 	movx	@dptr,a
   0614 90s00rA4           2835 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0040)
   0617 E4                 2836 	clr	a
   0618 F0                 2837 	movx	@dptr,a
   0619 90s00rA5           2838 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0041)
   061C F0                 2839 	movx	@dptr,a
   061D 90s00rA6           2840 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0042)
   0620 F0                 2841 	movx	@dptr,a
   0621 90s00rA7           2842 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0043)
   0624 F0                 2843 	movx	@dptr,a
   0625 90s00rA8           2844 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0044)
   0628 E4                 2845 	clr	a
   0629 F0                 2846 	movx	@dptr,a
   062A 90s00rA9           2847 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0045)
   062D F0                 2848 	movx	@dptr,a
   062E 90s00rAA           2849 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0046)
   0631 F0                 2850 	movx	@dptr,a
   0632 90s00rAB           2851 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0047)
   0635 F0                 2852 	movx	@dptr,a
   0636 90s00rAC           2853 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0048)
   0639 E4                 2854 	clr	a
   063A F0                 2855 	movx	@dptr,a
   063B 90s00rAD           2856 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0049)
   063E F0                 2857 	movx	@dptr,a
   063F 90s00rAE           2858 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004a)
   0642 F0                 2859 	movx	@dptr,a
   0643 90s00rAF           2860 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004b)
   0646 F0                 2861 	movx	@dptr,a
   0647 90s00rB0           2862 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004c)
   064A E4                 2863 	clr	a
   064B F0                 2864 	movx	@dptr,a
   064C 90s00rB1           2865 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004d)
   064F F0                 2866 	movx	@dptr,a
   0650 90s00rB2           2867 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004e)
   0653 F0                 2868 	movx	@dptr,a
   0654 90s00rB3           2869 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004f)
   0657 F0                 2870 	movx	@dptr,a
                    0658   2871 	C$ydrip.c$384$1$1 ==.
                           2872 ;	apps/ydrip/ydrip.c:384: uartEnable();
   0658 12s00r2D           2873 	lcall	_uartEnable
                    065B   2874 	C$ydrip.c$385$1$1 ==.
                           2875 ;	apps/ydrip/ydrip.c:385: printf(atString);
   065B 90s00r62           2876 	mov	dptr,#_sendAT_atString_1_1
   065E E0                 2877 	movx	a,@dptr
   065F FE                 2878 	mov	r6,a
   0660 A3                 2879 	inc	dptr
   0661 E0                 2880 	movx	a,@dptr
   0662 FF                 2881 	mov	r7,a
   0663 7D 00              2882 	mov	r5,#0x00
   0665 C0 06              2883 	push	ar6
   0667 C0 07              2884 	push	ar7
   0669 C0 05              2885 	push	ar5
   066B 12s00r00           2886 	lcall	_printf
   066E 15 81              2887 	dec	sp
   0670 15 81              2888 	dec	sp
   0672 15 81              2889 	dec	sp
                    0674   2890 	C$ydrip.c$386$1$1 ==.
                           2891 ;	apps/ydrip/ydrip.c:386: delayMs(defaultATWait);
   0674 90s00r52           2892 	mov	dptr,#_defaultATWait
   0677 E0                 2893 	movx	a,@dptr
   0678 FC                 2894 	mov	r4,a
   0679 A3                 2895 	inc	dptr
   067A E0                 2896 	movx	a,@dptr
   067B FD                 2897 	mov	r5,a
   067C A3                 2898 	inc	dptr
   067D E0                 2899 	movx	a,@dptr
   067E A3                 2900 	inc	dptr
   067F E0                 2901 	movx	a,@dptr
   0680 8C 82              2902 	mov	dpl,r4
   0682 8D 83              2903 	mov	dph,r5
   0684 12s00r00           2904 	lcall	_delayMs
                    0687   2905 	C$ydrip.c$387$1$1 ==.
                    0687   2906 	XG$sendAT$0$0 ==.
   0687 22                 2907 	ret
                           2908 ;------------------------------------------------------------
                           2909 ;Allocation info for local variables in function 'enableESP'
                           2910 ;------------------------------------------------------------
                           2911 ;c                         Allocated with name '_enableESP_c_1_1'
                           2912 ;nofile                    Allocated with name '_enableESP_nofile_1_1'
                           2913 ;------------------------------------------------------------
                    0688   2914 	G$enableESP$0$0 ==.
                    0688   2915 	C$ydrip.c$389$1$1 ==.
                           2916 ;	apps/ydrip/ydrip.c:389: void enableESP() {
                           2917 ;	-----------------------------------------
                           2918 ;	 function enableESP
                           2919 ;	-----------------------------------------
   0688                    2920 _enableESP:
                    0688   2921 	C$ydrip.c$390$1$1 ==.
                           2922 ;	apps/ydrip/ydrip.c:390: XDATA char c[80] = {0};
   0688 90s00rB4           2923 	mov	dptr,#_enableESP_c_1_1
   068B E4                 2924 	clr	a
   068C F0                 2925 	movx	@dptr,a
   068D 90s00rB5           2926 	mov	dptr,#(_enableESP_c_1_1 + 0x0001)
   0690 F0                 2927 	movx	@dptr,a
   0691 90s00rB6           2928 	mov	dptr,#(_enableESP_c_1_1 + 0x0002)
   0694 F0                 2929 	movx	@dptr,a
   0695 90s00rB7           2930 	mov	dptr,#(_enableESP_c_1_1 + 0x0003)
   0698 F0                 2931 	movx	@dptr,a
   0699 90s00rB8           2932 	mov	dptr,#(_enableESP_c_1_1 + 0x0004)
   069C E4                 2933 	clr	a
   069D F0                 2934 	movx	@dptr,a
   069E 90s00rB9           2935 	mov	dptr,#(_enableESP_c_1_1 + 0x0005)
   06A1 F0                 2936 	movx	@dptr,a
   06A2 90s00rBA           2937 	mov	dptr,#(_enableESP_c_1_1 + 0x0006)
   06A5 F0                 2938 	movx	@dptr,a
   06A6 90s00rBB           2939 	mov	dptr,#(_enableESP_c_1_1 + 0x0007)
   06A9 F0                 2940 	movx	@dptr,a
   06AA 90s00rBC           2941 	mov	dptr,#(_enableESP_c_1_1 + 0x0008)
   06AD E4                 2942 	clr	a
   06AE F0                 2943 	movx	@dptr,a
   06AF 90s00rBD           2944 	mov	dptr,#(_enableESP_c_1_1 + 0x0009)
   06B2 F0                 2945 	movx	@dptr,a
   06B3 90s00rBE           2946 	mov	dptr,#(_enableESP_c_1_1 + 0x000a)
   06B6 F0                 2947 	movx	@dptr,a
   06B7 90s00rBF           2948 	mov	dptr,#(_enableESP_c_1_1 + 0x000b)
   06BA F0                 2949 	movx	@dptr,a
   06BB 90s00rC0           2950 	mov	dptr,#(_enableESP_c_1_1 + 0x000c)
   06BE E4                 2951 	clr	a
   06BF F0                 2952 	movx	@dptr,a
   06C0 90s00rC1           2953 	mov	dptr,#(_enableESP_c_1_1 + 0x000d)
   06C3 F0                 2954 	movx	@dptr,a
   06C4 90s00rC2           2955 	mov	dptr,#(_enableESP_c_1_1 + 0x000e)
   06C7 F0                 2956 	movx	@dptr,a
   06C8 90s00rC3           2957 	mov	dptr,#(_enableESP_c_1_1 + 0x000f)
   06CB F0                 2958 	movx	@dptr,a
   06CC 90s00rC4           2959 	mov	dptr,#(_enableESP_c_1_1 + 0x0010)
   06CF E4                 2960 	clr	a
   06D0 F0                 2961 	movx	@dptr,a
   06D1 90s00rC5           2962 	mov	dptr,#(_enableESP_c_1_1 + 0x0011)
   06D4 F0                 2963 	movx	@dptr,a
   06D5 90s00rC6           2964 	mov	dptr,#(_enableESP_c_1_1 + 0x0012)
   06D8 F0                 2965 	movx	@dptr,a
   06D9 90s00rC7           2966 	mov	dptr,#(_enableESP_c_1_1 + 0x0013)
   06DC F0                 2967 	movx	@dptr,a
   06DD 90s00rC8           2968 	mov	dptr,#(_enableESP_c_1_1 + 0x0014)
   06E0 E4                 2969 	clr	a
   06E1 F0                 2970 	movx	@dptr,a
   06E2 90s00rC9           2971 	mov	dptr,#(_enableESP_c_1_1 + 0x0015)
   06E5 F0                 2972 	movx	@dptr,a
   06E6 90s00rCA           2973 	mov	dptr,#(_enableESP_c_1_1 + 0x0016)
   06E9 F0                 2974 	movx	@dptr,a
   06EA 90s00rCB           2975 	mov	dptr,#(_enableESP_c_1_1 + 0x0017)
   06ED F0                 2976 	movx	@dptr,a
   06EE 90s00rCC           2977 	mov	dptr,#(_enableESP_c_1_1 + 0x0018)
   06F1 E4                 2978 	clr	a
   06F2 F0                 2979 	movx	@dptr,a
   06F3 90s00rCD           2980 	mov	dptr,#(_enableESP_c_1_1 + 0x0019)
   06F6 F0                 2981 	movx	@dptr,a
   06F7 90s00rCE           2982 	mov	dptr,#(_enableESP_c_1_1 + 0x001a)
   06FA F0                 2983 	movx	@dptr,a
   06FB 90s00rCF           2984 	mov	dptr,#(_enableESP_c_1_1 + 0x001b)
   06FE F0                 2985 	movx	@dptr,a
   06FF 90s00rD0           2986 	mov	dptr,#(_enableESP_c_1_1 + 0x001c)
   0702 E4                 2987 	clr	a
   0703 F0                 2988 	movx	@dptr,a
   0704 90s00rD1           2989 	mov	dptr,#(_enableESP_c_1_1 + 0x001d)
   0707 F0                 2990 	movx	@dptr,a
   0708 90s00rD2           2991 	mov	dptr,#(_enableESP_c_1_1 + 0x001e)
   070B F0                 2992 	movx	@dptr,a
   070C 90s00rD3           2993 	mov	dptr,#(_enableESP_c_1_1 + 0x001f)
   070F F0                 2994 	movx	@dptr,a
   0710 90s00rD4           2995 	mov	dptr,#(_enableESP_c_1_1 + 0x0020)
   0713 E4                 2996 	clr	a
   0714 F0                 2997 	movx	@dptr,a
   0715 90s00rD5           2998 	mov	dptr,#(_enableESP_c_1_1 + 0x0021)
   0718 F0                 2999 	movx	@dptr,a
   0719 90s00rD6           3000 	mov	dptr,#(_enableESP_c_1_1 + 0x0022)
   071C F0                 3001 	movx	@dptr,a
   071D 90s00rD7           3002 	mov	dptr,#(_enableESP_c_1_1 + 0x0023)
   0720 F0                 3003 	movx	@dptr,a
   0721 90s00rD8           3004 	mov	dptr,#(_enableESP_c_1_1 + 0x0024)
   0724 E4                 3005 	clr	a
   0725 F0                 3006 	movx	@dptr,a
   0726 90s00rD9           3007 	mov	dptr,#(_enableESP_c_1_1 + 0x0025)
   0729 F0                 3008 	movx	@dptr,a
   072A 90s00rDA           3009 	mov	dptr,#(_enableESP_c_1_1 + 0x0026)
   072D F0                 3010 	movx	@dptr,a
   072E 90s00rDB           3011 	mov	dptr,#(_enableESP_c_1_1 + 0x0027)
   0731 F0                 3012 	movx	@dptr,a
   0732 90s00rDC           3013 	mov	dptr,#(_enableESP_c_1_1 + 0x0028)
   0735 E4                 3014 	clr	a
   0736 F0                 3015 	movx	@dptr,a
   0737 90s00rDD           3016 	mov	dptr,#(_enableESP_c_1_1 + 0x0029)
   073A F0                 3017 	movx	@dptr,a
   073B 90s00rDE           3018 	mov	dptr,#(_enableESP_c_1_1 + 0x002a)
   073E F0                 3019 	movx	@dptr,a
   073F 90s00rDF           3020 	mov	dptr,#(_enableESP_c_1_1 + 0x002b)
   0742 F0                 3021 	movx	@dptr,a
   0743 90s00rE0           3022 	mov	dptr,#(_enableESP_c_1_1 + 0x002c)
   0746 E4                 3023 	clr	a
   0747 F0                 3024 	movx	@dptr,a
   0748 90s00rE1           3025 	mov	dptr,#(_enableESP_c_1_1 + 0x002d)
   074B F0                 3026 	movx	@dptr,a
   074C 90s00rE2           3027 	mov	dptr,#(_enableESP_c_1_1 + 0x002e)
   074F F0                 3028 	movx	@dptr,a
   0750 90s00rE3           3029 	mov	dptr,#(_enableESP_c_1_1 + 0x002f)
   0753 F0                 3030 	movx	@dptr,a
   0754 90s00rE4           3031 	mov	dptr,#(_enableESP_c_1_1 + 0x0030)
   0757 E4                 3032 	clr	a
   0758 F0                 3033 	movx	@dptr,a
   0759 90s00rE5           3034 	mov	dptr,#(_enableESP_c_1_1 + 0x0031)
   075C F0                 3035 	movx	@dptr,a
   075D 90s00rE6           3036 	mov	dptr,#(_enableESP_c_1_1 + 0x0032)
   0760 F0                 3037 	movx	@dptr,a
   0761 90s00rE7           3038 	mov	dptr,#(_enableESP_c_1_1 + 0x0033)
   0764 F0                 3039 	movx	@dptr,a
   0765 90s00rE8           3040 	mov	dptr,#(_enableESP_c_1_1 + 0x0034)
   0768 E4                 3041 	clr	a
   0769 F0                 3042 	movx	@dptr,a
   076A 90s00rE9           3043 	mov	dptr,#(_enableESP_c_1_1 + 0x0035)
   076D F0                 3044 	movx	@dptr,a
   076E 90s00rEA           3045 	mov	dptr,#(_enableESP_c_1_1 + 0x0036)
   0771 F0                 3046 	movx	@dptr,a
   0772 90s00rEB           3047 	mov	dptr,#(_enableESP_c_1_1 + 0x0037)
   0775 F0                 3048 	movx	@dptr,a
   0776 90s00rEC           3049 	mov	dptr,#(_enableESP_c_1_1 + 0x0038)
   0779 E4                 3050 	clr	a
   077A F0                 3051 	movx	@dptr,a
   077B 90s00rED           3052 	mov	dptr,#(_enableESP_c_1_1 + 0x0039)
   077E F0                 3053 	movx	@dptr,a
   077F 90s00rEE           3054 	mov	dptr,#(_enableESP_c_1_1 + 0x003a)
   0782 F0                 3055 	movx	@dptr,a
   0783 90s00rEF           3056 	mov	dptr,#(_enableESP_c_1_1 + 0x003b)
   0786 F0                 3057 	movx	@dptr,a
   0787 90s00rF0           3058 	mov	dptr,#(_enableESP_c_1_1 + 0x003c)
   078A E4                 3059 	clr	a
   078B F0                 3060 	movx	@dptr,a
   078C 90s00rF1           3061 	mov	dptr,#(_enableESP_c_1_1 + 0x003d)
   078F F0                 3062 	movx	@dptr,a
   0790 90s00rF2           3063 	mov	dptr,#(_enableESP_c_1_1 + 0x003e)
   0793 F0                 3064 	movx	@dptr,a
   0794 90s00rF3           3065 	mov	dptr,#(_enableESP_c_1_1 + 0x003f)
   0797 F0                 3066 	movx	@dptr,a
   0798 90s00rF4           3067 	mov	dptr,#(_enableESP_c_1_1 + 0x0040)
   079B E4                 3068 	clr	a
   079C F0                 3069 	movx	@dptr,a
   079D 90s00rF5           3070 	mov	dptr,#(_enableESP_c_1_1 + 0x0041)
   07A0 F0                 3071 	movx	@dptr,a
   07A1 90s00rF6           3072 	mov	dptr,#(_enableESP_c_1_1 + 0x0042)
   07A4 F0                 3073 	movx	@dptr,a
   07A5 90s00rF7           3074 	mov	dptr,#(_enableESP_c_1_1 + 0x0043)
   07A8 F0                 3075 	movx	@dptr,a
   07A9 90s00rF8           3076 	mov	dptr,#(_enableESP_c_1_1 + 0x0044)
   07AC E4                 3077 	clr	a
   07AD F0                 3078 	movx	@dptr,a
   07AE 90s00rF9           3079 	mov	dptr,#(_enableESP_c_1_1 + 0x0045)
   07B1 F0                 3080 	movx	@dptr,a
   07B2 90s00rFA           3081 	mov	dptr,#(_enableESP_c_1_1 + 0x0046)
   07B5 F0                 3082 	movx	@dptr,a
   07B6 90s00rFB           3083 	mov	dptr,#(_enableESP_c_1_1 + 0x0047)
   07B9 F0                 3084 	movx	@dptr,a
   07BA 90s00rFC           3085 	mov	dptr,#(_enableESP_c_1_1 + 0x0048)
   07BD E4                 3086 	clr	a
   07BE F0                 3087 	movx	@dptr,a
   07BF 90s00rFD           3088 	mov	dptr,#(_enableESP_c_1_1 + 0x0049)
   07C2 F0                 3089 	movx	@dptr,a
   07C3 90s00rFE           3090 	mov	dptr,#(_enableESP_c_1_1 + 0x004a)
   07C6 F0                 3091 	movx	@dptr,a
   07C7 90s00rFF           3092 	mov	dptr,#(_enableESP_c_1_1 + 0x004b)
   07CA F0                 3093 	movx	@dptr,a
   07CB 90s01r00           3094 	mov	dptr,#(_enableESP_c_1_1 + 0x004c)
   07CE E4                 3095 	clr	a
   07CF F0                 3096 	movx	@dptr,a
   07D0 90s01r01           3097 	mov	dptr,#(_enableESP_c_1_1 + 0x004d)
   07D3 F0                 3098 	movx	@dptr,a
   07D4 90s01r02           3099 	mov	dptr,#(_enableESP_c_1_1 + 0x004e)
   07D7 F0                 3100 	movx	@dptr,a
   07D8 90s01r03           3101 	mov	dptr,#(_enableESP_c_1_1 + 0x004f)
   07DB F0                 3102 	movx	@dptr,a
                    07DC   3103 	C$ydrip.c$392$1$1 ==.
                           3104 ;	apps/ydrip/ydrip.c:392: XDATA char nofile[] = "cannot";
   07DC 90s01r04           3105 	mov	dptr,#_enableESP_nofile_1_1
   07DF 74 63              3106 	mov	a,#0x63
   07E1 F0                 3107 	movx	@dptr,a
   07E2 90s01r05           3108 	mov	dptr,#(_enableESP_nofile_1_1 + 0x0001)
   07E5 74 61              3109 	mov	a,#0x61
   07E7 F0                 3110 	movx	@dptr,a
   07E8 90s01r06           3111 	mov	dptr,#(_enableESP_nofile_1_1 + 0x0002)
   07EB 74 6E              3112 	mov	a,#0x6E
   07ED F0                 3113 	movx	@dptr,a
   07EE 90s01r07           3114 	mov	dptr,#(_enableESP_nofile_1_1 + 0x0003)
   07F1 74 6E              3115 	mov	a,#0x6E
   07F3 F0                 3116 	movx	@dptr,a
   07F4 90s01r08           3117 	mov	dptr,#(_enableESP_nofile_1_1 + 0x0004)
   07F7 74 6F              3118 	mov	a,#0x6F
   07F9 F0                 3119 	movx	@dptr,a
   07FA 90s01r09           3120 	mov	dptr,#(_enableESP_nofile_1_1 + 0x0005)
   07FD 74 74              3121 	mov	a,#0x74
   07FF F0                 3122 	movx	@dptr,a
   0800 90s01r0A           3123 	mov	dptr,#(_enableESP_nofile_1_1 + 0x0006)
   0803 E4                 3124 	clr	a
   0804 F0                 3125 	movx	@dptr,a
                    0805   3126 	C$ydrip.c$393$1$1 ==.
                           3127 ;	apps/ydrip/ydrip.c:393: uartEnable();													// Enable the serial connection
   0805 12s00r2D           3128 	lcall	_uartEnable
                    0808   3129 	C$ydrip.c$395$1$1 ==.
                           3130 ;	apps/ydrip/ydrip.c:395: strcpy(c, (getFonaString())); // Clear buffer
   0808 12s03rBF           3131 	lcall	_getFonaString
   080B AE 82              3132 	mov	r6,dpl
   080D AF 83              3133 	mov	r7,dph
   080F 78r00              3134 	mov	r0,#_strcpy_PARM_2
   0811 EE                 3135 	mov	a,r6
   0812 F2                 3136 	movx	@r0,a
   0813 08                 3137 	inc	r0
   0814 EF                 3138 	mov	a,r7
   0815 F2                 3139 	movx	@r0,a
   0816 08                 3140 	inc	r0
   0817 E4                 3141 	clr	a
   0818 F2                 3142 	movx	@r0,a
   0819 90s00rB4           3143 	mov	dptr,#_enableESP_c_1_1
   081C 75 F0 00           3144 	mov	b,#0x00
   081F 12s00r00           3145 	lcall	_strcpy
                    0822   3146 	C$ydrip.c$396$1$1 ==.
                           3147 ;	apps/ydrip/ydrip.c:396: printf("dofile(\"init.lua\")\r\n");; delayMs(3000);
   0822 74r09              3148 	mov	a,#__str_1
   0824 C0 E0              3149 	push	acc
   0826 74s00              3150 	mov	a,#(__str_1 >> 8)
   0828 C0 E0              3151 	push	acc
   082A 74 80              3152 	mov	a,#0x80
   082C C0 E0              3153 	push	acc
   082E 12s00r00           3154 	lcall	_printf
   0831 15 81              3155 	dec	sp
   0833 15 81              3156 	dec	sp
   0835 15 81              3157 	dec	sp
   0837 90 0B B8           3158 	mov	dptr,#0x0BB8
   083A 12s00r00           3159 	lcall	_delayMs
                    083D   3160 	C$ydrip.c$397$1$1 ==.
                           3161 ;	apps/ydrip/ydrip.c:397: strcpy(c, (getFonaString())); // Clear buffer
   083D 12s03rBF           3162 	lcall	_getFonaString
   0840 AE 82              3163 	mov	r6,dpl
   0842 AF 83              3164 	mov	r7,dph
   0844 78r00              3165 	mov	r0,#_strcpy_PARM_2
   0846 EE                 3166 	mov	a,r6
   0847 F2                 3167 	movx	@r0,a
   0848 08                 3168 	inc	r0
   0849 EF                 3169 	mov	a,r7
   084A F2                 3170 	movx	@r0,a
   084B 08                 3171 	inc	r0
   084C E4                 3172 	clr	a
   084D F2                 3173 	movx	@r0,a
   084E 90s00rB4           3174 	mov	dptr,#_enableESP_c_1_1
   0851 75 F0 00           3175 	mov	b,#0x00
   0854 12s00r00           3176 	lcall	_strcpy
                    0857   3177 	C$ydrip.c$398$1$1 ==.
                           3178 ;	apps/ydrip/ydrip.c:398: point = strstr(c,nofile);
   0857 78r00              3179 	mov	r0,#_strstr_PARM_2
   0859 74r04              3180 	mov	a,#_enableESP_nofile_1_1
   085B F2                 3181 	movx	@r0,a
   085C 08                 3182 	inc	r0
   085D 74s01              3183 	mov	a,#(_enableESP_nofile_1_1 >> 8)
   085F F2                 3184 	movx	@r0,a
   0860 08                 3185 	inc	r0
   0861 E4                 3186 	clr	a
   0862 F2                 3187 	movx	@r0,a
   0863 90s00rB4           3188 	mov	dptr,#_enableESP_c_1_1
   0866 75 F0 00           3189 	mov	b,#0x00
   0869 12s00r00           3190 	lcall	_strstr
   086C AD 82              3191 	mov	r5,dpl
   086E AE 83              3192 	mov	r6,dph
   0870 AF F0              3193 	mov	r7,b
                    0872   3194 	C$ydrip.c$400$1$1 ==.
                           3195 ;	apps/ydrip/ydrip.c:400: if (point == NULL) {											// This check doesn't seem to work.  I might need to check the pointer contents
   0872 ED                 3196 	mov	a,r5
   0873 4E                 3197 	orl	a,r6
   0874 70 2B              3198 	jnz	00102$
                    0876   3199 	C$ydrip.c$401$2$2 ==.
                           3200 ;	apps/ydrip/ydrip.c:401: printf("-- No need to write out .lua files as they seem to already exist --\r\n");; delayMs(defaultATWait);
   0876 74r1E              3201 	mov	a,#__str_2
   0878 C0 E0              3202 	push	acc
   087A 74s00              3203 	mov	a,#(__str_2 >> 8)
   087C C0 E0              3204 	push	acc
   087E 74 80              3205 	mov	a,#0x80
   0880 C0 E0              3206 	push	acc
   0882 12s00r00           3207 	lcall	_printf
   0885 15 81              3208 	dec	sp
   0887 15 81              3209 	dec	sp
   0889 15 81              3210 	dec	sp
   088B 90s00r52           3211 	mov	dptr,#_defaultATWait
   088E E0                 3212 	movx	a,@dptr
   088F FC                 3213 	mov	r4,a
   0890 A3                 3214 	inc	dptr
   0891 E0                 3215 	movx	a,@dptr
   0892 FD                 3216 	mov	r5,a
   0893 A3                 3217 	inc	dptr
   0894 E0                 3218 	movx	a,@dptr
   0895 A3                 3219 	inc	dptr
   0896 E0                 3220 	movx	a,@dptr
   0897 8C 82              3221 	mov	dpl,r4
   0899 8D 83              3222 	mov	dph,r5
   089B 12s00r00           3223 	lcall	_delayMs
   089E 02s0Dr93           3224 	ljmp	00104$
   08A1                    3225 00102$:
                    08A1   3226 	C$ydrip.c$405$2$3 ==.
                           3227 ;	apps/ydrip/ydrip.c:405: printf("-- Writing out .lua files as they cannot be found --\r\n"); delayMs(defaultATWait);
   08A1 74r64              3228 	mov	a,#__str_3
   08A3 C0 E0              3229 	push	acc
   08A5 74s00              3230 	mov	a,#(__str_3 >> 8)
   08A7 C0 E0              3231 	push	acc
   08A9 74 80              3232 	mov	a,#0x80
   08AB C0 E0              3233 	push	acc
   08AD 12s00r00           3234 	lcall	_printf
   08B0 15 81              3235 	dec	sp
   08B2 15 81              3236 	dec	sp
   08B4 15 81              3237 	dec	sp
   08B6 90s00r52           3238 	mov	dptr,#_defaultATWait
   08B9 E0                 3239 	movx	a,@dptr
   08BA FC                 3240 	mov	r4,a
   08BB A3                 3241 	inc	dptr
   08BC E0                 3242 	movx	a,@dptr
   08BD FD                 3243 	mov	r5,a
   08BE A3                 3244 	inc	dptr
   08BF E0                 3245 	movx	a,@dptr
   08C0 A3                 3246 	inc	dptr
   08C1 E0                 3247 	movx	a,@dptr
   08C2 8C 82              3248 	mov	dpl,r4
   08C4 8D 83              3249 	mov	dph,r5
   08C6 12s00r00           3250 	lcall	_delayMs
                    08C9   3251 	C$ydrip.c$407$2$3 ==.
                           3252 ;	apps/ydrip/ydrip.c:407: printf("file.open(\"init.lua\", \"w\")\r\n");; delayMs(defaultATWait)	; delayMs(defaultATWait);
   08C9 74r9B              3253 	mov	a,#__str_4
   08CB C0 E0              3254 	push	acc
   08CD 74s00              3255 	mov	a,#(__str_4 >> 8)
   08CF C0 E0              3256 	push	acc
   08D1 74 80              3257 	mov	a,#0x80
   08D3 C0 E0              3258 	push	acc
   08D5 12s00r00           3259 	lcall	_printf
   08D8 15 81              3260 	dec	sp
   08DA 15 81              3261 	dec	sp
   08DC 15 81              3262 	dec	sp
   08DE 90s00r52           3263 	mov	dptr,#_defaultATWait
   08E1 E0                 3264 	movx	a,@dptr
   08E2 FC                 3265 	mov	r4,a
   08E3 A3                 3266 	inc	dptr
   08E4 E0                 3267 	movx	a,@dptr
   08E5 FD                 3268 	mov	r5,a
   08E6 A3                 3269 	inc	dptr
   08E7 E0                 3270 	movx	a,@dptr
   08E8 A3                 3271 	inc	dptr
   08E9 E0                 3272 	movx	a,@dptr
   08EA 8C 82              3273 	mov	dpl,r4
   08EC 8D 83              3274 	mov	dph,r5
   08EE 12s00r00           3275 	lcall	_delayMs
   08F1 90s00r52           3276 	mov	dptr,#_defaultATWait
   08F4 E0                 3277 	movx	a,@dptr
   08F5 FC                 3278 	mov	r4,a
   08F6 A3                 3279 	inc	dptr
   08F7 E0                 3280 	movx	a,@dptr
   08F8 FD                 3281 	mov	r5,a
   08F9 A3                 3282 	inc	dptr
   08FA E0                 3283 	movx	a,@dptr
   08FB A3                 3284 	inc	dptr
   08FC E0                 3285 	movx	a,@dptr
   08FD 8C 82              3286 	mov	dpl,r4
   08FF 8D 83              3287 	mov	dph,r5
   0901 12s00r00           3288 	lcall	_delayMs
                    0904   3289 	C$ydrip.c$408$2$3 ==.
                           3290 ;	apps/ydrip/ydrip.c:408: printf("file.writeline([[gpio.mode(3, gpio.OUTPUT)]])\r\n")				; delayMs(defaultATWait);	delayMs(defaultATWait);
   0904 74rB8              3291 	mov	a,#__str_5
   0906 C0 E0              3292 	push	acc
   0908 74s00              3293 	mov	a,#(__str_5 >> 8)
   090A C0 E0              3294 	push	acc
   090C 74 80              3295 	mov	a,#0x80
   090E C0 E0              3296 	push	acc
   0910 12s00r00           3297 	lcall	_printf
   0913 15 81              3298 	dec	sp
   0915 15 81              3299 	dec	sp
   0917 15 81              3300 	dec	sp
   0919 90s00r52           3301 	mov	dptr,#_defaultATWait
   091C E0                 3302 	movx	a,@dptr
   091D FC                 3303 	mov	r4,a
   091E A3                 3304 	inc	dptr
   091F E0                 3305 	movx	a,@dptr
   0920 FD                 3306 	mov	r5,a
   0921 A3                 3307 	inc	dptr
   0922 E0                 3308 	movx	a,@dptr
   0923 A3                 3309 	inc	dptr
   0924 E0                 3310 	movx	a,@dptr
   0925 8C 82              3311 	mov	dpl,r4
   0927 8D 83              3312 	mov	dph,r5
   0929 12s00r00           3313 	lcall	_delayMs
   092C 90s00r52           3314 	mov	dptr,#_defaultATWait
   092F E0                 3315 	movx	a,@dptr
   0930 FC                 3316 	mov	r4,a
   0931 A3                 3317 	inc	dptr
   0932 E0                 3318 	movx	a,@dptr
   0933 FD                 3319 	mov	r5,a
   0934 A3                 3320 	inc	dptr
   0935 E0                 3321 	movx	a,@dptr
   0936 A3                 3322 	inc	dptr
   0937 E0                 3323 	movx	a,@dptr
   0938 8C 82              3324 	mov	dpl,r4
   093A 8D 83              3325 	mov	dph,r5
   093C 12s00r00           3326 	lcall	_delayMs
                    093F   3327 	C$ydrip.c$409$2$3 ==.
                           3328 ;	apps/ydrip/ydrip.c:409: printf("file.writeline([[gpio.write(3, gpio.LOW)]])\r\n")				; delayMs(defaultATWait);	delayMs(defaultATWait);
   093F 74rE8              3329 	mov	a,#__str_6
   0941 C0 E0              3330 	push	acc
   0943 74s00              3331 	mov	a,#(__str_6 >> 8)
   0945 C0 E0              3332 	push	acc
   0947 74 80              3333 	mov	a,#0x80
   0949 C0 E0              3334 	push	acc
   094B 12s00r00           3335 	lcall	_printf
   094E 15 81              3336 	dec	sp
   0950 15 81              3337 	dec	sp
   0952 15 81              3338 	dec	sp
   0954 90s00r52           3339 	mov	dptr,#_defaultATWait
   0957 E0                 3340 	movx	a,@dptr
   0958 FC                 3341 	mov	r4,a
   0959 A3                 3342 	inc	dptr
   095A E0                 3343 	movx	a,@dptr
   095B FD                 3344 	mov	r5,a
   095C A3                 3345 	inc	dptr
   095D E0                 3346 	movx	a,@dptr
   095E A3                 3347 	inc	dptr
   095F E0                 3348 	movx	a,@dptr
   0960 8C 82              3349 	mov	dpl,r4
   0962 8D 83              3350 	mov	dph,r5
   0964 12s00r00           3351 	lcall	_delayMs
   0967 90s00r52           3352 	mov	dptr,#_defaultATWait
   096A E0                 3353 	movx	a,@dptr
   096B FC                 3354 	mov	r4,a
   096C A3                 3355 	inc	dptr
   096D E0                 3356 	movx	a,@dptr
   096E FD                 3357 	mov	r5,a
   096F A3                 3358 	inc	dptr
   0970 E0                 3359 	movx	a,@dptr
   0971 A3                 3360 	inc	dptr
   0972 E0                 3361 	movx	a,@dptr
   0973 8C 82              3362 	mov	dpl,r4
   0975 8D 83              3363 	mov	dph,r5
   0977 12s00r00           3364 	lcall	_delayMs
                    097A   3365 	C$ydrip.c$410$2$3 ==.
                           3366 ;	apps/ydrip/ydrip.c:410: printf("file.writeline([[gpio.mode(5, gpio.OUTPUT)]])\r\n")				; delayMs(defaultATWait);	delayMs(defaultATWait);
   097A 74r16              3367 	mov	a,#__str_7
   097C C0 E0              3368 	push	acc
   097E 74s01              3369 	mov	a,#(__str_7 >> 8)
   0980 C0 E0              3370 	push	acc
   0982 74 80              3371 	mov	a,#0x80
   0984 C0 E0              3372 	push	acc
   0986 12s00r00           3373 	lcall	_printf
   0989 15 81              3374 	dec	sp
   098B 15 81              3375 	dec	sp
   098D 15 81              3376 	dec	sp
   098F 90s00r52           3377 	mov	dptr,#_defaultATWait
   0992 E0                 3378 	movx	a,@dptr
   0993 FC                 3379 	mov	r4,a
   0994 A3                 3380 	inc	dptr
   0995 E0                 3381 	movx	a,@dptr
   0996 FD                 3382 	mov	r5,a
   0997 A3                 3383 	inc	dptr
   0998 E0                 3384 	movx	a,@dptr
   0999 A3                 3385 	inc	dptr
   099A E0                 3386 	movx	a,@dptr
   099B 8C 82              3387 	mov	dpl,r4
   099D 8D 83              3388 	mov	dph,r5
   099F 12s00r00           3389 	lcall	_delayMs
   09A2 90s00r52           3390 	mov	dptr,#_defaultATWait
   09A5 E0                 3391 	movx	a,@dptr
   09A6 FC                 3392 	mov	r4,a
   09A7 A3                 3393 	inc	dptr
   09A8 E0                 3394 	movx	a,@dptr
   09A9 FD                 3395 	mov	r5,a
   09AA A3                 3396 	inc	dptr
   09AB E0                 3397 	movx	a,@dptr
   09AC A3                 3398 	inc	dptr
   09AD E0                 3399 	movx	a,@dptr
   09AE 8C 82              3400 	mov	dpl,r4
   09B0 8D 83              3401 	mov	dph,r5
   09B2 12s00r00           3402 	lcall	_delayMs
                    09B5   3403 	C$ydrip.c$411$2$3 ==.
                           3404 ;	apps/ydrip/ydrip.c:411: printf("file.writeline([[gpio.write(5, gpio.LOW)]])\r\n")				; delayMs(defaultATWait);	delayMs(defaultATWait);
   09B5 74r46              3405 	mov	a,#__str_8
   09B7 C0 E0              3406 	push	acc
   09B9 74s01              3407 	mov	a,#(__str_8 >> 8)
   09BB C0 E0              3408 	push	acc
   09BD 74 80              3409 	mov	a,#0x80
   09BF C0 E0              3410 	push	acc
   09C1 12s00r00           3411 	lcall	_printf
   09C4 15 81              3412 	dec	sp
   09C6 15 81              3413 	dec	sp
   09C8 15 81              3414 	dec	sp
   09CA 90s00r52           3415 	mov	dptr,#_defaultATWait
   09CD E0                 3416 	movx	a,@dptr
   09CE FC                 3417 	mov	r4,a
   09CF A3                 3418 	inc	dptr
   09D0 E0                 3419 	movx	a,@dptr
   09D1 FD                 3420 	mov	r5,a
   09D2 A3                 3421 	inc	dptr
   09D3 E0                 3422 	movx	a,@dptr
   09D4 A3                 3423 	inc	dptr
   09D5 E0                 3424 	movx	a,@dptr
   09D6 8C 82              3425 	mov	dpl,r4
   09D8 8D 83              3426 	mov	dph,r5
   09DA 12s00r00           3427 	lcall	_delayMs
   09DD 90s00r52           3428 	mov	dptr,#_defaultATWait
   09E0 E0                 3429 	movx	a,@dptr
   09E1 FC                 3430 	mov	r4,a
   09E2 A3                 3431 	inc	dptr
   09E3 E0                 3432 	movx	a,@dptr
   09E4 FD                 3433 	mov	r5,a
   09E5 A3                 3434 	inc	dptr
   09E6 E0                 3435 	movx	a,@dptr
   09E7 A3                 3436 	inc	dptr
   09E8 E0                 3437 	movx	a,@dptr
   09E9 8C 82              3438 	mov	dpl,r4
   09EB 8D 83              3439 	mov	dph,r5
   09ED 12s00r00           3440 	lcall	_delayMs
                    09F0   3441 	C$ydrip.c$412$2$3 ==.
                           3442 ;	apps/ydrip/ydrip.c:412: printf("file.writeline([[gpio.mode(4, gpio.OUTPUT)]])\r\n")				; delayMs(defaultATWait);	delayMs(defaultATWait);
   09F0 74r74              3443 	mov	a,#__str_9
   09F2 C0 E0              3444 	push	acc
   09F4 74s01              3445 	mov	a,#(__str_9 >> 8)
   09F6 C0 E0              3446 	push	acc
   09F8 74 80              3447 	mov	a,#0x80
   09FA C0 E0              3448 	push	acc
   09FC 12s00r00           3449 	lcall	_printf
   09FF 15 81              3450 	dec	sp
   0A01 15 81              3451 	dec	sp
   0A03 15 81              3452 	dec	sp
   0A05 90s00r52           3453 	mov	dptr,#_defaultATWait
   0A08 E0                 3454 	movx	a,@dptr
   0A09 FC                 3455 	mov	r4,a
   0A0A A3                 3456 	inc	dptr
   0A0B E0                 3457 	movx	a,@dptr
   0A0C FD                 3458 	mov	r5,a
   0A0D A3                 3459 	inc	dptr
   0A0E E0                 3460 	movx	a,@dptr
   0A0F A3                 3461 	inc	dptr
   0A10 E0                 3462 	movx	a,@dptr
   0A11 8C 82              3463 	mov	dpl,r4
   0A13 8D 83              3464 	mov	dph,r5
   0A15 12s00r00           3465 	lcall	_delayMs
   0A18 90s00r52           3466 	mov	dptr,#_defaultATWait
   0A1B E0                 3467 	movx	a,@dptr
   0A1C FC                 3468 	mov	r4,a
   0A1D A3                 3469 	inc	dptr
   0A1E E0                 3470 	movx	a,@dptr
   0A1F FD                 3471 	mov	r5,a
   0A20 A3                 3472 	inc	dptr
   0A21 E0                 3473 	movx	a,@dptr
   0A22 A3                 3474 	inc	dptr
   0A23 E0                 3475 	movx	a,@dptr
   0A24 8C 82              3476 	mov	dpl,r4
   0A26 8D 83              3477 	mov	dph,r5
   0A28 12s00r00           3478 	lcall	_delayMs
                    0A2B   3479 	C$ydrip.c$413$2$3 ==.
                           3480 ;	apps/ydrip/ydrip.c:413: printf("file.close()\r\n")												; delayMs(defaultATWait);
   0A2B 74rA4              3481 	mov	a,#__str_10
   0A2D C0 E0              3482 	push	acc
   0A2F 74s01              3483 	mov	a,#(__str_10 >> 8)
   0A31 C0 E0              3484 	push	acc
   0A33 74 80              3485 	mov	a,#0x80
   0A35 C0 E0              3486 	push	acc
   0A37 12s00r00           3487 	lcall	_printf
   0A3A 15 81              3488 	dec	sp
   0A3C 15 81              3489 	dec	sp
   0A3E 15 81              3490 	dec	sp
   0A40 90s00r52           3491 	mov	dptr,#_defaultATWait
   0A43 E0                 3492 	movx	a,@dptr
   0A44 FC                 3493 	mov	r4,a
   0A45 A3                 3494 	inc	dptr
   0A46 E0                 3495 	movx	a,@dptr
   0A47 FD                 3496 	mov	r5,a
   0A48 A3                 3497 	inc	dptr
   0A49 E0                 3498 	movx	a,@dptr
   0A4A A3                 3499 	inc	dptr
   0A4B E0                 3500 	movx	a,@dptr
   0A4C 8C 82              3501 	mov	dpl,r4
   0A4E 8D 83              3502 	mov	dph,r5
   0A50 12s00r00           3503 	lcall	_delayMs
                    0A53   3504 	C$ydrip.c$439$2$3 ==.
                           3505 ;	apps/ydrip/ydrip.c:439: printf("file.remove('googletime.lua')\r\n");																		; delayMs(defaultATWait);
   0A53 74rB3              3506 	mov	a,#__str_11
   0A55 C0 E0              3507 	push	acc
   0A57 74s01              3508 	mov	a,#(__str_11 >> 8)
   0A59 C0 E0              3509 	push	acc
   0A5B 74 80              3510 	mov	a,#0x80
   0A5D C0 E0              3511 	push	acc
   0A5F 12s00r00           3512 	lcall	_printf
   0A62 15 81              3513 	dec	sp
   0A64 15 81              3514 	dec	sp
   0A66 15 81              3515 	dec	sp
   0A68 90s00r52           3516 	mov	dptr,#_defaultATWait
   0A6B E0                 3517 	movx	a,@dptr
   0A6C FC                 3518 	mov	r4,a
   0A6D A3                 3519 	inc	dptr
   0A6E E0                 3520 	movx	a,@dptr
   0A6F FD                 3521 	mov	r5,a
   0A70 A3                 3522 	inc	dptr
   0A71 E0                 3523 	movx	a,@dptr
   0A72 A3                 3524 	inc	dptr
   0A73 E0                 3525 	movx	a,@dptr
   0A74 8C 82              3526 	mov	dpl,r4
   0A76 8D 83              3527 	mov	dph,r5
   0A78 12s00r00           3528 	lcall	_delayMs
                    0A7B   3529 	C$ydrip.c$440$2$3 ==.
                           3530 ;	apps/ydrip/ydrip.c:440: printf("file.open(\"googletime.lua\", \"w\")\r\n");											; delayMs(defaultATWait); delayMs(defaultATWait);
   0A7B 74rD3              3531 	mov	a,#__str_12
   0A7D C0 E0              3532 	push	acc
   0A7F 74s01              3533 	mov	a,#(__str_12 >> 8)
   0A81 C0 E0              3534 	push	acc
   0A83 74 80              3535 	mov	a,#0x80
   0A85 C0 E0              3536 	push	acc
   0A87 12s00r00           3537 	lcall	_printf
   0A8A 15 81              3538 	dec	sp
   0A8C 15 81              3539 	dec	sp
   0A8E 15 81              3540 	dec	sp
   0A90 90s00r52           3541 	mov	dptr,#_defaultATWait
   0A93 E0                 3542 	movx	a,@dptr
   0A94 FC                 3543 	mov	r4,a
   0A95 A3                 3544 	inc	dptr
   0A96 E0                 3545 	movx	a,@dptr
   0A97 FD                 3546 	mov	r5,a
   0A98 A3                 3547 	inc	dptr
   0A99 E0                 3548 	movx	a,@dptr
   0A9A A3                 3549 	inc	dptr
   0A9B E0                 3550 	movx	a,@dptr
   0A9C 8C 82              3551 	mov	dpl,r4
   0A9E 8D 83              3552 	mov	dph,r5
   0AA0 12s00r00           3553 	lcall	_delayMs
   0AA3 90s00r52           3554 	mov	dptr,#_defaultATWait
   0AA6 E0                 3555 	movx	a,@dptr
   0AA7 FC                 3556 	mov	r4,a
   0AA8 A3                 3557 	inc	dptr
   0AA9 E0                 3558 	movx	a,@dptr
   0AAA FD                 3559 	mov	r5,a
   0AAB A3                 3560 	inc	dptr
   0AAC E0                 3561 	movx	a,@dptr
   0AAD A3                 3562 	inc	dptr
   0AAE E0                 3563 	movx	a,@dptr
   0AAF 8C 82              3564 	mov	dpl,r4
   0AB1 8D 83              3565 	mov	dph,r5
   0AB3 12s00r00           3566 	lcall	_delayMs
                    0AB6   3567 	C$ydrip.c$442$2$3 ==.
                           3568 ;	apps/ydrip/ydrip.c:442: printf("file.writeline([[connG=net.createConnection(net.TCP, 0)]])\r\n")											; delayMs(defaultATWait);
   0AB6 74rF6              3569 	mov	a,#__str_13
   0AB8 C0 E0              3570 	push	acc
   0ABA 74s01              3571 	mov	a,#(__str_13 >> 8)
   0ABC C0 E0              3572 	push	acc
   0ABE 74 80              3573 	mov	a,#0x80
   0AC0 C0 E0              3574 	push	acc
   0AC2 12s00r00           3575 	lcall	_printf
   0AC5 15 81              3576 	dec	sp
   0AC7 15 81              3577 	dec	sp
   0AC9 15 81              3578 	dec	sp
   0ACB 90s00r52           3579 	mov	dptr,#_defaultATWait
   0ACE E0                 3580 	movx	a,@dptr
   0ACF FC                 3581 	mov	r4,a
   0AD0 A3                 3582 	inc	dptr
   0AD1 E0                 3583 	movx	a,@dptr
   0AD2 FD                 3584 	mov	r5,a
   0AD3 A3                 3585 	inc	dptr
   0AD4 E0                 3586 	movx	a,@dptr
   0AD5 A3                 3587 	inc	dptr
   0AD6 E0                 3588 	movx	a,@dptr
   0AD7 8C 82              3589 	mov	dpl,r4
   0AD9 8D 83              3590 	mov	dph,r5
   0ADB 12s00r00           3591 	lcall	_delayMs
                    0ADE   3592 	C$ydrip.c$443$2$3 ==.
                           3593 ;	apps/ydrip/ydrip.c:443: printf("file.writeline([[connG:on(\"connection\",function(conn, payload)]])\r\n")									; delayMs(defaultATWait);
   0ADE 74r33              3594 	mov	a,#__str_14
   0AE0 C0 E0              3595 	push	acc
   0AE2 74s02              3596 	mov	a,#(__str_14 >> 8)
   0AE4 C0 E0              3597 	push	acc
   0AE6 74 80              3598 	mov	a,#0x80
   0AE8 C0 E0              3599 	push	acc
   0AEA 12s00r00           3600 	lcall	_printf
   0AED 15 81              3601 	dec	sp
   0AEF 15 81              3602 	dec	sp
   0AF1 15 81              3603 	dec	sp
   0AF3 90s00r52           3604 	mov	dptr,#_defaultATWait
   0AF6 E0                 3605 	movx	a,@dptr
   0AF7 FC                 3606 	mov	r4,a
   0AF8 A3                 3607 	inc	dptr
   0AF9 E0                 3608 	movx	a,@dptr
   0AFA FD                 3609 	mov	r5,a
   0AFB A3                 3610 	inc	dptr
   0AFC E0                 3611 	movx	a,@dptr
   0AFD A3                 3612 	inc	dptr
   0AFE E0                 3613 	movx	a,@dptr
   0AFF 8C 82              3614 	mov	dpl,r4
   0B01 8D 83              3615 	mov	dph,r5
   0B03 12s00r00           3616 	lcall	_delayMs
                    0B06   3617 	C$ydrip.c$445$2$3 ==.
                           3618 ;	apps/ydrip/ydrip.c:445: printf("file.writeline([[connG:send(\"HEAD / HTTP/1.1\\r\\nHost: google.com\\r\\n\Accept: */*\\r\\n\"..]])\r\n")	; delayMs(defaultATWait);
   0B06 74r77              3619 	mov	a,#__str_15
   0B08 C0 E0              3620 	push	acc
   0B0A 74s02              3621 	mov	a,#(__str_15 >> 8)
   0B0C C0 E0              3622 	push	acc
   0B0E 74 80              3623 	mov	a,#0x80
   0B10 C0 E0              3624 	push	acc
   0B12 12s00r00           3625 	lcall	_printf
   0B15 15 81              3626 	dec	sp
   0B17 15 81              3627 	dec	sp
   0B19 15 81              3628 	dec	sp
   0B1B 90s00r52           3629 	mov	dptr,#_defaultATWait
   0B1E E0                 3630 	movx	a,@dptr
   0B1F FC                 3631 	mov	r4,a
   0B20 A3                 3632 	inc	dptr
   0B21 E0                 3633 	movx	a,@dptr
   0B22 FD                 3634 	mov	r5,a
   0B23 A3                 3635 	inc	dptr
   0B24 E0                 3636 	movx	a,@dptr
   0B25 A3                 3637 	inc	dptr
   0B26 E0                 3638 	movx	a,@dptr
   0B27 8C 82              3639 	mov	dpl,r4
   0B29 8D 83              3640 	mov	dph,r5
   0B2B 12s00r00           3641 	lcall	_delayMs
                    0B2E   3642 	C$ydrip.c$446$2$3 ==.
                           3643 ;	apps/ydrip/ydrip.c:446: printf("file.writeline([[\"User-Agent: Mozilla/4.0 (compatible; esp8266 Lua;)\\r\\n\\r\\n\") end)]])\r\n")			; delayMs(defaultATWait);
   0B2E 74rD3              3644 	mov	a,#__str_16
   0B30 C0 E0              3645 	push	acc
   0B32 74s02              3646 	mov	a,#(__str_16 >> 8)
   0B34 C0 E0              3647 	push	acc
   0B36 74 80              3648 	mov	a,#0x80
   0B38 C0 E0              3649 	push	acc
   0B3A 12s00r00           3650 	lcall	_printf
   0B3D 15 81              3651 	dec	sp
   0B3F 15 81              3652 	dec	sp
   0B41 15 81              3653 	dec	sp
   0B43 90s00r52           3654 	mov	dptr,#_defaultATWait
   0B46 E0                 3655 	movx	a,@dptr
   0B47 FC                 3656 	mov	r4,a
   0B48 A3                 3657 	inc	dptr
   0B49 E0                 3658 	movx	a,@dptr
   0B4A FD                 3659 	mov	r5,a
   0B4B A3                 3660 	inc	dptr
   0B4C E0                 3661 	movx	a,@dptr
   0B4D A3                 3662 	inc	dptr
   0B4E E0                 3663 	movx	a,@dptr
   0B4F 8C 82              3664 	mov	dpl,r4
   0B51 8D 83              3665 	mov	dph,r5
   0B53 12s00r00           3666 	lcall	_delayMs
                    0B56   3667 	C$ydrip.c$448$2$3 ==.
                           3668 ;	apps/ydrip/ydrip.c:448: printf("file.writeline(\"connG:on(\\\"receive\\\", function(connG, payload)\")\r\n")														; delayMs(defaultATWait);
   0B56 74r2C              3669 	mov	a,#__str_17
   0B58 C0 E0              3670 	push	acc
   0B5A 74s03              3671 	mov	a,#(__str_17 >> 8)
   0B5C C0 E0              3672 	push	acc
   0B5E 74 80              3673 	mov	a,#0x80
   0B60 C0 E0              3674 	push	acc
   0B62 12s00r00           3675 	lcall	_printf
   0B65 15 81              3676 	dec	sp
   0B67 15 81              3677 	dec	sp
   0B69 15 81              3678 	dec	sp
   0B6B 90s00r52           3679 	mov	dptr,#_defaultATWait
   0B6E E0                 3680 	movx	a,@dptr
   0B6F FC                 3681 	mov	r4,a
   0B70 A3                 3682 	inc	dptr
   0B71 E0                 3683 	movx	a,@dptr
   0B72 FD                 3684 	mov	r5,a
   0B73 A3                 3685 	inc	dptr
   0B74 E0                 3686 	movx	a,@dptr
   0B75 A3                 3687 	inc	dptr
   0B76 E0                 3688 	movx	a,@dptr
   0B77 8C 82              3689 	mov	dpl,r4
   0B79 8D 83              3690 	mov	dph,r5
   0B7B 12s00r00           3691 	lcall	_delayMs
                    0B7E   3692 	C$ydrip.c$449$2$3 ==.
                           3693 ;	apps/ydrip/ydrip.c:449: printf("file.writeline(\"print(string.sub(payload,string.find(payload,\\\"Date:\\\")+18,string.find(payload,\\\"Date:\\\")+21)..\")\r\n")	; delayMs(defaultATWait);
   0B7E 74r6F              3694 	mov	a,#__str_18
   0B80 C0 E0              3695 	push	acc
   0B82 74s03              3696 	mov	a,#(__str_18 >> 8)
   0B84 C0 E0              3697 	push	acc
   0B86 74 80              3698 	mov	a,#0x80
   0B88 C0 E0              3699 	push	acc
   0B8A 12s00r00           3700 	lcall	_printf
   0B8D 15 81              3701 	dec	sp
   0B8F 15 81              3702 	dec	sp
   0B91 15 81              3703 	dec	sp
   0B93 90s00r52           3704 	mov	dptr,#_defaultATWait
   0B96 E0                 3705 	movx	a,@dptr
   0B97 FC                 3706 	mov	r4,a
   0B98 A3                 3707 	inc	dptr
   0B99 E0                 3708 	movx	a,@dptr
   0B9A FD                 3709 	mov	r5,a
   0B9B A3                 3710 	inc	dptr
   0B9C E0                 3711 	movx	a,@dptr
   0B9D A3                 3712 	inc	dptr
   0B9E E0                 3713 	movx	a,@dptr
   0B9F 8C 82              3714 	mov	dpl,r4
   0BA1 8D 83              3715 	mov	dph,r5
   0BA3 12s00r00           3716 	lcall	_delayMs
                    0BA6   3717 	C$ydrip.c$450$2$3 ==.
                           3718 ;	apps/ydrip/ydrip.c:450: printf("file.writeline(\"string.sub(payload,string.find(payload,\\\"Date:\\\")+15,string.find(payload,\\\"Date:\\\")+16)..\")\r\n")			; delayMs(defaultATWait);
   0BA6 74rE3              3719 	mov	a,#__str_19
   0BA8 C0 E0              3720 	push	acc
   0BAA 74s03              3721 	mov	a,#(__str_19 >> 8)
   0BAC C0 E0              3722 	push	acc
   0BAE 74 80              3723 	mov	a,#0x80
   0BB0 C0 E0              3724 	push	acc
   0BB2 12s00r00           3725 	lcall	_printf
   0BB5 15 81              3726 	dec	sp
   0BB7 15 81              3727 	dec	sp
   0BB9 15 81              3728 	dec	sp
   0BBB 90s00r52           3729 	mov	dptr,#_defaultATWait
   0BBE E0                 3730 	movx	a,@dptr
   0BBF FC                 3731 	mov	r4,a
   0BC0 A3                 3732 	inc	dptr
   0BC1 E0                 3733 	movx	a,@dptr
   0BC2 FD                 3734 	mov	r5,a
   0BC3 A3                 3735 	inc	dptr
   0BC4 E0                 3736 	movx	a,@dptr
   0BC5 A3                 3737 	inc	dptr
   0BC6 E0                 3738 	movx	a,@dptr
   0BC7 8C 82              3739 	mov	dpl,r4
   0BC9 8D 83              3740 	mov	dph,r5
   0BCB 12s00r00           3741 	lcall	_delayMs
                    0BCE   3742 	C$ydrip.c$451$2$3 ==.
                           3743 ;	apps/ydrip/ydrip.c:451: printf("file.writeline(\"string.sub(payload,string.find(payload,\\\"Date:\\\")+11,string.find(payload,\\\"Date:\\\")+12)..\")\r\n")			; delayMs(defaultATWait);
   0BCE 74r51              3744 	mov	a,#__str_20
   0BD0 C0 E0              3745 	push	acc
   0BD2 74s04              3746 	mov	a,#(__str_20 >> 8)
   0BD4 C0 E0              3747 	push	acc
   0BD6 74 80              3748 	mov	a,#0x80
   0BD8 C0 E0              3749 	push	acc
   0BDA 12s00r00           3750 	lcall	_printf
   0BDD 15 81              3751 	dec	sp
   0BDF 15 81              3752 	dec	sp
   0BE1 15 81              3753 	dec	sp
   0BE3 90s00r52           3754 	mov	dptr,#_defaultATWait
   0BE6 E0                 3755 	movx	a,@dptr
   0BE7 FC                 3756 	mov	r4,a
   0BE8 A3                 3757 	inc	dptr
   0BE9 E0                 3758 	movx	a,@dptr
   0BEA FD                 3759 	mov	r5,a
   0BEB A3                 3760 	inc	dptr
   0BEC E0                 3761 	movx	a,@dptr
   0BED A3                 3762 	inc	dptr
   0BEE E0                 3763 	movx	a,@dptr
   0BEF 8C 82              3764 	mov	dpl,r4
   0BF1 8D 83              3765 	mov	dph,r5
   0BF3 12s00r00           3766 	lcall	_delayMs
                    0BF6   3767 	C$ydrip.c$452$2$3 ==.
                           3768 ;	apps/ydrip/ydrip.c:452: printf("file.writeline(\"string.sub(payload,string.find(payload,\\\"Date:\\\")+23,string.find(payload,\\\"Date:\\\")+24)..\")\r\n")			; delayMs(defaultATWait);
   0BF6 74rBF              3769 	mov	a,#__str_21
   0BF8 C0 E0              3770 	push	acc
   0BFA 74s04              3771 	mov	a,#(__str_21 >> 8)
   0BFC C0 E0              3772 	push	acc
   0BFE 74 80              3773 	mov	a,#0x80
   0C00 C0 E0              3774 	push	acc
   0C02 12s00r00           3775 	lcall	_printf
   0C05 15 81              3776 	dec	sp
   0C07 15 81              3777 	dec	sp
   0C09 15 81              3778 	dec	sp
   0C0B 90s00r52           3779 	mov	dptr,#_defaultATWait
   0C0E E0                 3780 	movx	a,@dptr
   0C0F FC                 3781 	mov	r4,a
   0C10 A3                 3782 	inc	dptr
   0C11 E0                 3783 	movx	a,@dptr
   0C12 FD                 3784 	mov	r5,a
   0C13 A3                 3785 	inc	dptr
   0C14 E0                 3786 	movx	a,@dptr
   0C15 A3                 3787 	inc	dptr
   0C16 E0                 3788 	movx	a,@dptr
   0C17 8C 82              3789 	mov	dpl,r4
   0C19 8D 83              3790 	mov	dph,r5
   0C1B 12s00r00           3791 	lcall	_delayMs
                    0C1E   3792 	C$ydrip.c$453$2$3 ==.
                           3793 ;	apps/ydrip/ydrip.c:453: printf("file.writeline(\"string.sub(payload,string.find(payload,\\\"Date:\\\")+26,string.find(payload,\\\"Date:\\\")+27)..\")\r\n")			; delayMs(defaultATWait);
   0C1E 74r2D              3794 	mov	a,#__str_22
   0C20 C0 E0              3795 	push	acc
   0C22 74s05              3796 	mov	a,#(__str_22 >> 8)
   0C24 C0 E0              3797 	push	acc
   0C26 74 80              3798 	mov	a,#0x80
   0C28 C0 E0              3799 	push	acc
   0C2A 12s00r00           3800 	lcall	_printf
   0C2D 15 81              3801 	dec	sp
   0C2F 15 81              3802 	dec	sp
   0C31 15 81              3803 	dec	sp
   0C33 90s00r52           3804 	mov	dptr,#_defaultATWait
   0C36 E0                 3805 	movx	a,@dptr
   0C37 FC                 3806 	mov	r4,a
   0C38 A3                 3807 	inc	dptr
   0C39 E0                 3808 	movx	a,@dptr
   0C3A FD                 3809 	mov	r5,a
   0C3B A3                 3810 	inc	dptr
   0C3C E0                 3811 	movx	a,@dptr
   0C3D A3                 3812 	inc	dptr
   0C3E E0                 3813 	movx	a,@dptr
   0C3F 8C 82              3814 	mov	dpl,r4
   0C41 8D 83              3815 	mov	dph,r5
   0C43 12s00r00           3816 	lcall	_delayMs
                    0C46   3817 	C$ydrip.c$454$2$3 ==.
                           3818 ;	apps/ydrip/ydrip.c:454: printf("file.writeline(\"string.sub(payload,string.find(payload,\\\"Date:\\\")+29,string.find(payload,\\\"Date:\\\")+30)..\")\r\n")			; delayMs(defaultATWait);
   0C46 74r9B              3819 	mov	a,#__str_23
   0C48 C0 E0              3820 	push	acc
   0C4A 74s05              3821 	mov	a,#(__str_23 >> 8)
   0C4C C0 E0              3822 	push	acc
   0C4E 74 80              3823 	mov	a,#0x80
   0C50 C0 E0              3824 	push	acc
   0C52 12s00r00           3825 	lcall	_printf
   0C55 15 81              3826 	dec	sp
   0C57 15 81              3827 	dec	sp
   0C59 15 81              3828 	dec	sp
   0C5B 90s00r52           3829 	mov	dptr,#_defaultATWait
   0C5E E0                 3830 	movx	a,@dptr
   0C5F FC                 3831 	mov	r4,a
   0C60 A3                 3832 	inc	dptr
   0C61 E0                 3833 	movx	a,@dptr
   0C62 FD                 3834 	mov	r5,a
   0C63 A3                 3835 	inc	dptr
   0C64 E0                 3836 	movx	a,@dptr
   0C65 A3                 3837 	inc	dptr
   0C66 E0                 3838 	movx	a,@dptr
   0C67 8C 82              3839 	mov	dpl,r4
   0C69 8D 83              3840 	mov	dph,r5
   0C6B 12s00r00           3841 	lcall	_delayMs
                    0C6E   3842 	C$ydrip.c$455$2$3 ==.
                           3843 ;	apps/ydrip/ydrip.c:455: printf("file.writeline(\"string.sub(payload,string.find(payload,\\\"Date:\\\")+14,string.find(payload,\\\"Date:\\\")+16)..\\\"\\\\r\\\\n\\\")\")\r\n")	; delayMs(defaultATWait);
   0C6E 74r09              3844 	mov	a,#__str_24
   0C70 C0 E0              3845 	push	acc
   0C72 74s06              3846 	mov	a,#(__str_24 >> 8)
   0C74 C0 E0              3847 	push	acc
   0C76 74 80              3848 	mov	a,#0x80
   0C78 C0 E0              3849 	push	acc
   0C7A 12s00r00           3850 	lcall	_printf
   0C7D 15 81              3851 	dec	sp
   0C7F 15 81              3852 	dec	sp
   0C81 15 81              3853 	dec	sp
   0C83 90s00r52           3854 	mov	dptr,#_defaultATWait
   0C86 E0                 3855 	movx	a,@dptr
   0C87 FC                 3856 	mov	r4,a
   0C88 A3                 3857 	inc	dptr
   0C89 E0                 3858 	movx	a,@dptr
   0C8A FD                 3859 	mov	r5,a
   0C8B A3                 3860 	inc	dptr
   0C8C E0                 3861 	movx	a,@dptr
   0C8D A3                 3862 	inc	dptr
   0C8E E0                 3863 	movx	a,@dptr
   0C8F 8C 82              3864 	mov	dpl,r4
   0C91 8D 83              3865 	mov	dph,r5
   0C93 12s00r00           3866 	lcall	_delayMs
                    0C96   3867 	C$ydrip.c$458$2$3 ==.
                           3868 ;	apps/ydrip/ydrip.c:458: printf("file.writeline(\"connG:close()\")\r\n")																		; delayMs(defaultATWait);
   0C96 74r82              3869 	mov	a,#__str_25
   0C98 C0 E0              3870 	push	acc
   0C9A 74s06              3871 	mov	a,#(__str_25 >> 8)
   0C9C C0 E0              3872 	push	acc
   0C9E 74 80              3873 	mov	a,#0x80
   0CA0 C0 E0              3874 	push	acc
   0CA2 12s00r00           3875 	lcall	_printf
   0CA5 15 81              3876 	dec	sp
   0CA7 15 81              3877 	dec	sp
   0CA9 15 81              3878 	dec	sp
   0CAB 90s00r52           3879 	mov	dptr,#_defaultATWait
   0CAE E0                 3880 	movx	a,@dptr
   0CAF FC                 3881 	mov	r4,a
   0CB0 A3                 3882 	inc	dptr
   0CB1 E0                 3883 	movx	a,@dptr
   0CB2 FD                 3884 	mov	r5,a
   0CB3 A3                 3885 	inc	dptr
   0CB4 E0                 3886 	movx	a,@dptr
   0CB5 A3                 3887 	inc	dptr
   0CB6 E0                 3888 	movx	a,@dptr
   0CB7 8C 82              3889 	mov	dpl,r4
   0CB9 8D 83              3890 	mov	dph,r5
   0CBB 12s00r00           3891 	lcall	_delayMs
                    0CBE   3892 	C$ydrip.c$459$2$3 ==.
                           3893 ;	apps/ydrip/ydrip.c:459: printf("file.writeline(\"end)\")\r\n")																				; delayMs(defaultATWait);
   0CBE 74rA4              3894 	mov	a,#__str_26
   0CC0 C0 E0              3895 	push	acc
   0CC2 74s06              3896 	mov	a,#(__str_26 >> 8)
   0CC4 C0 E0              3897 	push	acc
   0CC6 74 80              3898 	mov	a,#0x80
   0CC8 C0 E0              3899 	push	acc
   0CCA 12s00r00           3900 	lcall	_printf
   0CCD 15 81              3901 	dec	sp
   0CCF 15 81              3902 	dec	sp
   0CD1 15 81              3903 	dec	sp
   0CD3 90s00r52           3904 	mov	dptr,#_defaultATWait
   0CD6 E0                 3905 	movx	a,@dptr
   0CD7 FC                 3906 	mov	r4,a
   0CD8 A3                 3907 	inc	dptr
   0CD9 E0                 3908 	movx	a,@dptr
   0CDA FD                 3909 	mov	r5,a
   0CDB A3                 3910 	inc	dptr
   0CDC E0                 3911 	movx	a,@dptr
   0CDD A3                 3912 	inc	dptr
   0CDE E0                 3913 	movx	a,@dptr
   0CDF 8C 82              3914 	mov	dpl,r4
   0CE1 8D 83              3915 	mov	dph,r5
   0CE3 12s00r00           3916 	lcall	_delayMs
                    0CE6   3917 	C$ydrip.c$460$2$3 ==.
                           3918 ;	apps/ydrip/ydrip.c:460: printf("file.writeline([[connG:connect(80,'google.com')]])\r\n")													; delayMs(defaultATWait);	// trigger output of date
   0CE6 74rBD              3919 	mov	a,#__str_27
   0CE8 C0 E0              3920 	push	acc
   0CEA 74s06              3921 	mov	a,#(__str_27 >> 8)
   0CEC C0 E0              3922 	push	acc
   0CEE 74 80              3923 	mov	a,#0x80
   0CF0 C0 E0              3924 	push	acc
   0CF2 12s00r00           3925 	lcall	_printf
   0CF5 15 81              3926 	dec	sp
   0CF7 15 81              3927 	dec	sp
   0CF9 15 81              3928 	dec	sp
   0CFB 90s00r52           3929 	mov	dptr,#_defaultATWait
   0CFE E0                 3930 	movx	a,@dptr
   0CFF FC                 3931 	mov	r4,a
   0D00 A3                 3932 	inc	dptr
   0D01 E0                 3933 	movx	a,@dptr
   0D02 FD                 3934 	mov	r5,a
   0D03 A3                 3935 	inc	dptr
   0D04 E0                 3936 	movx	a,@dptr
   0D05 A3                 3937 	inc	dptr
   0D06 E0                 3938 	movx	a,@dptr
   0D07 8C 82              3939 	mov	dpl,r4
   0D09 8D 83              3940 	mov	dph,r5
   0D0B 12s00r00           3941 	lcall	_delayMs
                    0D0E   3942 	C$ydrip.c$461$2$3 ==.
                           3943 ;	apps/ydrip/ydrip.c:461: printf("file.close()\r\n");																							; delayMs(defaultATWait);
   0D0E 74rA4              3944 	mov	a,#__str_10
   0D10 C0 E0              3945 	push	acc
   0D12 74s01              3946 	mov	a,#(__str_10 >> 8)
   0D14 C0 E0              3947 	push	acc
   0D16 74 80              3948 	mov	a,#0x80
   0D18 C0 E0              3949 	push	acc
   0D1A 12s00r00           3950 	lcall	_printf
   0D1D 15 81              3951 	dec	sp
   0D1F 15 81              3952 	dec	sp
   0D21 15 81              3953 	dec	sp
   0D23 90s00r52           3954 	mov	dptr,#_defaultATWait
   0D26 E0                 3955 	movx	a,@dptr
   0D27 FC                 3956 	mov	r4,a
   0D28 A3                 3957 	inc	dptr
   0D29 E0                 3958 	movx	a,@dptr
   0D2A FD                 3959 	mov	r5,a
   0D2B A3                 3960 	inc	dptr
   0D2C E0                 3961 	movx	a,@dptr
   0D2D A3                 3962 	inc	dptr
   0D2E E0                 3963 	movx	a,@dptr
   0D2F 8C 82              3964 	mov	dpl,r4
   0D31 8D 83              3965 	mov	dph,r5
   0D33 12s00r00           3966 	lcall	_delayMs
                    0D36   3967 	C$ydrip.c$463$2$3 ==.
                           3968 ;	apps/ydrip/ydrip.c:463: printf("print('connG ready\\r\\n')\r\n");																			; delayMs(defaultATWait);
   0D36 74rF2              3969 	mov	a,#__str_28
   0D38 C0 E0              3970 	push	acc
   0D3A 74s06              3971 	mov	a,#(__str_28 >> 8)
   0D3C C0 E0              3972 	push	acc
   0D3E 74 80              3973 	mov	a,#0x80
   0D40 C0 E0              3974 	push	acc
   0D42 12s00r00           3975 	lcall	_printf
   0D45 15 81              3976 	dec	sp
   0D47 15 81              3977 	dec	sp
   0D49 15 81              3978 	dec	sp
   0D4B 90s00r52           3979 	mov	dptr,#_defaultATWait
   0D4E E0                 3980 	movx	a,@dptr
   0D4F FC                 3981 	mov	r4,a
   0D50 A3                 3982 	inc	dptr
   0D51 E0                 3983 	movx	a,@dptr
   0D52 FD                 3984 	mov	r5,a
   0D53 A3                 3985 	inc	dptr
   0D54 E0                 3986 	movx	a,@dptr
   0D55 A3                 3987 	inc	dptr
   0D56 E0                 3988 	movx	a,@dptr
   0D57 8C 82              3989 	mov	dpl,r4
   0D59 8D 83              3990 	mov	dph,r5
   0D5B 12s00r00           3991 	lcall	_delayMs
                    0D5E   3992 	C$ydrip.c$467$2$3 ==.
                           3993 ;	apps/ydrip/ydrip.c:467: strcpy(c, (getFonaString())); // Clear buffer
   0D5E 12s03rBF           3994 	lcall	_getFonaString
   0D61 AE 82              3995 	mov	r6,dpl
   0D63 AF 83              3996 	mov	r7,dph
   0D65 78r00              3997 	mov	r0,#_strcpy_PARM_2
   0D67 EE                 3998 	mov	a,r6
   0D68 F2                 3999 	movx	@r0,a
   0D69 08                 4000 	inc	r0
   0D6A EF                 4001 	mov	a,r7
   0D6B F2                 4002 	movx	@r0,a
   0D6C 08                 4003 	inc	r0
   0D6D E4                 4004 	clr	a
   0D6E F2                 4005 	movx	@r0,a
   0D6F 90s00rB4           4006 	mov	dptr,#_enableESP_c_1_1
   0D72 75 F0 00           4007 	mov	b,#0x00
   0D75 12s00r00           4008 	lcall	_strcpy
                    0D78   4009 	C$ydrip.c$468$2$3 ==.
                           4010 ;	apps/ydrip/ydrip.c:468: printf("dofile(\"init.lua\")\r\n");; delayMs(3000);
   0D78 74r09              4011 	mov	a,#__str_1
   0D7A C0 E0              4012 	push	acc
   0D7C 74s00              4013 	mov	a,#(__str_1 >> 8)
   0D7E C0 E0              4014 	push	acc
   0D80 74 80              4015 	mov	a,#0x80
   0D82 C0 E0              4016 	push	acc
   0D84 12s00r00           4017 	lcall	_printf
   0D87 15 81              4018 	dec	sp
   0D89 15 81              4019 	dec	sp
   0D8B 15 81              4020 	dec	sp
   0D8D 90 0B B8           4021 	mov	dptr,#0x0BB8
   0D90 12s00r00           4022 	lcall	_delayMs
   0D93                    4023 00104$:
                    0D93   4024 	C$ydrip.c$472$1$1 ==.
                    0D93   4025 	XG$enableESP$0$0 ==.
   0D93 22                 4026 	ret
                           4027 ;------------------------------------------------------------
                           4028 ;Allocation info for local variables in function 'getWifiStatus'
                           4029 ;------------------------------------------------------------
                           4030 ;i                         Allocated with name '_getWifiStatus_i_1_1'
                           4031 ;intStatus                 Allocated with name '_getWifiStatus_intStatus_1_1'
                           4032 ;c                         Allocated with name '_getWifiStatus_c_1_1'
                           4033 ;------------------------------------------------------------
                    0D94   4034 	G$getWifiStatus$0$0 ==.
                    0D94   4035 	C$ydrip.c$474$1$1 ==.
                           4036 ;	apps/ydrip/ydrip.c:474: XDATA int16 getWifiStatus() {						// Read responses from ESP2866 module to see if there is a Wifi Connection (status 5)
                           4037 ;	-----------------------------------------
                           4038 ;	 function getWifiStatus
                           4039 ;	-----------------------------------------
   0D94                    4040 _getWifiStatus:
                    0D94   4041 	C$ydrip.c$477$1$1 ==.
                           4042 ;	apps/ydrip/ydrip.c:477: XDATA char c[80] = {0};
   0D94 90s01r0F           4043 	mov	dptr,#_getWifiStatus_c_1_1
   0D97 E4                 4044 	clr	a
   0D98 F0                 4045 	movx	@dptr,a
   0D99 90s01r10           4046 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0001)
   0D9C F0                 4047 	movx	@dptr,a
   0D9D 90s01r11           4048 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0002)
   0DA0 F0                 4049 	movx	@dptr,a
   0DA1 90s01r12           4050 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0003)
   0DA4 F0                 4051 	movx	@dptr,a
   0DA5 90s01r13           4052 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0004)
   0DA8 E4                 4053 	clr	a
   0DA9 F0                 4054 	movx	@dptr,a
   0DAA 90s01r14           4055 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0005)
   0DAD F0                 4056 	movx	@dptr,a
   0DAE 90s01r15           4057 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0006)
   0DB1 F0                 4058 	movx	@dptr,a
   0DB2 90s01r16           4059 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0007)
   0DB5 F0                 4060 	movx	@dptr,a
   0DB6 90s01r17           4061 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0008)
   0DB9 E4                 4062 	clr	a
   0DBA F0                 4063 	movx	@dptr,a
   0DBB 90s01r18           4064 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0009)
   0DBE F0                 4065 	movx	@dptr,a
   0DBF 90s01r19           4066 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x000a)
   0DC2 F0                 4067 	movx	@dptr,a
   0DC3 90s01r1A           4068 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x000b)
   0DC6 F0                 4069 	movx	@dptr,a
   0DC7 90s01r1B           4070 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x000c)
   0DCA E4                 4071 	clr	a
   0DCB F0                 4072 	movx	@dptr,a
   0DCC 90s01r1C           4073 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x000d)
   0DCF F0                 4074 	movx	@dptr,a
   0DD0 90s01r1D           4075 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x000e)
   0DD3 F0                 4076 	movx	@dptr,a
   0DD4 90s01r1E           4077 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x000f)
   0DD7 F0                 4078 	movx	@dptr,a
   0DD8 90s01r1F           4079 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0010)
   0DDB E4                 4080 	clr	a
   0DDC F0                 4081 	movx	@dptr,a
   0DDD 90s01r20           4082 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0011)
   0DE0 F0                 4083 	movx	@dptr,a
   0DE1 90s01r21           4084 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0012)
   0DE4 F0                 4085 	movx	@dptr,a
   0DE5 90s01r22           4086 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0013)
   0DE8 F0                 4087 	movx	@dptr,a
   0DE9 90s01r23           4088 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0014)
   0DEC E4                 4089 	clr	a
   0DED F0                 4090 	movx	@dptr,a
   0DEE 90s01r24           4091 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0015)
   0DF1 F0                 4092 	movx	@dptr,a
   0DF2 90s01r25           4093 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0016)
   0DF5 F0                 4094 	movx	@dptr,a
   0DF6 90s01r26           4095 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0017)
   0DF9 F0                 4096 	movx	@dptr,a
   0DFA 90s01r27           4097 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0018)
   0DFD E4                 4098 	clr	a
   0DFE F0                 4099 	movx	@dptr,a
   0DFF 90s01r28           4100 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0019)
   0E02 F0                 4101 	movx	@dptr,a
   0E03 90s01r29           4102 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x001a)
   0E06 F0                 4103 	movx	@dptr,a
   0E07 90s01r2A           4104 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x001b)
   0E0A F0                 4105 	movx	@dptr,a
   0E0B 90s01r2B           4106 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x001c)
   0E0E E4                 4107 	clr	a
   0E0F F0                 4108 	movx	@dptr,a
   0E10 90s01r2C           4109 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x001d)
   0E13 F0                 4110 	movx	@dptr,a
   0E14 90s01r2D           4111 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x001e)
   0E17 F0                 4112 	movx	@dptr,a
   0E18 90s01r2E           4113 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x001f)
   0E1B F0                 4114 	movx	@dptr,a
   0E1C 90s01r2F           4115 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0020)
   0E1F E4                 4116 	clr	a
   0E20 F0                 4117 	movx	@dptr,a
   0E21 90s01r30           4118 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0021)
   0E24 F0                 4119 	movx	@dptr,a
   0E25 90s01r31           4120 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0022)
   0E28 F0                 4121 	movx	@dptr,a
   0E29 90s01r32           4122 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0023)
   0E2C F0                 4123 	movx	@dptr,a
   0E2D 90s01r33           4124 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0024)
   0E30 E4                 4125 	clr	a
   0E31 F0                 4126 	movx	@dptr,a
   0E32 90s01r34           4127 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0025)
   0E35 F0                 4128 	movx	@dptr,a
   0E36 90s01r35           4129 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0026)
   0E39 F0                 4130 	movx	@dptr,a
   0E3A 90s01r36           4131 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0027)
   0E3D F0                 4132 	movx	@dptr,a
   0E3E 90s01r37           4133 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0028)
   0E41 E4                 4134 	clr	a
   0E42 F0                 4135 	movx	@dptr,a
   0E43 90s01r38           4136 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0029)
   0E46 F0                 4137 	movx	@dptr,a
   0E47 90s01r39           4138 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x002a)
   0E4A F0                 4139 	movx	@dptr,a
   0E4B 90s01r3A           4140 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x002b)
   0E4E F0                 4141 	movx	@dptr,a
   0E4F 90s01r3B           4142 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x002c)
   0E52 E4                 4143 	clr	a
   0E53 F0                 4144 	movx	@dptr,a
   0E54 90s01r3C           4145 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x002d)
   0E57 F0                 4146 	movx	@dptr,a
   0E58 90s01r3D           4147 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x002e)
   0E5B F0                 4148 	movx	@dptr,a
   0E5C 90s01r3E           4149 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x002f)
   0E5F F0                 4150 	movx	@dptr,a
   0E60 90s01r3F           4151 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0030)
   0E63 E4                 4152 	clr	a
   0E64 F0                 4153 	movx	@dptr,a
   0E65 90s01r40           4154 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0031)
   0E68 F0                 4155 	movx	@dptr,a
   0E69 90s01r41           4156 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0032)
   0E6C F0                 4157 	movx	@dptr,a
   0E6D 90s01r42           4158 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0033)
   0E70 F0                 4159 	movx	@dptr,a
   0E71 90s01r43           4160 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0034)
   0E74 E4                 4161 	clr	a
   0E75 F0                 4162 	movx	@dptr,a
   0E76 90s01r44           4163 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0035)
   0E79 F0                 4164 	movx	@dptr,a
   0E7A 90s01r45           4165 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0036)
   0E7D F0                 4166 	movx	@dptr,a
   0E7E 90s01r46           4167 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0037)
   0E81 F0                 4168 	movx	@dptr,a
   0E82 90s01r47           4169 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0038)
   0E85 E4                 4170 	clr	a
   0E86 F0                 4171 	movx	@dptr,a
   0E87 90s01r48           4172 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0039)
   0E8A F0                 4173 	movx	@dptr,a
   0E8B 90s01r49           4174 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x003a)
   0E8E F0                 4175 	movx	@dptr,a
   0E8F 90s01r4A           4176 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x003b)
   0E92 F0                 4177 	movx	@dptr,a
   0E93 90s01r4B           4178 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x003c)
   0E96 E4                 4179 	clr	a
   0E97 F0                 4180 	movx	@dptr,a
   0E98 90s01r4C           4181 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x003d)
   0E9B F0                 4182 	movx	@dptr,a
   0E9C 90s01r4D           4183 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x003e)
   0E9F F0                 4184 	movx	@dptr,a
   0EA0 90s01r4E           4185 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x003f)
   0EA3 F0                 4186 	movx	@dptr,a
   0EA4 90s01r4F           4187 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0040)
   0EA7 E4                 4188 	clr	a
   0EA8 F0                 4189 	movx	@dptr,a
   0EA9 90s01r50           4190 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0041)
   0EAC F0                 4191 	movx	@dptr,a
   0EAD 90s01r51           4192 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0042)
   0EB0 F0                 4193 	movx	@dptr,a
   0EB1 90s01r52           4194 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0043)
   0EB4 F0                 4195 	movx	@dptr,a
   0EB5 90s01r53           4196 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0044)
   0EB8 E4                 4197 	clr	a
   0EB9 F0                 4198 	movx	@dptr,a
   0EBA 90s01r54           4199 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0045)
   0EBD F0                 4200 	movx	@dptr,a
   0EBE 90s01r55           4201 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0046)
   0EC1 F0                 4202 	movx	@dptr,a
   0EC2 90s01r56           4203 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0047)
   0EC5 F0                 4204 	movx	@dptr,a
   0EC6 90s01r57           4205 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0048)
   0EC9 E4                 4206 	clr	a
   0ECA F0                 4207 	movx	@dptr,a
   0ECB 90s01r58           4208 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x0049)
   0ECE F0                 4209 	movx	@dptr,a
   0ECF 90s01r59           4210 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x004a)
   0ED2 F0                 4211 	movx	@dptr,a
   0ED3 90s01r5A           4212 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x004b)
   0ED6 F0                 4213 	movx	@dptr,a
   0ED7 90s01r5B           4214 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x004c)
   0EDA E4                 4215 	clr	a
   0EDB F0                 4216 	movx	@dptr,a
   0EDC 90s01r5C           4217 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x004d)
   0EDF F0                 4218 	movx	@dptr,a
   0EE0 90s01r5D           4219 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x004e)
   0EE3 F0                 4220 	movx	@dptr,a
   0EE4 90s01r5E           4221 	mov	dptr,#(_getWifiStatus_c_1_1 + 0x004f)
   0EE7 F0                 4222 	movx	@dptr,a
                    0EE8   4223 	C$ydrip.c$479$1$1 ==.
                           4224 ;	apps/ydrip/ydrip.c:479: c[0]=0;											// And mark string as empty
   0EE8 90s01r0F           4225 	mov	dptr,#_getWifiStatus_c_1_1
   0EEB E4                 4226 	clr	a
   0EEC F0                 4227 	movx	@dptr,a
                    0EED   4228 	C$ydrip.c$480$1$1 ==.
                           4229 ;	apps/ydrip/ydrip.c:480: clearRxErrors();
   0EED 12s03r47           4230 	lcall	_clearRxErrors
                    0EF0   4231 	C$ydrip.c$482$1$1 ==.
                           4232 ;	apps/ydrip/ydrip.c:482: boardService();
   0EF0 12s00r00           4233 	lcall	_boardService
                    0EF3   4234 	C$ydrip.c$483$1$1 ==.
                           4235 ;	apps/ydrip/ydrip.c:483: uartEnable();
   0EF3 12s00r2D           4236 	lcall	_uartEnable
                    0EF6   4237 	C$ydrip.c$484$1$1 ==.
                           4238 ;	apps/ydrip/ydrip.c:484: strcpy(c, (getFonaString()));					// Clear input buffer
   0EF6 12s03rBF           4239 	lcall	_getFonaString
   0EF9 AE 82              4240 	mov	r6,dpl
   0EFB AF 83              4241 	mov	r7,dph
   0EFD 78r00              4242 	mov	r0,#_strcpy_PARM_2
   0EFF EE                 4243 	mov	a,r6
   0F00 F2                 4244 	movx	@r0,a
   0F01 08                 4245 	inc	r0
   0F02 EF                 4246 	mov	a,r7
   0F03 F2                 4247 	movx	@r0,a
   0F04 08                 4248 	inc	r0
   0F05 E4                 4249 	clr	a
   0F06 F2                 4250 	movx	@r0,a
   0F07 90s01r0F           4251 	mov	dptr,#_getWifiStatus_c_1_1
   0F0A 75 F0 00           4252 	mov	b,#0x00
   0F0D 12s00r00           4253 	lcall	_strcpy
                    0F10   4254 	C$ydrip.c$486$1$1 ==.
                           4255 ;	apps/ydrip/ydrip.c:486: printf("print(wifi.sta.status())\r\n");
   0F10 74r0D              4256 	mov	a,#__str_29
   0F12 C0 E0              4257 	push	acc
   0F14 74s07              4258 	mov	a,#(__str_29 >> 8)
   0F16 C0 E0              4259 	push	acc
   0F18 74 80              4260 	mov	a,#0x80
   0F1A C0 E0              4261 	push	acc
   0F1C 12s00r00           4262 	lcall	_printf
   0F1F 15 81              4263 	dec	sp
   0F21 15 81              4264 	dec	sp
   0F23 15 81              4265 	dec	sp
                    0F25   4266 	C$ydrip.c$487$1$1 ==.
                           4267 ;	apps/ydrip/ydrip.c:487: delayMs(defaultATWait);
   0F25 90s00r52           4268 	mov	dptr,#_defaultATWait
   0F28 E0                 4269 	movx	a,@dptr
   0F29 FC                 4270 	mov	r4,a
   0F2A A3                 4271 	inc	dptr
   0F2B E0                 4272 	movx	a,@dptr
   0F2C FD                 4273 	mov	r5,a
   0F2D A3                 4274 	inc	dptr
   0F2E E0                 4275 	movx	a,@dptr
   0F2F A3                 4276 	inc	dptr
   0F30 E0                 4277 	movx	a,@dptr
   0F31 8C 82              4278 	mov	dpl,r4
   0F33 8D 83              4279 	mov	dph,r5
   0F35 12s00r00           4280 	lcall	_delayMs
                    0F38   4281 	C$ydrip.c$490$2$2 ==.
                           4282 ;	apps/ydrip/ydrip.c:490: while (uart1RxAvailable() > 0) {
   0F38                    4283 00101$:
   0F38 12s00r00           4284 	lcall	_uart1RxAvailable
   0F3B E5 82              4285 	mov	a,dpl
   0F3D 60 1C              4286 	jz	00103$
                    0F3F   4287 	C$ydrip.c$491$2$2 ==.
                           4288 ;	apps/ydrip/ydrip.c:491: strcpy(c, (getFonaString()));
   0F3F 12s03rBF           4289 	lcall	_getFonaString
   0F42 AE 82              4290 	mov	r6,dpl
   0F44 AF 83              4291 	mov	r7,dph
   0F46 78r00              4292 	mov	r0,#_strcpy_PARM_2
   0F48 EE                 4293 	mov	a,r6
   0F49 F2                 4294 	movx	@r0,a
   0F4A 08                 4295 	inc	r0
   0F4B EF                 4296 	mov	a,r7
   0F4C F2                 4297 	movx	@r0,a
   0F4D 08                 4298 	inc	r0
   0F4E E4                 4299 	clr	a
   0F4F F2                 4300 	movx	@r0,a
   0F50 90s01r0F           4301 	mov	dptr,#_getWifiStatus_c_1_1
   0F53 75 F0 00           4302 	mov	b,#0x00
   0F56 12s00r00           4303 	lcall	_strcpy
   0F59 80 DD              4304 	sjmp	00101$
   0F5B                    4305 00103$:
                    0F5B   4306 	C$ydrip.c$494$1$1 ==.
                           4307 ;	apps/ydrip/ydrip.c:494: i = strlen(c);
   0F5B 90s01r0F           4308 	mov	dptr,#_getWifiStatus_c_1_1
   0F5E 75 F0 00           4309 	mov	b,#0x00
   0F61 12s00r00           4310 	lcall	_strlen
   0F64 AE 82              4311 	mov	r6,dpl
   0F66 AF 83              4312 	mov	r7,dph
   0F68 90s01r0B           4313 	mov	dptr,#_getWifiStatus_i_1_1
   0F6B EE                 4314 	mov	a,r6
   0F6C F0                 4315 	movx	@dptr,a
   0F6D A3                 4316 	inc	dptr
   0F6E EF                 4317 	mov	a,r7
   0F6F F0                 4318 	movx	@dptr,a
                    0F70   4319 	C$ydrip.c$495$1$1 ==.
                           4320 ;	apps/ydrip/ydrip.c:495: if  (i>5) {
   0F70 C3                 4321 	clr	c
   0F71 74 05              4322 	mov	a,#0x05
   0F73 9E                 4323 	subb	a,r6
   0F74 E4                 4324 	clr	a
   0F75 64 80              4325 	xrl	a,#0x80
   0F77 8F F0              4326 	mov	b,r7
   0F79 63 F0 80           4327 	xrl	b,#0x80
   0F7C 95 F0              4328 	subb	a,b
   0F7E 50 24              4329 	jnc	00105$
                    0F80   4330 	C$ydrip.c$496$2$3 ==.
                           4331 ;	apps/ydrip/ydrip.c:496: intStatus=(((c[i-5])-'0'));					// Convert character to integer.  1 connecting, 5 connected, etc.
   0F80 EE                 4332 	mov	a,r6
   0F81 24 FB              4333 	add	a,#0xFB
   0F83 24r0F              4334 	add	a,#_getWifiStatus_c_1_1
   0F85 F5 82              4335 	mov	dpl,a
   0F87 E4                 4336 	clr	a
   0F88 34s01              4337 	addc	a,#(_getWifiStatus_c_1_1 >> 8)
   0F8A F5 83              4338 	mov	dph,a
   0F8C E0                 4339 	movx	a,@dptr
   0F8D FF                 4340 	mov	r7,a
   0F8E 33                 4341 	rlc	a
   0F8F 95 E0              4342 	subb	a,acc
   0F91 FE                 4343 	mov	r6,a
   0F92 EF                 4344 	mov	a,r7
   0F93 24 D0              4345 	add	a,#0xD0
   0F95 FF                 4346 	mov	r7,a
   0F96 EE                 4347 	mov	a,r6
   0F97 34 FF              4348 	addc	a,#0xFF
   0F99 FE                 4349 	mov	r6,a
   0F9A 90s01r0D           4350 	mov	dptr,#_getWifiStatus_intStatus_1_1
   0F9D EF                 4351 	mov	a,r7
   0F9E F0                 4352 	movx	@dptr,a
   0F9F A3                 4353 	inc	dptr
   0FA0 EE                 4354 	mov	a,r6
   0FA1 F0                 4355 	movx	@dptr,a
   0FA2 80 07              4356 	sjmp	00106$
   0FA4                    4357 00105$:
                    0FA4   4358 	C$ydrip.c$498$2$4 ==.
                           4359 ;	apps/ydrip/ydrip.c:498: intStatus=0;
   0FA4 90s01r0D           4360 	mov	dptr,#_getWifiStatus_intStatus_1_1
   0FA7 E4                 4361 	clr	a
   0FA8 F0                 4362 	movx	@dptr,a
   0FA9 A3                 4363 	inc	dptr
   0FAA F0                 4364 	movx	@dptr,a
   0FAB                    4365 00106$:
                    0FAB   4366 	C$ydrip.c$501$1$1 ==.
                           4367 ;	apps/ydrip/ydrip.c:501: return intStatus;
   0FAB 90s01r0D           4368 	mov	dptr,#_getWifiStatus_intStatus_1_1
   0FAE E0                 4369 	movx	a,@dptr
   0FAF FE                 4370 	mov	r6,a
   0FB0 A3                 4371 	inc	dptr
   0FB1 E0                 4372 	movx	a,@dptr
                    0FB2   4373 	C$ydrip.c$502$1$1 ==.
                    0FB2   4374 	XG$getWifiStatus$0$0 ==.
   0FB2 8E 82              4375 	mov	dpl,r6
   0FB4 F5 83              4376 	mov	dph,a
   0FB6 22                 4377 	ret
                           4378 ;------------------------------------------------------------
                           4379 ;Allocation info for local variables in function 'wifiFlash'
                           4380 ;------------------------------------------------------------
                    0FB7   4381 	G$wifiFlash$0$0 ==.
                    0FB7   4382 	C$ydrip.c$504$1$1 ==.
                           4383 ;	apps/ydrip/ydrip.c:504: void wifiFlash() {									// Should probably tighten this up with a loop and check for WiFi status every second
                           4384 ;	-----------------------------------------
                           4385 ;	 function wifiFlash
                           4386 ;	-----------------------------------------
   0FB7                    4387 _wifiFlash:
                    0FB7   4388 	C$ydrip.c$505$1$1 ==.
                           4389 ;	apps/ydrip/ydrip.c:505: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (Flash)
   0FB7 74r28              4390 	mov	a,#__str_30
   0FB9 C0 E0              4391 	push	acc
   0FBB 74s07              4392 	mov	a,#(__str_30 >> 8)
   0FBD C0 E0              4393 	push	acc
   0FBF 74 80              4394 	mov	a,#0x80
   0FC1 C0 E0              4395 	push	acc
   0FC3 12s00r00           4396 	lcall	_printf
   0FC6 15 81              4397 	dec	sp
   0FC8 15 81              4398 	dec	sp
   0FCA 15 81              4399 	dec	sp
                    0FCC   4400 	C$ydrip.c$506$1$1 ==.
                           4401 ;	apps/ydrip/ydrip.c:506: delayMs(500);
   0FCC 90 01 F4           4402 	mov	dptr,#0x01F4
   0FCF 12s00r00           4403 	lcall	_delayMs
                    0FD2   4404 	C$ydrip.c$507$1$1 ==.
                           4405 ;	apps/ydrip/ydrip.c:507: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED (Flash)
   0FD2 74r43              4406 	mov	a,#__str_31
   0FD4 C0 E0              4407 	push	acc
   0FD6 74s07              4408 	mov	a,#(__str_31 >> 8)
   0FD8 C0 E0              4409 	push	acc
   0FDA 74 80              4410 	mov	a,#0x80
   0FDC C0 E0              4411 	push	acc
   0FDE 12s00r00           4412 	lcall	_printf
   0FE1 15 81              4413 	dec	sp
   0FE3 15 81              4414 	dec	sp
   0FE5 15 81              4415 	dec	sp
                    0FE7   4416 	C$ydrip.c$508$1$1 ==.
                           4417 ;	apps/ydrip/ydrip.c:508: delayMs(500);
   0FE7 90 01 F4           4418 	mov	dptr,#0x01F4
   0FEA 12s00r00           4419 	lcall	_delayMs
                    0FED   4420 	C$ydrip.c$509$1$1 ==.
                           4421 ;	apps/ydrip/ydrip.c:509: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (Flash)
   0FED 74r28              4422 	mov	a,#__str_30
   0FEF C0 E0              4423 	push	acc
   0FF1 74s07              4424 	mov	a,#(__str_30 >> 8)
   0FF3 C0 E0              4425 	push	acc
   0FF5 74 80              4426 	mov	a,#0x80
   0FF7 C0 E0              4427 	push	acc
   0FF9 12s00r00           4428 	lcall	_printf
   0FFC 15 81              4429 	dec	sp
   0FFE 15 81              4430 	dec	sp
   1000 15 81              4431 	dec	sp
                    1002   4432 	C$ydrip.c$510$1$1 ==.
                           4433 ;	apps/ydrip/ydrip.c:510: delayMs(500);
   1002 90 01 F4           4434 	mov	dptr,#0x01F4
   1005 12s00r00           4435 	lcall	_delayMs
                    1008   4436 	C$ydrip.c$511$1$1 ==.
                           4437 ;	apps/ydrip/ydrip.c:511: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED (Flash)
   1008 74r43              4438 	mov	a,#__str_31
   100A C0 E0              4439 	push	acc
   100C 74s07              4440 	mov	a,#(__str_31 >> 8)
   100E C0 E0              4441 	push	acc
   1010 74 80              4442 	mov	a,#0x80
   1012 C0 E0              4443 	push	acc
   1014 12s00r00           4444 	lcall	_printf
   1017 15 81              4445 	dec	sp
   1019 15 81              4446 	dec	sp
   101B 15 81              4447 	dec	sp
                    101D   4448 	C$ydrip.c$512$1$1 ==.
                           4449 ;	apps/ydrip/ydrip.c:512: delayMs(500);
   101D 90 01 F4           4450 	mov	dptr,#0x01F4
   1020 12s00r00           4451 	lcall	_delayMs
                    1023   4452 	C$ydrip.c$513$1$1 ==.
                           4453 ;	apps/ydrip/ydrip.c:513: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (Flash)
   1023 74r28              4454 	mov	a,#__str_30
   1025 C0 E0              4455 	push	acc
   1027 74s07              4456 	mov	a,#(__str_30 >> 8)
   1029 C0 E0              4457 	push	acc
   102B 74 80              4458 	mov	a,#0x80
   102D C0 E0              4459 	push	acc
   102F 12s00r00           4460 	lcall	_printf
   1032 15 81              4461 	dec	sp
   1034 15 81              4462 	dec	sp
   1036 15 81              4463 	dec	sp
                    1038   4464 	C$ydrip.c$514$1$1 ==.
                           4465 ;	apps/ydrip/ydrip.c:514: delayMs(500);
   1038 90 01 F4           4466 	mov	dptr,#0x01F4
   103B 12s00r00           4467 	lcall	_delayMs
                    103E   4468 	C$ydrip.c$515$1$1 ==.
                           4469 ;	apps/ydrip/ydrip.c:515: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED (Flash)
   103E 74r43              4470 	mov	a,#__str_31
   1040 C0 E0              4471 	push	acc
   1042 74s07              4472 	mov	a,#(__str_31 >> 8)
   1044 C0 E0              4473 	push	acc
   1046 74 80              4474 	mov	a,#0x80
   1048 C0 E0              4475 	push	acc
   104A 12s00r00           4476 	lcall	_printf
   104D 15 81              4477 	dec	sp
   104F 15 81              4478 	dec	sp
   1051 15 81              4479 	dec	sp
                    1053   4480 	C$ydrip.c$516$1$1 ==.
                           4481 ;	apps/ydrip/ydrip.c:516: delayMs(500);
   1053 90 01 F4           4482 	mov	dptr,#0x01F4
   1056 12s00r00           4483 	lcall	_delayMs
                    1059   4484 	C$ydrip.c$517$1$1 ==.
                           4485 ;	apps/ydrip/ydrip.c:517: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (Flash)
   1059 74r28              4486 	mov	a,#__str_30
   105B C0 E0              4487 	push	acc
   105D 74s07              4488 	mov	a,#(__str_30 >> 8)
   105F C0 E0              4489 	push	acc
   1061 74 80              4490 	mov	a,#0x80
   1063 C0 E0              4491 	push	acc
   1065 12s00r00           4492 	lcall	_printf
   1068 15 81              4493 	dec	sp
   106A 15 81              4494 	dec	sp
   106C 15 81              4495 	dec	sp
                    106E   4496 	C$ydrip.c$518$1$1 ==.
                           4497 ;	apps/ydrip/ydrip.c:518: delayMs(500);
   106E 90 01 F4           4498 	mov	dptr,#0x01F4
   1071 12s00r00           4499 	lcall	_delayMs
                    1074   4500 	C$ydrip.c$519$1$1 ==.
                           4501 ;	apps/ydrip/ydrip.c:519: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED (Flash)
   1074 74r43              4502 	mov	a,#__str_31
   1076 C0 E0              4503 	push	acc
   1078 74s07              4504 	mov	a,#(__str_31 >> 8)
   107A C0 E0              4505 	push	acc
   107C 74 80              4506 	mov	a,#0x80
   107E C0 E0              4507 	push	acc
   1080 12s00r00           4508 	lcall	_printf
   1083 15 81              4509 	dec	sp
   1085 15 81              4510 	dec	sp
   1087 15 81              4511 	dec	sp
                    1089   4512 	C$ydrip.c$520$1$1 ==.
                           4513 ;	apps/ydrip/ydrip.c:520: delayMs(500);
   1089 90 01 F4           4514 	mov	dptr,#0x01F4
   108C 12s00r00           4515 	lcall	_delayMs
                    108F   4516 	C$ydrip.c$521$1$1 ==.
                           4517 ;	apps/ydrip/ydrip.c:521: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (Flash)
   108F 74r28              4518 	mov	a,#__str_30
   1091 C0 E0              4519 	push	acc
   1093 74s07              4520 	mov	a,#(__str_30 >> 8)
   1095 C0 E0              4521 	push	acc
   1097 74 80              4522 	mov	a,#0x80
   1099 C0 E0              4523 	push	acc
   109B 12s00r00           4524 	lcall	_printf
   109E 15 81              4525 	dec	sp
   10A0 15 81              4526 	dec	sp
   10A2 15 81              4527 	dec	sp
                    10A4   4528 	C$ydrip.c$522$1$1 ==.
                           4529 ;	apps/ydrip/ydrip.c:522: delayMs(500);
   10A4 90 01 F4           4530 	mov	dptr,#0x01F4
   10A7 12s00r00           4531 	lcall	_delayMs
                    10AA   4532 	C$ydrip.c$523$1$1 ==.
                           4533 ;	apps/ydrip/ydrip.c:523: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED (Flash)
   10AA 74r43              4534 	mov	a,#__str_31
   10AC C0 E0              4535 	push	acc
   10AE 74s07              4536 	mov	a,#(__str_31 >> 8)
   10B0 C0 E0              4537 	push	acc
   10B2 74 80              4538 	mov	a,#0x80
   10B4 C0 E0              4539 	push	acc
   10B6 12s00r00           4540 	lcall	_printf
   10B9 15 81              4541 	dec	sp
   10BB 15 81              4542 	dec	sp
   10BD 15 81              4543 	dec	sp
                    10BF   4544 	C$ydrip.c$524$1$1 ==.
                           4545 ;	apps/ydrip/ydrip.c:524: delayMs(500);
   10BF 90 01 F4           4546 	mov	dptr,#0x01F4
   10C2 12s00r00           4547 	lcall	_delayMs
                    10C5   4548 	C$ydrip.c$525$1$1 ==.
                           4549 ;	apps/ydrip/ydrip.c:525: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (Flash)
   10C5 74r28              4550 	mov	a,#__str_30
   10C7 C0 E0              4551 	push	acc
   10C9 74s07              4552 	mov	a,#(__str_30 >> 8)
   10CB C0 E0              4553 	push	acc
   10CD 74 80              4554 	mov	a,#0x80
   10CF C0 E0              4555 	push	acc
   10D1 12s00r00           4556 	lcall	_printf
   10D4 15 81              4557 	dec	sp
   10D6 15 81              4558 	dec	sp
   10D8 15 81              4559 	dec	sp
                    10DA   4560 	C$ydrip.c$526$1$1 ==.
                           4561 ;	apps/ydrip/ydrip.c:526: delayMs(500);
   10DA 90 01 F4           4562 	mov	dptr,#0x01F4
   10DD 12s00r00           4563 	lcall	_delayMs
                    10E0   4564 	C$ydrip.c$527$1$1 ==.
                           4565 ;	apps/ydrip/ydrip.c:527: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED (Flash)
   10E0 74r43              4566 	mov	a,#__str_31
   10E2 C0 E0              4567 	push	acc
   10E4 74s07              4568 	mov	a,#(__str_31 >> 8)
   10E6 C0 E0              4569 	push	acc
   10E8 74 80              4570 	mov	a,#0x80
   10EA C0 E0              4571 	push	acc
   10EC 12s00r00           4572 	lcall	_printf
   10EF 15 81              4573 	dec	sp
   10F1 15 81              4574 	dec	sp
   10F3 15 81              4575 	dec	sp
                    10F5   4576 	C$ydrip.c$528$1$1 ==.
                           4577 ;	apps/ydrip/ydrip.c:528: delayMs(500);
   10F5 90 01 F4           4578 	mov	dptr,#0x01F4
   10F8 12s00r00           4579 	lcall	_delayMs
                    10FB   4580 	C$ydrip.c$529$1$1 ==.
                    10FB   4581 	XG$wifiFlash$0$0 ==.
   10FB 22                 4582 	ret
                           4583 ;------------------------------------------------------------
                           4584 ;Allocation info for local variables in function 'wifiConnect'
                           4585 ;------------------------------------------------------------
                           4586 ;atString                  Allocated with name '_wifiConnect_atString_1_1'
                           4587 ;intWifiStatus             Allocated with name '_wifiConnect_intWifiStatus_1_1'
                           4588 ;------------------------------------------------------------
                    10FC   4589 	G$wifiConnect$0$0 ==.
                    10FC   4590 	C$ydrip.c$531$1$1 ==.
                           4591 ;	apps/ydrip/ydrip.c:531: BIT wifiConnect() {
                           4592 ;	-----------------------------------------
                           4593 ;	 function wifiConnect
                           4594 ;	-----------------------------------------
   10FC                    4595 _wifiConnect:
                    10FC   4596 	C$ydrip.c$535$1$1 ==.
                           4597 ;	apps/ydrip/ydrip.c:535: uartEnable();													// Enable the serial connection
   10FC 12s00r2D           4598 	lcall	_uartEnable
                    10FF   4599 	C$ydrip.c$536$1$1 ==.
                           4600 ;	apps/ydrip/ydrip.c:536: delayMs(100);													// Wait for it to open
   10FF 90 00 64           4601 	mov	dptr,#0x0064
   1102 12s00r00           4602 	lcall	_delayMs
                    1105   4603 	C$ydrip.c$538$1$1 ==.
                           4604 ;	apps/ydrip/ydrip.c:538: printf("gpio.write(4, gpio.LOW)\r\n");							// Switch on Blue LED
   1105 74r43              4605 	mov	a,#__str_31
   1107 C0 E0              4606 	push	acc
   1109 74s07              4607 	mov	a,#(__str_31 >> 8)
   110B C0 E0              4608 	push	acc
   110D 74 80              4609 	mov	a,#0x80
   110F C0 E0              4610 	push	acc
   1111 12s00r00           4611 	lcall	_printf
   1114 15 81              4612 	dec	sp
   1116 15 81              4613 	dec	sp
   1118 15 81              4614 	dec	sp
                    111A   4615 	C$ydrip.c$539$1$1 ==.
                           4616 ;	apps/ydrip/ydrip.c:539: delayMs(defaultATWait);
   111A 90s00r52           4617 	mov	dptr,#_defaultATWait
   111D E0                 4618 	movx	a,@dptr
   111E FC                 4619 	mov	r4,a
   111F A3                 4620 	inc	dptr
   1120 E0                 4621 	movx	a,@dptr
   1121 FD                 4622 	mov	r5,a
   1122 A3                 4623 	inc	dptr
   1123 E0                 4624 	movx	a,@dptr
   1124 A3                 4625 	inc	dptr
   1125 E0                 4626 	movx	a,@dptr
   1126 8C 82              4627 	mov	dpl,r4
   1128 8D 83              4628 	mov	dph,r5
   112A 12s00r00           4629 	lcall	_delayMs
                    112D   4630 	C$ydrip.c$541$1$1 ==.
                           4631 ;	apps/ydrip/ydrip.c:541: printf("wifi.sta.connect()\r\n");
   112D 74r5D              4632 	mov	a,#__str_32
   112F C0 E0              4633 	push	acc
   1131 74s07              4634 	mov	a,#(__str_32 >> 8)
   1133 C0 E0              4635 	push	acc
   1135 74 80              4636 	mov	a,#0x80
   1137 C0 E0              4637 	push	acc
   1139 12s00r00           4638 	lcall	_printf
   113C 15 81              4639 	dec	sp
   113E 15 81              4640 	dec	sp
   1140 15 81              4641 	dec	sp
                    1142   4642 	C$ydrip.c$542$1$1 ==.
                           4643 ;	apps/ydrip/ydrip.c:542: wifiFlash();													// Should probably loop here and check every second rather than waiting for 5
   1142 12s0FrB7           4644 	lcall	_wifiFlash
                    1145   4645 	C$ydrip.c$544$1$1 ==.
                           4646 ;	apps/ydrip/ydrip.c:544: intWifiStatus = getWifiStatus();
   1145 12s0Dr94           4647 	lcall	_getWifiStatus
   1148 AE 82              4648 	mov	r6,dpl
   114A AF 83              4649 	mov	r7,dph
   114C 90s01r87           4650 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   114F EE                 4651 	mov	a,r6
   1150 F0                 4652 	movx	@dptr,a
   1151 A3                 4653 	inc	dptr
   1152 EF                 4654 	mov	a,r7
   1153 F0                 4655 	movx	@dptr,a
                    1154   4656 	C$ydrip.c$549$1$1 ==.
                           4657 ;	apps/ydrip/ydrip.c:549: if (intWifiStatus != 5) {
   1154 BE 05 05           4658 	cjne	r6,#0x05,00122$
   1157 BF 00 02           4659 	cjne	r7,#0x00,00122$
   115A 80 50              4660 	sjmp	00102$
   115C                    4661 00122$:
                    115C   4662 	C$ydrip.c$550$2$2 ==.
                           4663 ;	apps/ydrip/ydrip.c:550: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (to make it flash)
   115C 74r28              4664 	mov	a,#__str_30
   115E C0 E0              4665 	push	acc
   1160 74s07              4666 	mov	a,#(__str_30 >> 8)
   1162 C0 E0              4667 	push	acc
   1164 74 80              4668 	mov	a,#0x80
   1166 C0 E0              4669 	push	acc
   1168 12s00r00           4670 	lcall	_printf
   116B 15 81              4671 	dec	sp
   116D 15 81              4672 	dec	sp
   116F 15 81              4673 	dec	sp
                    1171   4674 	C$ydrip.c$551$2$2 ==.
                           4675 ;	apps/ydrip/ydrip.c:551: delayMs(defaultATWait);
   1171 90s00r52           4676 	mov	dptr,#_defaultATWait
   1174 E0                 4677 	movx	a,@dptr
   1175 FC                 4678 	mov	r4,a
   1176 A3                 4679 	inc	dptr
   1177 E0                 4680 	movx	a,@dptr
   1178 FD                 4681 	mov	r5,a
   1179 A3                 4682 	inc	dptr
   117A E0                 4683 	movx	a,@dptr
   117B A3                 4684 	inc	dptr
   117C E0                 4685 	movx	a,@dptr
   117D 8C 82              4686 	mov	dpl,r4
   117F 8D 83              4687 	mov	dph,r5
   1181 12s00r00           4688 	lcall	_delayMs
                    1184   4689 	C$ydrip.c$552$2$2 ==.
                           4690 ;	apps/ydrip/ydrip.c:552: printf("wifi.sta.config(\"Intersect_1\",\"Alongkey123\")  wifi.sta.connect()\r\n");	// Connect to AP1
   1184 74r72              4691 	mov	a,#__str_33
   1186 C0 E0              4692 	push	acc
   1188 74s07              4693 	mov	a,#(__str_33 >> 8)
   118A C0 E0              4694 	push	acc
   118C 74 80              4695 	mov	a,#0x80
   118E C0 E0              4696 	push	acc
   1190 12s00r00           4697 	lcall	_printf
   1193 15 81              4698 	dec	sp
   1195 15 81              4699 	dec	sp
   1197 15 81              4700 	dec	sp
                    1199   4701 	C$ydrip.c$553$2$2 ==.
                           4702 ;	apps/ydrip/ydrip.c:553: wifiFlash();
   1199 12s0FrB7           4703 	lcall	_wifiFlash
                    119C   4704 	C$ydrip.c$554$2$2 ==.
                           4705 ;	apps/ydrip/ydrip.c:554: intWifiStatus = getWifiStatus();
   119C 12s0Dr94           4706 	lcall	_getWifiStatus
   119F E5 82              4707 	mov	a,dpl
   11A1 85 83 F0           4708 	mov	b,dph
   11A4 90s01r87           4709 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   11A7 F0                 4710 	movx	@dptr,a
   11A8 A3                 4711 	inc	dptr
   11A9 E5 F0              4712 	mov	a,b
   11AB F0                 4713 	movx	@dptr,a
   11AC                    4714 00102$:
                    11AC   4715 	C$ydrip.c$561$1$1 ==.
                           4716 ;	apps/ydrip/ydrip.c:561: if (intWifiStatus != 5) {
   11AC 90s01r87           4717 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   11AF E0                 4718 	movx	a,@dptr
   11B0 FE                 4719 	mov	r6,a
   11B1 A3                 4720 	inc	dptr
   11B2 E0                 4721 	movx	a,@dptr
   11B3 FF                 4722 	mov	r7,a
   11B4 BE 05 05           4723 	cjne	r6,#0x05,00123$
   11B7 BF 00 02           4724 	cjne	r7,#0x00,00123$
   11BA 80 53              4725 	sjmp	00104$
   11BC                    4726 00123$:
                    11BC   4727 	C$ydrip.c$562$2$3 ==.
                           4728 ;	apps/ydrip/ydrip.c:562: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED
   11BC 74r43              4729 	mov	a,#__str_31
   11BE C0 E0              4730 	push	acc
   11C0 74s07              4731 	mov	a,#(__str_31 >> 8)
   11C2 C0 E0              4732 	push	acc
   11C4 74 80              4733 	mov	a,#0x80
   11C6 C0 E0              4734 	push	acc
   11C8 12s00r00           4735 	lcall	_printf
   11CB 15 81              4736 	dec	sp
   11CD 15 81              4737 	dec	sp
   11CF 15 81              4738 	dec	sp
                    11D1   4739 	C$ydrip.c$563$2$3 ==.
                           4740 ;	apps/ydrip/ydrip.c:563: delayMs(defaultATWait);
   11D1 90s00r52           4741 	mov	dptr,#_defaultATWait
   11D4 E0                 4742 	movx	a,@dptr
   11D5 FC                 4743 	mov	r4,a
   11D6 A3                 4744 	inc	dptr
   11D7 E0                 4745 	movx	a,@dptr
   11D8 FD                 4746 	mov	r5,a
   11D9 A3                 4747 	inc	dptr
   11DA E0                 4748 	movx	a,@dptr
   11DB A3                 4749 	inc	dptr
   11DC E0                 4750 	movx	a,@dptr
   11DD 8C 82              4751 	mov	dpl,r4
   11DF 8D 83              4752 	mov	dph,r5
   11E1 12s00r00           4753 	lcall	_delayMs
                    11E4   4754 	C$ydrip.c$564$2$3 ==.
                           4755 ;	apps/ydrip/ydrip.c:564: printf("wifi.sta.config(\"TRENDnet653{downstairs}\",\"stonebr!dge\")  wifi.sta.connect()\r\n");	// Connect to AP1
   11E4 74rB5              4756 	mov	a,#__str_34
   11E6 C0 E0              4757 	push	acc
   11E8 74s07              4758 	mov	a,#(__str_34 >> 8)
   11EA C0 E0              4759 	push	acc
   11EC 74 80              4760 	mov	a,#0x80
   11EE C0 E0              4761 	push	acc
   11F0 12s00r00           4762 	lcall	_printf
   11F3 15 81              4763 	dec	sp
   11F5 15 81              4764 	dec	sp
   11F7 15 81              4765 	dec	sp
                    11F9   4766 	C$ydrip.c$565$2$3 ==.
                           4767 ;	apps/ydrip/ydrip.c:565: wifiFlash();
   11F9 12s0FrB7           4768 	lcall	_wifiFlash
                    11FC   4769 	C$ydrip.c$566$2$3 ==.
                           4770 ;	apps/ydrip/ydrip.c:566: wifiFlash();
   11FC 12s0FrB7           4771 	lcall	_wifiFlash
                    11FF   4772 	C$ydrip.c$567$2$3 ==.
                           4773 ;	apps/ydrip/ydrip.c:567: intWifiStatus = getWifiStatus();
   11FF 12s0Dr94           4774 	lcall	_getWifiStatus
   1202 E5 82              4775 	mov	a,dpl
   1204 85 83 F0           4776 	mov	b,dph
   1207 90s01r87           4777 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   120A F0                 4778 	movx	@dptr,a
   120B A3                 4779 	inc	dptr
   120C E5 F0              4780 	mov	a,b
   120E F0                 4781 	movx	@dptr,a
   120F                    4782 00104$:
                    120F   4783 	C$ydrip.c$571$1$1 ==.
                           4784 ;	apps/ydrip/ydrip.c:571: if (intWifiStatus != 5) {
   120F 90s01r87           4785 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   1212 E0                 4786 	movx	a,@dptr
   1213 FE                 4787 	mov	r6,a
   1214 A3                 4788 	inc	dptr
   1215 E0                 4789 	movx	a,@dptr
   1216 FF                 4790 	mov	r7,a
   1217 BE 05 05           4791 	cjne	r6,#0x05,00124$
   121A BF 00 02           4792 	cjne	r7,#0x00,00124$
   121D 80 53              4793 	sjmp	00106$
   121F                    4794 00124$:
                    121F   4795 	C$ydrip.c$572$2$4 ==.
                           4796 ;	apps/ydrip/ydrip.c:572: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED
   121F 74r43              4797 	mov	a,#__str_31
   1221 C0 E0              4798 	push	acc
   1223 74s07              4799 	mov	a,#(__str_31 >> 8)
   1225 C0 E0              4800 	push	acc
   1227 74 80              4801 	mov	a,#0x80
   1229 C0 E0              4802 	push	acc
   122B 12s00r00           4803 	lcall	_printf
   122E 15 81              4804 	dec	sp
   1230 15 81              4805 	dec	sp
   1232 15 81              4806 	dec	sp
                    1234   4807 	C$ydrip.c$573$2$4 ==.
                           4808 ;	apps/ydrip/ydrip.c:573: delayMs(defaultATWait);
   1234 90s00r52           4809 	mov	dptr,#_defaultATWait
   1237 E0                 4810 	movx	a,@dptr
   1238 FC                 4811 	mov	r4,a
   1239 A3                 4812 	inc	dptr
   123A E0                 4813 	movx	a,@dptr
   123B FD                 4814 	mov	r5,a
   123C A3                 4815 	inc	dptr
   123D E0                 4816 	movx	a,@dptr
   123E A3                 4817 	inc	dptr
   123F E0                 4818 	movx	a,@dptr
   1240 8C 82              4819 	mov	dpl,r4
   1242 8D 83              4820 	mov	dph,r5
   1244 12s00r00           4821 	lcall	_delayMs
                    1247   4822 	C$ydrip.c$574$2$4 ==.
                           4823 ;	apps/ydrip/ydrip.c:574: printf("wifi.sta.config(\"TRENDnet653{upstairs}\",\"stonebr!dge\")  wifi.sta.connect()\r\n");	// Connect to AP1
   1247 74r04              4824 	mov	a,#__str_35
   1249 C0 E0              4825 	push	acc
   124B 74s08              4826 	mov	a,#(__str_35 >> 8)
   124D C0 E0              4827 	push	acc
   124F 74 80              4828 	mov	a,#0x80
   1251 C0 E0              4829 	push	acc
   1253 12s00r00           4830 	lcall	_printf
   1256 15 81              4831 	dec	sp
   1258 15 81              4832 	dec	sp
   125A 15 81              4833 	dec	sp
                    125C   4834 	C$ydrip.c$575$2$4 ==.
                           4835 ;	apps/ydrip/ydrip.c:575: wifiFlash();
   125C 12s0FrB7           4836 	lcall	_wifiFlash
                    125F   4837 	C$ydrip.c$576$2$4 ==.
                           4838 ;	apps/ydrip/ydrip.c:576: wifiFlash();
   125F 12s0FrB7           4839 	lcall	_wifiFlash
                    1262   4840 	C$ydrip.c$577$2$4 ==.
                           4841 ;	apps/ydrip/ydrip.c:577: intWifiStatus = getWifiStatus();
   1262 12s0Dr94           4842 	lcall	_getWifiStatus
   1265 E5 82              4843 	mov	a,dpl
   1267 85 83 F0           4844 	mov	b,dph
   126A 90s01r87           4845 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   126D F0                 4846 	movx	@dptr,a
   126E A3                 4847 	inc	dptr
   126F E5 F0              4848 	mov	a,b
   1271 F0                 4849 	movx	@dptr,a
   1272                    4850 00106$:
                    1272   4851 	C$ydrip.c$591$1$1 ==.
                           4852 ;	apps/ydrip/ydrip.c:591: if (intWifiStatus != 5) {
   1272 90s01r87           4853 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   1275 E0                 4854 	movx	a,@dptr
   1276 FE                 4855 	mov	r6,a
   1277 A3                 4856 	inc	dptr
   1278 E0                 4857 	movx	a,@dptr
   1279 FF                 4858 	mov	r7,a
   127A BE 05 05           4859 	cjne	r6,#0x05,00125$
   127D BF 00 02           4860 	cjne	r7,#0x00,00125$
   1280 80 50              4861 	sjmp	00108$
   1282                    4862 00125$:
                    1282   4863 	C$ydrip.c$592$2$5 ==.
                           4864 ;	apps/ydrip/ydrip.c:592: printf("gpio.write(4, gpio.LOW)\r\n");								// Switch on Blue LED
   1282 74r43              4865 	mov	a,#__str_31
   1284 C0 E0              4866 	push	acc
   1286 74s07              4867 	mov	a,#(__str_31 >> 8)
   1288 C0 E0              4868 	push	acc
   128A 74 80              4869 	mov	a,#0x80
   128C C0 E0              4870 	push	acc
   128E 12s00r00           4871 	lcall	_printf
   1291 15 81              4872 	dec	sp
   1293 15 81              4873 	dec	sp
   1295 15 81              4874 	dec	sp
                    1297   4875 	C$ydrip.c$593$2$5 ==.
                           4876 ;	apps/ydrip/ydrip.c:593: delayMs(defaultATWait);
   1297 90s00r52           4877 	mov	dptr,#_defaultATWait
   129A E0                 4878 	movx	a,@dptr
   129B FC                 4879 	mov	r4,a
   129C A3                 4880 	inc	dptr
   129D E0                 4881 	movx	a,@dptr
   129E FD                 4882 	mov	r5,a
   129F A3                 4883 	inc	dptr
   12A0 E0                 4884 	movx	a,@dptr
   12A1 A3                 4885 	inc	dptr
   12A2 E0                 4886 	movx	a,@dptr
   12A3 8C 82              4887 	mov	dpl,r4
   12A5 8D 83              4888 	mov	dph,r5
   12A7 12s00r00           4889 	lcall	_delayMs
                    12AA   4890 	C$ydrip.c$594$2$5 ==.
                           4891 ;	apps/ydrip/ydrip.c:594: printf("wifi.sta.config(\"Hillside\",\"VariousChars\")  wifi.sta.connect()\r\n");	// Connect to AP1
   12AA 74r51              4892 	mov	a,#__str_36
   12AC C0 E0              4893 	push	acc
   12AE 74s08              4894 	mov	a,#(__str_36 >> 8)
   12B0 C0 E0              4895 	push	acc
   12B2 74 80              4896 	mov	a,#0x80
   12B4 C0 E0              4897 	push	acc
   12B6 12s00r00           4898 	lcall	_printf
   12B9 15 81              4899 	dec	sp
   12BB 15 81              4900 	dec	sp
   12BD 15 81              4901 	dec	sp
                    12BF   4902 	C$ydrip.c$595$2$5 ==.
                           4903 ;	apps/ydrip/ydrip.c:595: wifiFlash();
   12BF 12s0FrB7           4904 	lcall	_wifiFlash
                    12C2   4905 	C$ydrip.c$597$2$5 ==.
                           4906 ;	apps/ydrip/ydrip.c:597: intWifiStatus = getWifiStatus();
   12C2 12s0Dr94           4907 	lcall	_getWifiStatus
   12C5 E5 82              4908 	mov	a,dpl
   12C7 85 83 F0           4909 	mov	b,dph
   12CA 90s01r87           4910 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   12CD F0                 4911 	movx	@dptr,a
   12CE A3                 4912 	inc	dptr
   12CF E5 F0              4913 	mov	a,b
   12D1 F0                 4914 	movx	@dptr,a
   12D2                    4915 00108$:
                    12D2   4916 	C$ydrip.c$601$1$1 ==.
                           4917 ;	apps/ydrip/ydrip.c:601: if (intWifiStatus != 5) {
   12D2 90s01r87           4918 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   12D5 E0                 4919 	movx	a,@dptr
   12D6 FE                 4920 	mov	r6,a
   12D7 A3                 4921 	inc	dptr
   12D8 E0                 4922 	movx	a,@dptr
   12D9 FF                 4923 	mov	r7,a
   12DA BE 05 05           4924 	cjne	r6,#0x05,00126$
   12DD BF 00 02           4925 	cjne	r7,#0x00,00126$
   12E0 80 50              4926 	sjmp	00110$
   12E2                    4927 00126$:
                    12E2   4928 	C$ydrip.c$602$2$6 ==.
                           4929 ;	apps/ydrip/ydrip.c:602: printf("gpio.write(4, gpio.HIGH)\r\n");								// Switch off Blue LED (to make it flash)
   12E2 74r28              4930 	mov	a,#__str_30
   12E4 C0 E0              4931 	push	acc
   12E6 74s07              4932 	mov	a,#(__str_30 >> 8)
   12E8 C0 E0              4933 	push	acc
   12EA 74 80              4934 	mov	a,#0x80
   12EC C0 E0              4935 	push	acc
   12EE 12s00r00           4936 	lcall	_printf
   12F1 15 81              4937 	dec	sp
   12F3 15 81              4938 	dec	sp
   12F5 15 81              4939 	dec	sp
                    12F7   4940 	C$ydrip.c$603$2$6 ==.
                           4941 ;	apps/ydrip/ydrip.c:603: delayMs(defaultATWait);
   12F7 90s00r52           4942 	mov	dptr,#_defaultATWait
   12FA E0                 4943 	movx	a,@dptr
   12FB FC                 4944 	mov	r4,a
   12FC A3                 4945 	inc	dptr
   12FD E0                 4946 	movx	a,@dptr
   12FE FD                 4947 	mov	r5,a
   12FF A3                 4948 	inc	dptr
   1300 E0                 4949 	movx	a,@dptr
   1301 A3                 4950 	inc	dptr
   1302 E0                 4951 	movx	a,@dptr
   1303 8C 82              4952 	mov	dpl,r4
   1305 8D 83              4953 	mov	dph,r5
   1307 12s00r00           4954 	lcall	_delayMs
                    130A   4955 	C$ydrip.c$604$2$6 ==.
                           4956 ;	apps/ydrip/ydrip.c:604: printf("wifi.sta.config(\"Cagey_HTC\",\"1234567890\")  wifi.sta.connect()\r\n");	// Connect to AP1
   130A 74r92              4957 	mov	a,#__str_37
   130C C0 E0              4958 	push	acc
   130E 74s08              4959 	mov	a,#(__str_37 >> 8)
   1310 C0 E0              4960 	push	acc
   1312 74 80              4961 	mov	a,#0x80
   1314 C0 E0              4962 	push	acc
   1316 12s00r00           4963 	lcall	_printf
   1319 15 81              4964 	dec	sp
   131B 15 81              4965 	dec	sp
   131D 15 81              4966 	dec	sp
                    131F   4967 	C$ydrip.c$605$2$6 ==.
                           4968 ;	apps/ydrip/ydrip.c:605: wifiFlash();
   131F 12s0FrB7           4969 	lcall	_wifiFlash
                    1322   4970 	C$ydrip.c$607$2$6 ==.
                           4971 ;	apps/ydrip/ydrip.c:607: intWifiStatus = getWifiStatus();
   1322 12s0Dr94           4972 	lcall	_getWifiStatus
   1325 E5 82              4973 	mov	a,dpl
   1327 85 83 F0           4974 	mov	b,dph
   132A 90s01r87           4975 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   132D F0                 4976 	movx	@dptr,a
   132E A3                 4977 	inc	dptr
   132F E5 F0              4978 	mov	a,b
   1331 F0                 4979 	movx	@dptr,a
   1332                    4980 00110$:
                    1332   4981 	C$ydrip.c$623$1$1 ==.
                           4982 ;	apps/ydrip/ydrip.c:623: if (intWifiStatus == 5) {
   1332 90s01r87           4983 	mov	dptr,#_wifiConnect_intWifiStatus_1_1
   1335 E0                 4984 	movx	a,@dptr
   1336 FE                 4985 	mov	r6,a
   1337 A3                 4986 	inc	dptr
   1338 E0                 4987 	movx	a,@dptr
   1339 FF                 4988 	mov	r7,a
   133A BE 05 05           4989 	cjne	r6,#0x05,00127$
   133D BF 00 02           4990 	cjne	r7,#0x00,00127$
   1340 80 03              4991 	sjmp	00128$
   1342                    4992 00127$:
   1342 02s14r66           4993 	ljmp	00112$
   1345                    4994 00128$:
                    1345   4995 	C$ydrip.c$624$2$7 ==.
                           4996 ;	apps/ydrip/ydrip.c:624: printf("gpio.write(4, gpio.LOW)\r\n");								// Make sure Blue LED is still on
   1345 74r43              4997 	mov	a,#__str_31
   1347 C0 E0              4998 	push	acc
   1349 74s07              4999 	mov	a,#(__str_31 >> 8)
   134B C0 E0              5000 	push	acc
   134D 74 80              5001 	mov	a,#0x80
   134F C0 E0              5002 	push	acc
   1351 12s00r00           5003 	lcall	_printf
   1354 15 81              5004 	dec	sp
   1356 15 81              5005 	dec	sp
   1358 15 81              5006 	dec	sp
                    135A   5007 	C$ydrip.c$625$2$7 ==.
                           5008 ;	apps/ydrip/ydrip.c:625: delayMs(defaultATWait);
   135A 90s00r52           5009 	mov	dptr,#_defaultATWait
   135D E0                 5010 	movx	a,@dptr
   135E FC                 5011 	mov	r4,a
   135F A3                 5012 	inc	dptr
   1360 E0                 5013 	movx	a,@dptr
   1361 FD                 5014 	mov	r5,a
   1362 A3                 5015 	inc	dptr
   1363 E0                 5016 	movx	a,@dptr
   1364 A3                 5017 	inc	dptr
   1365 E0                 5018 	movx	a,@dptr
   1366 8C 82              5019 	mov	dpl,r4
   1368 8D 83              5020 	mov	dph,r5
   136A 12s00r00           5021 	lcall	_delayMs
                    136D   5022 	C$ydrip.c$626$2$7 ==.
                           5023 ;	apps/ydrip/ydrip.c:626: strcpy(atString, "sk=net.createConnection(net.TCP, 0)\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Save changes
   136D 78r00              5024 	mov	r0,#_strcpy_PARM_2
   136F 74rD2              5025 	mov	a,#__str_38
   1371 F2                 5026 	movx	@r0,a
   1372 08                 5027 	inc	r0
   1373 74s08              5028 	mov	a,#(__str_38 >> 8)
   1375 F2                 5029 	movx	@r0,a
   1376 08                 5030 	inc	r0
   1377 74 80              5031 	mov	a,#0x80
   1379 F2                 5032 	movx	@r0,a
   137A 90s01r5F           5033 	mov	dptr,#_wifiConnect_atString_1_1
   137D 75 F0 00           5034 	mov	b,#0x00
   1380 12s00r00           5035 	lcall	_strcpy
   1383 90s01r5F           5036 	mov	dptr,#_wifiConnect_atString_1_1
   1386 12s04rF9           5037 	lcall	_sendAT
                    1389   5038 	C$ydrip.c$627$2$7 ==.
                           5039 ;	apps/ydrip/ydrip.c:627: delayMs(defaultATWait);
   1389 90s00r52           5040 	mov	dptr,#_defaultATWait
   138C E0                 5041 	movx	a,@dptr
   138D FC                 5042 	mov	r4,a
   138E A3                 5043 	inc	dptr
   138F E0                 5044 	movx	a,@dptr
   1390 FD                 5045 	mov	r5,a
   1391 A3                 5046 	inc	dptr
   1392 E0                 5047 	movx	a,@dptr
   1393 A3                 5048 	inc	dptr
   1394 E0                 5049 	movx	a,@dptr
   1395 8C 82              5050 	mov	dpl,r4
   1397 8D 83              5051 	mov	dph,r5
   1399 12s00r00           5052 	lcall	_delayMs
                    139C   5053 	C$ydrip.c$628$2$7 ==.
                           5054 ;	apps/ydrip/ydrip.c:628: strcpy(atString, "sk:on(\"receive\", function(sck, c) print(c) end )\r\n"); sendAT(atString); // print stuff you get back
   139C 78r00              5055 	mov	r0,#_strcpy_PARM_2
   139E 74rF8              5056 	mov	a,#__str_39
   13A0 F2                 5057 	movx	@r0,a
   13A1 08                 5058 	inc	r0
   13A2 74s08              5059 	mov	a,#(__str_39 >> 8)
   13A4 F2                 5060 	movx	@r0,a
   13A5 08                 5061 	inc	r0
   13A6 74 80              5062 	mov	a,#0x80
   13A8 F2                 5063 	movx	@r0,a
   13A9 90s01r5F           5064 	mov	dptr,#_wifiConnect_atString_1_1
   13AC 75 F0 00           5065 	mov	b,#0x00
   13AF 12s00r00           5066 	lcall	_strcpy
   13B2 90s01r5F           5067 	mov	dptr,#_wifiConnect_atString_1_1
   13B5 12s04rF9           5068 	lcall	_sendAT
                    13B8   5069 	C$ydrip.c$629$2$7 ==.
                           5070 ;	apps/ydrip/ydrip.c:629: delayMs(defaultATWait);
   13B8 90s00r52           5071 	mov	dptr,#_defaultATWait
   13BB E0                 5072 	movx	a,@dptr
   13BC FC                 5073 	mov	r4,a
   13BD A3                 5074 	inc	dptr
   13BE E0                 5075 	movx	a,@dptr
   13BF FD                 5076 	mov	r5,a
   13C0 A3                 5077 	inc	dptr
   13C1 E0                 5078 	movx	a,@dptr
   13C2 A3                 5079 	inc	dptr
   13C3 E0                 5080 	movx	a,@dptr
   13C4 8C 82              5081 	mov	dpl,r4
   13C6 8D 83              5082 	mov	dph,r5
   13C8 12s00r00           5083 	lcall	_delayMs
                    13CB   5084 	C$ydrip.c$631$2$7 ==.
                           5085 ;	apps/ydrip/ydrip.c:631: strcpy(atString, "sk:connect(");
   13CB 78r00              5086 	mov	r0,#_strcpy_PARM_2
   13CD 74r2B              5087 	mov	a,#__str_40
   13CF F2                 5088 	movx	@r0,a
   13D0 08                 5089 	inc	r0
   13D1 74s09              5090 	mov	a,#(__str_40 >> 8)
   13D3 F2                 5091 	movx	@r0,a
   13D4 08                 5092 	inc	r0
   13D5 74 80              5093 	mov	a,#0x80
   13D7 F2                 5094 	movx	@r0,a
   13D8 90s01r5F           5095 	mov	dptr,#_wifiConnect_atString_1_1
   13DB 75 F0 00           5096 	mov	b,#0x00
   13DE 12s00r00           5097 	lcall	_strcpy
                    13E1   5098 	C$ydrip.c$632$2$7 ==.
                           5099 ;	apps/ydrip/ydrip.c:632: strcat(atString, dexie_host_port);
   13E1 78r00              5100 	mov	r0,#_strcat_PARM_2
   13E3 74r1F              5101 	mov	a,#_dexie_host_port
   13E5 F2                 5102 	movx	@r0,a
   13E6 08                 5103 	inc	r0
   13E7 74s00              5104 	mov	a,#(_dexie_host_port >> 8)
   13E9 F2                 5105 	movx	@r0,a
   13EA 08                 5106 	inc	r0
   13EB E4                 5107 	clr	a
   13EC F2                 5108 	movx	@r0,a
   13ED 90s01r5F           5109 	mov	dptr,#_wifiConnect_atString_1_1
   13F0 75 F0 00           5110 	mov	b,#0x00
   13F3 12s00r00           5111 	lcall	_strcat
                    13F6   5112 	C$ydrip.c$633$2$7 ==.
                           5113 ;	apps/ydrip/ydrip.c:633: strcat(atString, ",\"");
   13F6 78r00              5114 	mov	r0,#_strcat_PARM_2
   13F8 74r37              5115 	mov	a,#__str_41
   13FA F2                 5116 	movx	@r0,a
   13FB 08                 5117 	inc	r0
   13FC 74s09              5118 	mov	a,#(__str_41 >> 8)
   13FE F2                 5119 	movx	@r0,a
   13FF 08                 5120 	inc	r0
   1400 74 80              5121 	mov	a,#0x80
   1402 F2                 5122 	movx	@r0,a
   1403 90s01r5F           5123 	mov	dptr,#_wifiConnect_atString_1_1
   1406 75 F0 00           5124 	mov	b,#0x00
   1409 12s00r00           5125 	lcall	_strcat
                    140C   5126 	C$ydrip.c$634$2$7 ==.
                           5127 ;	apps/ydrip/ydrip.c:634: strcat(atString, dexie_host_address);
   140C 78r00              5128 	mov	r0,#_strcat_PARM_2
   140E 74r06              5129 	mov	a,#_dexie_host_address
   1410 F2                 5130 	movx	@r0,a
   1411 08                 5131 	inc	r0
   1412 74s00              5132 	mov	a,#(_dexie_host_address >> 8)
   1414 F2                 5133 	movx	@r0,a
   1415 08                 5134 	inc	r0
   1416 E4                 5135 	clr	a
   1417 F2                 5136 	movx	@r0,a
   1418 90s01r5F           5137 	mov	dptr,#_wifiConnect_atString_1_1
   141B 75 F0 00           5138 	mov	b,#0x00
   141E 12s00r00           5139 	lcall	_strcat
                    1421   5140 	C$ydrip.c$635$2$7 ==.
                           5141 ;	apps/ydrip/ydrip.c:635: strcat(atString, "\")\r\n");
   1421 78r00              5142 	mov	r0,#_strcat_PARM_2
   1423 74r3A              5143 	mov	a,#__str_42
   1425 F2                 5144 	movx	@r0,a
   1426 08                 5145 	inc	r0
   1427 74s09              5146 	mov	a,#(__str_42 >> 8)
   1429 F2                 5147 	movx	@r0,a
   142A 08                 5148 	inc	r0
   142B 74 80              5149 	mov	a,#0x80
   142D F2                 5150 	movx	@r0,a
   142E 90s01r5F           5151 	mov	dptr,#_wifiConnect_atString_1_1
   1431 75 F0 00           5152 	mov	b,#0x00
   1434 12s00r00           5153 	lcall	_strcat
                    1437   5154 	C$ydrip.c$636$2$7 ==.
                           5155 ;	apps/ydrip/ydrip.c:636: sendAT(atString);
   1437 90s01r5F           5156 	mov	dptr,#_wifiConnect_atString_1_1
   143A 12s04rF9           5157 	lcall	_sendAT
                    143D   5158 	C$ydrip.c$637$2$7 ==.
                           5159 ;	apps/ydrip/ydrip.c:637: delayMs(defaultATWait);
   143D 90s00r52           5160 	mov	dptr,#_defaultATWait
   1440 E0                 5161 	movx	a,@dptr
   1441 FC                 5162 	mov	r4,a
   1442 A3                 5163 	inc	dptr
   1443 E0                 5164 	movx	a,@dptr
   1444 FD                 5165 	mov	r5,a
   1445 A3                 5166 	inc	dptr
   1446 E0                 5167 	movx	a,@dptr
   1447 A3                 5168 	inc	dptr
   1448 E0                 5169 	movx	a,@dptr
   1449 8C 82              5170 	mov	dpl,r4
   144B 8D 83              5171 	mov	dph,r5
   144D 12s00r00           5172 	lcall	_delayMs
                    1450   5173 	C$ydrip.c$638$2$7 ==.
                           5174 ;	apps/ydrip/ydrip.c:638: delayMs(defaultATWait);								        // another delay to be sure server is listening
   1450 90s00r52           5175 	mov	dptr,#_defaultATWait
   1453 E0                 5176 	movx	a,@dptr
   1454 FC                 5177 	mov	r4,a
   1455 A3                 5178 	inc	dptr
   1456 E0                 5179 	movx	a,@dptr
   1457 FD                 5180 	mov	r5,a
   1458 A3                 5181 	inc	dptr
   1459 E0                 5182 	movx	a,@dptr
   145A A3                 5183 	inc	dptr
   145B E0                 5184 	movx	a,@dptr
   145C 8C 82              5185 	mov	dpl,r4
   145E 8D 83              5186 	mov	dph,r5
   1460 12s00r00           5187 	lcall	_delayMs
                    1463   5188 	C$ydrip.c$639$2$7 ==.
                           5189 ;	apps/ydrip/ydrip.c:639: return 1;
   1463 D3                 5190 	setb	c
   1464 80 29              5191 	sjmp	00114$
   1466                    5192 00112$:
                    1466   5193 	C$ydrip.c$641$2$8 ==.
                           5194 ;	apps/ydrip/ydrip.c:641: printf("gpio.write(4, gpio.HIGH)\r\n");delayMs(defaultATWait);			// Switch off Blue LED (to show no wifi connection)
   1466 74r28              5195 	mov	a,#__str_30
   1468 C0 E0              5196 	push	acc
   146A 74s07              5197 	mov	a,#(__str_30 >> 8)
   146C C0 E0              5198 	push	acc
   146E 74 80              5199 	mov	a,#0x80
   1470 C0 E0              5200 	push	acc
   1472 12s00r00           5201 	lcall	_printf
   1475 15 81              5202 	dec	sp
   1477 15 81              5203 	dec	sp
   1479 15 81              5204 	dec	sp
   147B 90s00r52           5205 	mov	dptr,#_defaultATWait
   147E E0                 5206 	movx	a,@dptr
   147F FC                 5207 	mov	r4,a
   1480 A3                 5208 	inc	dptr
   1481 E0                 5209 	movx	a,@dptr
   1482 FD                 5210 	mov	r5,a
   1483 A3                 5211 	inc	dptr
   1484 E0                 5212 	movx	a,@dptr
   1485 A3                 5213 	inc	dptr
   1486 E0                 5214 	movx	a,@dptr
   1487 8C 82              5215 	mov	dpl,r4
   1489 8D 83              5216 	mov	dph,r5
   148B 12s00r00           5217 	lcall	_delayMs
                    148E   5218 	C$ydrip.c$642$2$8 ==.
                           5219 ;	apps/ydrip/ydrip.c:642: return 0;
   148E C3                 5220 	clr	c
   148F                    5221 00114$:
                    148F   5222 	C$ydrip.c$647$1$1 ==.
                    148F   5223 	XG$wifiConnect$0$0 ==.
   148F 22                 5224 	ret
                           5225 ;------------------------------------------------------------
                           5226 ;Allocation info for local variables in function 'getTimeBytes'
                           5227 ;------------------------------------------------------------
                           5228 ;c                         Allocated with name '_getTimeBytes_c_1_1'
                           5229 ;lenC                      Allocated with name '_getTimeBytes_lenC_1_1'
                           5230 ;i                         Allocated with name '_getTimeBytes_i_1_1'
                           5231 ;strMMM                    Allocated with name '_getTimeBytes_strMMM_1_1'
                           5232 ;------------------------------------------------------------
                    1490   5233 	G$getTimeBytes$0$0 ==.
                    1490   5234 	C$ydrip.c$649$1$1 ==.
                           5235 ;	apps/ydrip/ydrip.c:649: void getTimeBytes(InitVect* tVector) {
                           5236 ;	-----------------------------------------
                           5237 ;	 function getTimeBytes
                           5238 ;	-----------------------------------------
   1490                    5239 _getTimeBytes:
   1490 AF 83              5240 	mov	r7,dph
   1492 E5 82              5241 	mov	a,dpl
   1494 78r45              5242 	mov	r0,#_getTimeBytes_tVector_1_1
   1496 F2                 5243 	movx	@r0,a
   1497 08                 5244 	inc	r0
   1498 EF                 5245 	mov	a,r7
   1499 F2                 5246 	movx	@r0,a
                    149A   5247 	C$ydrip.c$673$1$1 ==.
                           5248 ;	apps/ydrip/ydrip.c:673: while (uart1RxAvailable()) strcpy(c, getFonaString());										// Clear RX buffer
   149A                    5249 00101$:
   149A 12s00r00           5250 	lcall	_uart1RxAvailable
   149D E5 82              5251 	mov	a,dpl
   149F 60 1C              5252 	jz	00103$
   14A1 12s03rBF           5253 	lcall	_getFonaString
   14A4 AC 82              5254 	mov	r4,dpl
   14A6 AD 83              5255 	mov	r5,dph
   14A8 78r00              5256 	mov	r0,#_strcpy_PARM_2
   14AA EC                 5257 	mov	a,r4
   14AB F2                 5258 	movx	@r0,a
   14AC 08                 5259 	inc	r0
   14AD ED                 5260 	mov	a,r5
   14AE F2                 5261 	movx	@r0,a
   14AF 08                 5262 	inc	r0
   14B0 E4                 5263 	clr	a
   14B1 F2                 5264 	movx	@r0,a
   14B2 90s01r89           5265 	mov	dptr,#_getTimeBytes_c_1_1
   14B5 75 F0 00           5266 	mov	b,#0x00
   14B8 12s00r00           5267 	lcall	_strcpy
   14BB 80 DD              5268 	sjmp	00101$
   14BD                    5269 00103$:
                    14BD   5270 	C$ydrip.c$675$1$1 ==.
                           5271 ;	apps/ydrip/ydrip.c:675: strcpy(c, (getFonaString())); // Clear buffer
   14BD 12s03rBF           5272 	lcall	_getFonaString
   14C0 AC 82              5273 	mov	r4,dpl
   14C2 AD 83              5274 	mov	r5,dph
   14C4 78r00              5275 	mov	r0,#_strcpy_PARM_2
   14C6 EC                 5276 	mov	a,r4
   14C7 F2                 5277 	movx	@r0,a
   14C8 08                 5278 	inc	r0
   14C9 ED                 5279 	mov	a,r5
   14CA F2                 5280 	movx	@r0,a
   14CB 08                 5281 	inc	r0
   14CC E4                 5282 	clr	a
   14CD F2                 5283 	movx	@r0,a
   14CE 90s01r89           5284 	mov	dptr,#_getTimeBytes_c_1_1
   14D1 75 F0 00           5285 	mov	b,#0x00
   14D4 12s00r00           5286 	lcall	_strcpy
                    14D7   5287 	C$ydrip.c$676$1$1 ==.
                           5288 ;	apps/ydrip/ydrip.c:676: printf("dofile(\"googletime.lua\")\r\n")	;delayMs(defaultATWait);	// Make connection and trigger output of date
   14D7 74r3F              5289 	mov	a,#__str_43
   14D9 C0 E0              5290 	push	acc
   14DB 74s09              5291 	mov	a,#(__str_43 >> 8)
   14DD C0 E0              5292 	push	acc
   14DF 74 80              5293 	mov	a,#0x80
   14E1 C0 E0              5294 	push	acc
   14E3 12s00r00           5295 	lcall	_printf
   14E6 15 81              5296 	dec	sp
   14E8 15 81              5297 	dec	sp
   14EA 15 81              5298 	dec	sp
   14EC 90s00r52           5299 	mov	dptr,#_defaultATWait
   14EF E0                 5300 	movx	a,@dptr
   14F0 FA                 5301 	mov	r2,a
   14F1 A3                 5302 	inc	dptr
   14F2 E0                 5303 	movx	a,@dptr
   14F3 FB                 5304 	mov	r3,a
   14F4 A3                 5305 	inc	dptr
   14F5 E0                 5306 	movx	a,@dptr
   14F6 A3                 5307 	inc	dptr
   14F7 E0                 5308 	movx	a,@dptr
   14F8 8A 82              5309 	mov	dpl,r2
   14FA 8B 83              5310 	mov	dph,r3
   14FC 12s00r00           5311 	lcall	_delayMs
                    14FF   5312 	C$ydrip.c$678$1$1 ==.
                           5313 ;	apps/ydrip/ydrip.c:678: strcpy(c, getFonaString());
   14FF 12s03rBF           5314 	lcall	_getFonaString
   1502 AC 82              5315 	mov	r4,dpl
   1504 AD 83              5316 	mov	r5,dph
   1506 78r00              5317 	mov	r0,#_strcpy_PARM_2
   1508 EC                 5318 	mov	a,r4
   1509 F2                 5319 	movx	@r0,a
   150A 08                 5320 	inc	r0
   150B ED                 5321 	mov	a,r5
   150C F2                 5322 	movx	@r0,a
   150D 08                 5323 	inc	r0
   150E E4                 5324 	clr	a
   150F F2                 5325 	movx	@r0,a
   1510 90s01r89           5326 	mov	dptr,#_getTimeBytes_c_1_1
   1513 75 F0 00           5327 	mov	b,#0x00
   1516 12s00r00           5328 	lcall	_strcpy
                    1519   5329 	C$ydrip.c$679$1$1 ==.
                           5330 ;	apps/ydrip/ydrip.c:679: lenC=strlen(c);
   1519 90s01r89           5331 	mov	dptr,#_getTimeBytes_c_1_1
   151C 75 F0 00           5332 	mov	b,#0x00
   151F 12s00r00           5333 	lcall	_strlen
   1522 AC 82              5334 	mov	r4,dpl
   1524 AD 83              5335 	mov	r5,dph
                    1526   5336 	C$ydrip.c$680$1$1 ==.
                           5337 ;	apps/ydrip/ydrip.c:680: if (debug_mode) printf("-- **DEBUG** length of C is %d\r\n", lenC);
   1526 30*03 21           5338 	jnb	_debug_mode,00105$
   1529 C0 05              5339 	push	ar5
   152B C0 04              5340 	push	ar4
   152D C0 04              5341 	push	ar4
   152F C0 05              5342 	push	ar5
   1531 74r5A              5343 	mov	a,#__str_44
   1533 C0 E0              5344 	push	acc
   1535 74s09              5345 	mov	a,#(__str_44 >> 8)
   1537 C0 E0              5346 	push	acc
   1539 74 80              5347 	mov	a,#0x80
   153B C0 E0              5348 	push	acc
   153D 12s00r00           5349 	lcall	_printf
   1540 E5 81              5350 	mov	a,sp
   1542 24 FB              5351 	add	a,#0xfb
   1544 F5 81              5352 	mov	sp,a
   1546 D0 04              5353 	pop	ar4
   1548 D0 05              5354 	pop	ar5
   154A                    5355 00105$:
                    154A   5356 	C$ydrip.c$682$1$1 ==.
                           5357 ;	apps/ydrip/ydrip.c:682: printf("\r\n"); delayMs(defaultATWait);							//	Press return a couple of times
   154A C0 04              5358 	push	ar4
   154C C0 05              5359 	push	ar5
   154E C0 05              5360 	push	ar5
   1550 C0 04              5361 	push	ar4
   1552 74r7B              5362 	mov	a,#__str_45
   1554 C0 E0              5363 	push	acc
   1556 74s09              5364 	mov	a,#(__str_45 >> 8)
   1558 C0 E0              5365 	push	acc
   155A 74 80              5366 	mov	a,#0x80
   155C C0 E0              5367 	push	acc
   155E 12s00r00           5368 	lcall	_printf
   1561 15 81              5369 	dec	sp
   1563 15 81              5370 	dec	sp
   1565 15 81              5371 	dec	sp
   1567 D0 04              5372 	pop	ar4
   1569 D0 05              5373 	pop	ar5
   156B 90s00r52           5374 	mov	dptr,#_defaultATWait
   156E E0                 5375 	movx	a,@dptr
   156F FA                 5376 	mov	r2,a
   1570 A3                 5377 	inc	dptr
   1571 E0                 5378 	movx	a,@dptr
   1572 FB                 5379 	mov	r3,a
   1573 A3                 5380 	inc	dptr
   1574 E0                 5381 	movx	a,@dptr
   1575 FC                 5382 	mov	r4,a
   1576 A3                 5383 	inc	dptr
   1577 E0                 5384 	movx	a,@dptr
   1578 FD                 5385 	mov	r5,a
   1579 8A 82              5386 	mov	dpl,r2
   157B 8B 83              5387 	mov	dph,r3
   157D C0 05              5388 	push	ar5
   157F C0 04              5389 	push	ar4
   1581 12s00r00           5390 	lcall	_delayMs
                    1584   5391 	C$ydrip.c$683$1$1 ==.
                           5392 ;	apps/ydrip/ydrip.c:683: printf("\r\n"); delayMs(defaultATWait);							//	to get ESP back to normal prompt
   1584 74r7B              5393 	mov	a,#__str_45
   1586 C0 E0              5394 	push	acc
   1588 74s09              5395 	mov	a,#(__str_45 >> 8)
   158A C0 E0              5396 	push	acc
   158C 74 80              5397 	mov	a,#0x80
   158E C0 E0              5398 	push	acc
   1590 12s00r00           5399 	lcall	_printf
   1593 15 81              5400 	dec	sp
   1595 15 81              5401 	dec	sp
   1597 15 81              5402 	dec	sp
   1599 D0 04              5403 	pop	ar4
   159B D0 05              5404 	pop	ar5
   159D 90s00r52           5405 	mov	dptr,#_defaultATWait
   15A0 E0                 5406 	movx	a,@dptr
   15A1 FA                 5407 	mov	r2,a
   15A2 A3                 5408 	inc	dptr
   15A3 E0                 5409 	movx	a,@dptr
   15A4 FB                 5410 	mov	r3,a
   15A5 A3                 5411 	inc	dptr
   15A6 E0                 5412 	movx	a,@dptr
   15A7 FC                 5413 	mov	r4,a
   15A8 A3                 5414 	inc	dptr
   15A9 E0                 5415 	movx	a,@dptr
   15AA FD                 5416 	mov	r5,a
   15AB 8A 82              5417 	mov	dpl,r2
   15AD 8B 83              5418 	mov	dph,r3
   15AF C0 05              5419 	push	ar5
   15B1 C0 04              5420 	push	ar4
   15B3 12s00r00           5421 	lcall	_delayMs
   15B6 D0 04              5422 	pop	ar4
   15B8 D0 05              5423 	pop	ar5
                    15BA   5424 	C$ydrip.c$712$1$1 ==.
                           5425 ;	apps/ydrip/ydrip.c:712: if (strcmp(strMMM,"Dec") == 0)	tVector->iv[5] = '2';
   15BA D0 05              5426 	pop	ar5
   15BC D0 04              5427 	pop	ar4
                    15BE   5428 	C$ydrip.c$687$1$1 ==.
                           5429 ;	apps/ydrip/ydrip.c:687: while (i < 14) {												//	Put the relevant characters from the response string into the IV array
   15BE 7B 00              5430 	mov	r3,#0x00
   15C0                    5431 00106$:
   15C0 C3                 5432 	clr	c
   15C1 EB                 5433 	mov	a,r3
   15C2 64 80              5434 	xrl	a,#0x80
   15C4 94 8E              5435 	subb	a,#0x8e
   15C6 50 23              5436 	jnc	00108$
                    15C8   5437 	C$ydrip.c$688$2$2 ==.
                           5438 ;	apps/ydrip/ydrip.c:688: tVector->iv[i] =  c[(lenC - 21) + i];
   15C8 78r45              5439 	mov	r0,#_getTimeBytes_tVector_1_1
   15CA E2                 5440 	movx	a,@r0
   15CB 2B                 5441 	add	a,r3
   15CC FA                 5442 	mov	r2,a
   15CD 08                 5443 	inc	r0
   15CE E2                 5444 	movx	a,@r0
   15CF 34 00              5445 	addc	a,#0x00
   15D1 FF                 5446 	mov	r7,a
   15D2 8C 06              5447 	mov	ar6,r4
   15D4 EE                 5448 	mov	a,r6
   15D5 24 EB              5449 	add	a,#0xEB
   15D7 2B                 5450 	add	a,r3
   15D8 24r89              5451 	add	a,#_getTimeBytes_c_1_1
   15DA F5 82              5452 	mov	dpl,a
   15DC E4                 5453 	clr	a
   15DD 34s01              5454 	addc	a,#(_getTimeBytes_c_1_1 >> 8)
   15DF F5 83              5455 	mov	dph,a
   15E1 E0                 5456 	movx	a,@dptr
   15E2 FE                 5457 	mov	r6,a
   15E3 8A 82              5458 	mov	dpl,r2
   15E5 8F 83              5459 	mov	dph,r7
   15E7 F0                 5460 	movx	@dptr,a
                    15E8   5461 	C$ydrip.c$689$2$2 ==.
                           5462 ;	apps/ydrip/ydrip.c:689: i++;
   15E8 0B                 5463 	inc	r3
   15E9 80 D5              5464 	sjmp	00106$
   15EB                    5465 00108$:
                    15EB   5466 	C$ydrip.c$693$1$1 ==.
                           5467 ;	apps/ydrip/ydrip.c:693: strMMM[0]=c[(lenC - 21) + 14];
   15EB 74 F9              5468 	mov	a,#0xF9
   15ED 2C                 5469 	add	a,r4
   15EE 24r89              5470 	add	a,#_getTimeBytes_c_1_1
   15F0 F5 82              5471 	mov	dpl,a
   15F2 E4                 5472 	clr	a
   15F3 34s01              5473 	addc	a,#(_getTimeBytes_c_1_1 >> 8)
   15F5 F5 83              5474 	mov	dph,a
   15F7 E0                 5475 	movx	a,@dptr
   15F8 90s01rD9           5476 	mov	dptr,#_getTimeBytes_strMMM_1_1
   15FB F0                 5477 	movx	@dptr,a
                    15FC   5478 	C$ydrip.c$694$1$1 ==.
                           5479 ;	apps/ydrip/ydrip.c:694: strMMM[1]=c[(lenC - 21) + 15];
   15FC 74 FA              5480 	mov	a,#0xFA
   15FE 2C                 5481 	add	a,r4
   15FF 24r89              5482 	add	a,#_getTimeBytes_c_1_1
   1601 F5 82              5483 	mov	dpl,a
   1603 E4                 5484 	clr	a
   1604 34s01              5485 	addc	a,#(_getTimeBytes_c_1_1 >> 8)
   1606 F5 83              5486 	mov	dph,a
   1608 E0                 5487 	movx	a,@dptr
   1609 90s01rDA           5488 	mov	dptr,#(_getTimeBytes_strMMM_1_1 + 0x0001)
   160C F0                 5489 	movx	@dptr,a
                    160D   5490 	C$ydrip.c$695$1$1 ==.
                           5491 ;	apps/ydrip/ydrip.c:695: strMMM[2]=c[(lenC - 21) + 16];
   160D 74 FB              5492 	mov	a,#0xFB
   160F 2C                 5493 	add	a,r4
   1610 24r89              5494 	add	a,#_getTimeBytes_c_1_1
   1612 F5 82              5495 	mov	dpl,a
   1614 E4                 5496 	clr	a
   1615 34s01              5497 	addc	a,#(_getTimeBytes_c_1_1 >> 8)
   1617 F5 83              5498 	mov	dph,a
   1619 E0                 5499 	movx	a,@dptr
   161A 90s01rDB           5500 	mov	dptr,#(_getTimeBytes_strMMM_1_1 + 0x0002)
   161D F0                 5501 	movx	@dptr,a
                    161E   5502 	C$ydrip.c$696$1$1 ==.
                           5503 ;	apps/ydrip/ydrip.c:696: strMMM[3]='\0';
   161E 90s01rDC           5504 	mov	dptr,#(_getTimeBytes_strMMM_1_1 + 0x0003)
   1621 E4                 5505 	clr	a
   1622 F0                 5506 	movx	@dptr,a
                    1623   5507 	C$ydrip.c$698$1$1 ==.
                           5508 ;	apps/ydrip/ydrip.c:698: tVector->iv[4] = '0';
   1623 78r45              5509 	mov	r0,#_getTimeBytes_tVector_1_1
   1625 E2                 5510 	movx	a,@r0
   1626 24 04              5511 	add	a,#0x04
   1628 FE                 5512 	mov	r6,a
   1629 08                 5513 	inc	r0
   162A E2                 5514 	movx	a,@r0
   162B 34 00              5515 	addc	a,#0x00
   162D FF                 5516 	mov	r7,a
   162E 8E 82              5517 	mov	dpl,r6
   1630 8F 83              5518 	mov	dph,r7
   1632 74 30              5519 	mov	a,#0x30
   1634 F0                 5520 	movx	@dptr,a
                    1635   5521 	C$ydrip.c$699$1$1 ==.
                           5522 ;	apps/ydrip/ydrip.c:699: if (strcmp(strMMM,"Jan") == 0) tVector->iv[5] = '1';
   1635 78r00              5523 	mov	r0,#_strcmp_PARM_2
   1637 74r7E              5524 	mov	a,#__str_46
   1639 F2                 5525 	movx	@r0,a
   163A 08                 5526 	inc	r0
   163B 74s09              5527 	mov	a,#(__str_46 >> 8)
   163D F2                 5528 	movx	@r0,a
   163E 08                 5529 	inc	r0
   163F 74 80              5530 	mov	a,#0x80
   1641 F2                 5531 	movx	@r0,a
   1642 90s01rD9           5532 	mov	dptr,#_getTimeBytes_strMMM_1_1
   1645 75 F0 00           5533 	mov	b,#0x00
   1648 C0 07              5534 	push	ar7
   164A C0 06              5535 	push	ar6
   164C 12s00r00           5536 	lcall	_strcmp
   164F E5 82              5537 	mov	a,dpl
   1651 85 83 F0           5538 	mov	b,dph
   1654 D0 06              5539 	pop	ar6
   1656 D0 07              5540 	pop	ar7
   1658 45 F0              5541 	orl	a,b
   165A 70 10              5542 	jnz	00110$
   165C 78r45              5543 	mov	r0,#_getTimeBytes_tVector_1_1
   165E E2                 5544 	movx	a,@r0
   165F 24 05              5545 	add	a,#0x05
   1661 F5 82              5546 	mov	dpl,a
   1663 08                 5547 	inc	r0
   1664 E2                 5548 	movx	a,@r0
   1665 34 00              5549 	addc	a,#0x00
   1667 F5 83              5550 	mov	dph,a
   1669 74 31              5551 	mov	a,#0x31
   166B F0                 5552 	movx	@dptr,a
   166C                    5553 00110$:
                    166C   5554 	C$ydrip.c$700$1$1 ==.
                           5555 ;	apps/ydrip/ydrip.c:700: if (strcmp(strMMM,"Feb") == 0)	tVector->iv[5] = '2';
   166C 78r00              5556 	mov	r0,#_strcmp_PARM_2
   166E 74r82              5557 	mov	a,#__str_47
   1670 F2                 5558 	movx	@r0,a
   1671 08                 5559 	inc	r0
   1672 74s09              5560 	mov	a,#(__str_47 >> 8)
   1674 F2                 5561 	movx	@r0,a
   1675 08                 5562 	inc	r0
   1676 74 80              5563 	mov	a,#0x80
   1678 F2                 5564 	movx	@r0,a
   1679 90s01rD9           5565 	mov	dptr,#_getTimeBytes_strMMM_1_1
   167C 75 F0 00           5566 	mov	b,#0x00
   167F C0 07              5567 	push	ar7
   1681 C0 06              5568 	push	ar6
   1683 12s00r00           5569 	lcall	_strcmp
   1686 E5 82              5570 	mov	a,dpl
   1688 85 83 F0           5571 	mov	b,dph
   168B D0 06              5572 	pop	ar6
   168D D0 07              5573 	pop	ar7
   168F 45 F0              5574 	orl	a,b
   1691 70 10              5575 	jnz	00112$
   1693 78r45              5576 	mov	r0,#_getTimeBytes_tVector_1_1
   1695 E2                 5577 	movx	a,@r0
   1696 24 05              5578 	add	a,#0x05
   1698 F5 82              5579 	mov	dpl,a
   169A 08                 5580 	inc	r0
   169B E2                 5581 	movx	a,@r0
   169C 34 00              5582 	addc	a,#0x00
   169E F5 83              5583 	mov	dph,a
   16A0 74 32              5584 	mov	a,#0x32
   16A2 F0                 5585 	movx	@dptr,a
   16A3                    5586 00112$:
                    16A3   5587 	C$ydrip.c$701$1$1 ==.
                           5588 ;	apps/ydrip/ydrip.c:701: if (strcmp(strMMM,"Mar") == 0)	tVector->iv[5] = '3';
   16A3 78r00              5589 	mov	r0,#_strcmp_PARM_2
   16A5 74r86              5590 	mov	a,#__str_48
   16A7 F2                 5591 	movx	@r0,a
   16A8 08                 5592 	inc	r0
   16A9 74s09              5593 	mov	a,#(__str_48 >> 8)
   16AB F2                 5594 	movx	@r0,a
   16AC 08                 5595 	inc	r0
   16AD 74 80              5596 	mov	a,#0x80
   16AF F2                 5597 	movx	@r0,a
   16B0 90s01rD9           5598 	mov	dptr,#_getTimeBytes_strMMM_1_1
   16B3 75 F0 00           5599 	mov	b,#0x00
   16B6 C0 07              5600 	push	ar7
   16B8 C0 06              5601 	push	ar6
   16BA 12s00r00           5602 	lcall	_strcmp
   16BD E5 82              5603 	mov	a,dpl
   16BF 85 83 F0           5604 	mov	b,dph
   16C2 D0 06              5605 	pop	ar6
   16C4 D0 07              5606 	pop	ar7
   16C6 45 F0              5607 	orl	a,b
   16C8 70 10              5608 	jnz	00114$
   16CA 78r45              5609 	mov	r0,#_getTimeBytes_tVector_1_1
   16CC E2                 5610 	movx	a,@r0
   16CD 24 05              5611 	add	a,#0x05
   16CF F5 82              5612 	mov	dpl,a
   16D1 08                 5613 	inc	r0
   16D2 E2                 5614 	movx	a,@r0
   16D3 34 00              5615 	addc	a,#0x00
   16D5 F5 83              5616 	mov	dph,a
   16D7 74 33              5617 	mov	a,#0x33
   16D9 F0                 5618 	movx	@dptr,a
   16DA                    5619 00114$:
                    16DA   5620 	C$ydrip.c$702$1$1 ==.
                           5621 ;	apps/ydrip/ydrip.c:702: if (strcmp(strMMM,"Apr") == 0)	tVector->iv[5] = '4';
   16DA 78r00              5622 	mov	r0,#_strcmp_PARM_2
   16DC 74r8A              5623 	mov	a,#__str_49
   16DE F2                 5624 	movx	@r0,a
   16DF 08                 5625 	inc	r0
   16E0 74s09              5626 	mov	a,#(__str_49 >> 8)
   16E2 F2                 5627 	movx	@r0,a
   16E3 08                 5628 	inc	r0
   16E4 74 80              5629 	mov	a,#0x80
   16E6 F2                 5630 	movx	@r0,a
   16E7 90s01rD9           5631 	mov	dptr,#_getTimeBytes_strMMM_1_1
   16EA 75 F0 00           5632 	mov	b,#0x00
   16ED C0 07              5633 	push	ar7
   16EF C0 06              5634 	push	ar6
   16F1 12s00r00           5635 	lcall	_strcmp
   16F4 E5 82              5636 	mov	a,dpl
   16F6 85 83 F0           5637 	mov	b,dph
   16F9 D0 06              5638 	pop	ar6
   16FB D0 07              5639 	pop	ar7
   16FD 45 F0              5640 	orl	a,b
   16FF 70 10              5641 	jnz	00116$
   1701 78r45              5642 	mov	r0,#_getTimeBytes_tVector_1_1
   1703 E2                 5643 	movx	a,@r0
   1704 24 05              5644 	add	a,#0x05
   1706 F5 82              5645 	mov	dpl,a
   1708 08                 5646 	inc	r0
   1709 E2                 5647 	movx	a,@r0
   170A 34 00              5648 	addc	a,#0x00
   170C F5 83              5649 	mov	dph,a
   170E 74 34              5650 	mov	a,#0x34
   1710 F0                 5651 	movx	@dptr,a
   1711                    5652 00116$:
                    1711   5653 	C$ydrip.c$703$1$1 ==.
                           5654 ;	apps/ydrip/ydrip.c:703: if (strcmp(strMMM,"May") == 0)	tVector->iv[5] = '5';
   1711 78r00              5655 	mov	r0,#_strcmp_PARM_2
   1713 74r8E              5656 	mov	a,#__str_50
   1715 F2                 5657 	movx	@r0,a
   1716 08                 5658 	inc	r0
   1717 74s09              5659 	mov	a,#(__str_50 >> 8)
   1719 F2                 5660 	movx	@r0,a
   171A 08                 5661 	inc	r0
   171B 74 80              5662 	mov	a,#0x80
   171D F2                 5663 	movx	@r0,a
   171E 90s01rD9           5664 	mov	dptr,#_getTimeBytes_strMMM_1_1
   1721 75 F0 00           5665 	mov	b,#0x00
   1724 C0 07              5666 	push	ar7
   1726 C0 06              5667 	push	ar6
   1728 12s00r00           5668 	lcall	_strcmp
   172B E5 82              5669 	mov	a,dpl
   172D 85 83 F0           5670 	mov	b,dph
   1730 D0 06              5671 	pop	ar6
   1732 D0 07              5672 	pop	ar7
   1734 45 F0              5673 	orl	a,b
   1736 70 10              5674 	jnz	00118$
   1738 78r45              5675 	mov	r0,#_getTimeBytes_tVector_1_1
   173A E2                 5676 	movx	a,@r0
   173B 24 05              5677 	add	a,#0x05
   173D F5 82              5678 	mov	dpl,a
   173F 08                 5679 	inc	r0
   1740 E2                 5680 	movx	a,@r0
   1741 34 00              5681 	addc	a,#0x00
   1743 F5 83              5682 	mov	dph,a
   1745 74 35              5683 	mov	a,#0x35
   1747 F0                 5684 	movx	@dptr,a
   1748                    5685 00118$:
                    1748   5686 	C$ydrip.c$704$1$1 ==.
                           5687 ;	apps/ydrip/ydrip.c:704: if (strcmp(strMMM,"Jun") == 0)	tVector->iv[5] = '6';
   1748 78r00              5688 	mov	r0,#_strcmp_PARM_2
   174A 74r92              5689 	mov	a,#__str_51
   174C F2                 5690 	movx	@r0,a
   174D 08                 5691 	inc	r0
   174E 74s09              5692 	mov	a,#(__str_51 >> 8)
   1750 F2                 5693 	movx	@r0,a
   1751 08                 5694 	inc	r0
   1752 74 80              5695 	mov	a,#0x80
   1754 F2                 5696 	movx	@r0,a
   1755 90s01rD9           5697 	mov	dptr,#_getTimeBytes_strMMM_1_1
   1758 75 F0 00           5698 	mov	b,#0x00
   175B C0 07              5699 	push	ar7
   175D C0 06              5700 	push	ar6
   175F 12s00r00           5701 	lcall	_strcmp
   1762 E5 82              5702 	mov	a,dpl
   1764 85 83 F0           5703 	mov	b,dph
   1767 D0 06              5704 	pop	ar6
   1769 D0 07              5705 	pop	ar7
   176B 45 F0              5706 	orl	a,b
   176D 70 10              5707 	jnz	00120$
   176F 78r45              5708 	mov	r0,#_getTimeBytes_tVector_1_1
   1771 E2                 5709 	movx	a,@r0
   1772 24 05              5710 	add	a,#0x05
   1774 F5 82              5711 	mov	dpl,a
   1776 08                 5712 	inc	r0
   1777 E2                 5713 	movx	a,@r0
   1778 34 00              5714 	addc	a,#0x00
   177A F5 83              5715 	mov	dph,a
   177C 74 36              5716 	mov	a,#0x36
   177E F0                 5717 	movx	@dptr,a
   177F                    5718 00120$:
                    177F   5719 	C$ydrip.c$705$1$1 ==.
                           5720 ;	apps/ydrip/ydrip.c:705: if (strcmp(strMMM,"Jul") == 0)	tVector->iv[5] = '7';
   177F 78r00              5721 	mov	r0,#_strcmp_PARM_2
   1781 74r96              5722 	mov	a,#__str_52
   1783 F2                 5723 	movx	@r0,a
   1784 08                 5724 	inc	r0
   1785 74s09              5725 	mov	a,#(__str_52 >> 8)
   1787 F2                 5726 	movx	@r0,a
   1788 08                 5727 	inc	r0
   1789 74 80              5728 	mov	a,#0x80
   178B F2                 5729 	movx	@r0,a
   178C 90s01rD9           5730 	mov	dptr,#_getTimeBytes_strMMM_1_1
   178F 75 F0 00           5731 	mov	b,#0x00
   1792 C0 07              5732 	push	ar7
   1794 C0 06              5733 	push	ar6
   1796 12s00r00           5734 	lcall	_strcmp
   1799 E5 82              5735 	mov	a,dpl
   179B 85 83 F0           5736 	mov	b,dph
   179E D0 06              5737 	pop	ar6
   17A0 D0 07              5738 	pop	ar7
   17A2 45 F0              5739 	orl	a,b
   17A4 70 10              5740 	jnz	00122$
   17A6 78r45              5741 	mov	r0,#_getTimeBytes_tVector_1_1
   17A8 E2                 5742 	movx	a,@r0
   17A9 24 05              5743 	add	a,#0x05
   17AB F5 82              5744 	mov	dpl,a
   17AD 08                 5745 	inc	r0
   17AE E2                 5746 	movx	a,@r0
   17AF 34 00              5747 	addc	a,#0x00
   17B1 F5 83              5748 	mov	dph,a
   17B3 74 37              5749 	mov	a,#0x37
   17B5 F0                 5750 	movx	@dptr,a
   17B6                    5751 00122$:
                    17B6   5752 	C$ydrip.c$706$1$1 ==.
                           5753 ;	apps/ydrip/ydrip.c:706: if (strcmp(strMMM,"Aug") == 0)	tVector->iv[5] = '8';
   17B6 78r00              5754 	mov	r0,#_strcmp_PARM_2
   17B8 74r9A              5755 	mov	a,#__str_53
   17BA F2                 5756 	movx	@r0,a
   17BB 08                 5757 	inc	r0
   17BC 74s09              5758 	mov	a,#(__str_53 >> 8)
   17BE F2                 5759 	movx	@r0,a
   17BF 08                 5760 	inc	r0
   17C0 74 80              5761 	mov	a,#0x80
   17C2 F2                 5762 	movx	@r0,a
   17C3 90s01rD9           5763 	mov	dptr,#_getTimeBytes_strMMM_1_1
   17C6 75 F0 00           5764 	mov	b,#0x00
   17C9 C0 07              5765 	push	ar7
   17CB C0 06              5766 	push	ar6
   17CD 12s00r00           5767 	lcall	_strcmp
   17D0 E5 82              5768 	mov	a,dpl
   17D2 85 83 F0           5769 	mov	b,dph
   17D5 D0 06              5770 	pop	ar6
   17D7 D0 07              5771 	pop	ar7
   17D9 45 F0              5772 	orl	a,b
   17DB 70 10              5773 	jnz	00124$
   17DD 78r45              5774 	mov	r0,#_getTimeBytes_tVector_1_1
   17DF E2                 5775 	movx	a,@r0
   17E0 24 05              5776 	add	a,#0x05
   17E2 F5 82              5777 	mov	dpl,a
   17E4 08                 5778 	inc	r0
   17E5 E2                 5779 	movx	a,@r0
   17E6 34 00              5780 	addc	a,#0x00
   17E8 F5 83              5781 	mov	dph,a
   17EA 74 38              5782 	mov	a,#0x38
   17EC F0                 5783 	movx	@dptr,a
   17ED                    5784 00124$:
                    17ED   5785 	C$ydrip.c$707$1$1 ==.
                           5786 ;	apps/ydrip/ydrip.c:707: if (strcmp(strMMM,"Sep") == 0)	tVector->iv[5] = '9';
   17ED 78r00              5787 	mov	r0,#_strcmp_PARM_2
   17EF 74r9E              5788 	mov	a,#__str_54
   17F1 F2                 5789 	movx	@r0,a
   17F2 08                 5790 	inc	r0
   17F3 74s09              5791 	mov	a,#(__str_54 >> 8)
   17F5 F2                 5792 	movx	@r0,a
   17F6 08                 5793 	inc	r0
   17F7 74 80              5794 	mov	a,#0x80
   17F9 F2                 5795 	movx	@r0,a
   17FA 90s01rD9           5796 	mov	dptr,#_getTimeBytes_strMMM_1_1
   17FD 75 F0 00           5797 	mov	b,#0x00
   1800 C0 07              5798 	push	ar7
   1802 C0 06              5799 	push	ar6
   1804 12s00r00           5800 	lcall	_strcmp
   1807 E5 82              5801 	mov	a,dpl
   1809 85 83 F0           5802 	mov	b,dph
   180C D0 06              5803 	pop	ar6
   180E D0 07              5804 	pop	ar7
   1810 45 F0              5805 	orl	a,b
   1812 70 10              5806 	jnz	00126$
   1814 78r45              5807 	mov	r0,#_getTimeBytes_tVector_1_1
   1816 E2                 5808 	movx	a,@r0
   1817 24 05              5809 	add	a,#0x05
   1819 F5 82              5810 	mov	dpl,a
   181B 08                 5811 	inc	r0
   181C E2                 5812 	movx	a,@r0
   181D 34 00              5813 	addc	a,#0x00
   181F F5 83              5814 	mov	dph,a
   1821 74 39              5815 	mov	a,#0x39
   1823 F0                 5816 	movx	@dptr,a
   1824                    5817 00126$:
                    1824   5818 	C$ydrip.c$708$1$1 ==.
                           5819 ;	apps/ydrip/ydrip.c:708: if (strcmp(strMMM,"Oct") == 0)	tVector->iv[5] = '0';
   1824 78r00              5820 	mov	r0,#_strcmp_PARM_2
   1826 74rA2              5821 	mov	a,#__str_55
   1828 F2                 5822 	movx	@r0,a
   1829 08                 5823 	inc	r0
   182A 74s09              5824 	mov	a,#(__str_55 >> 8)
   182C F2                 5825 	movx	@r0,a
   182D 08                 5826 	inc	r0
   182E 74 80              5827 	mov	a,#0x80
   1830 F2                 5828 	movx	@r0,a
   1831 90s01rD9           5829 	mov	dptr,#_getTimeBytes_strMMM_1_1
   1834 75 F0 00           5830 	mov	b,#0x00
   1837 C0 07              5831 	push	ar7
   1839 C0 06              5832 	push	ar6
   183B 12s00r00           5833 	lcall	_strcmp
   183E E5 82              5834 	mov	a,dpl
   1840 85 83 F0           5835 	mov	b,dph
   1843 D0 06              5836 	pop	ar6
   1845 D0 07              5837 	pop	ar7
   1847 45 F0              5838 	orl	a,b
   1849 70 10              5839 	jnz	00128$
   184B 78r45              5840 	mov	r0,#_getTimeBytes_tVector_1_1
   184D E2                 5841 	movx	a,@r0
   184E 24 05              5842 	add	a,#0x05
   1850 F5 82              5843 	mov	dpl,a
   1852 08                 5844 	inc	r0
   1853 E2                 5845 	movx	a,@r0
   1854 34 00              5846 	addc	a,#0x00
   1856 F5 83              5847 	mov	dph,a
   1858 74 30              5848 	mov	a,#0x30
   185A F0                 5849 	movx	@dptr,a
   185B                    5850 00128$:
                    185B   5851 	C$ydrip.c$710$1$1 ==.
                           5852 ;	apps/ydrip/ydrip.c:710: if ((strcmp(strMMM,"Oct") == 0) ||(strcmp(strMMM,"Nov") == 0) || (strcmp(strMMM,"Dec")) == 0)	tVector->iv[4] = '1';
   185B 78r00              5853 	mov	r0,#_strcmp_PARM_2
   185D 74rA2              5854 	mov	a,#__str_55
   185F F2                 5855 	movx	@r0,a
   1860 08                 5856 	inc	r0
   1861 74s09              5857 	mov	a,#(__str_55 >> 8)
   1863 F2                 5858 	movx	@r0,a
   1864 08                 5859 	inc	r0
   1865 74 80              5860 	mov	a,#0x80
   1867 F2                 5861 	movx	@r0,a
   1868 90s01rD9           5862 	mov	dptr,#_getTimeBytes_strMMM_1_1
   186B 75 F0 00           5863 	mov	b,#0x00
   186E C0 07              5864 	push	ar7
   1870 C0 06              5865 	push	ar6
   1872 12s00r00           5866 	lcall	_strcmp
   1875 E5 82              5867 	mov	a,dpl
   1877 85 83 F0           5868 	mov	b,dph
   187A D0 06              5869 	pop	ar6
   187C D0 07              5870 	pop	ar7
   187E 45 F0              5871 	orl	a,b
   1880 60 4E              5872 	jz	00129$
   1882 78r00              5873 	mov	r0,#_strcmp_PARM_2
   1884 74rA6              5874 	mov	a,#__str_56
   1886 F2                 5875 	movx	@r0,a
   1887 08                 5876 	inc	r0
   1888 74s09              5877 	mov	a,#(__str_56 >> 8)
   188A F2                 5878 	movx	@r0,a
   188B 08                 5879 	inc	r0
   188C 74 80              5880 	mov	a,#0x80
   188E F2                 5881 	movx	@r0,a
   188F 90s01rD9           5882 	mov	dptr,#_getTimeBytes_strMMM_1_1
   1892 75 F0 00           5883 	mov	b,#0x00
   1895 C0 07              5884 	push	ar7
   1897 C0 06              5885 	push	ar6
   1899 12s00r00           5886 	lcall	_strcmp
   189C E5 82              5887 	mov	a,dpl
   189E 85 83 F0           5888 	mov	b,dph
   18A1 D0 06              5889 	pop	ar6
   18A3 D0 07              5890 	pop	ar7
   18A5 45 F0              5891 	orl	a,b
   18A7 60 27              5892 	jz	00129$
   18A9 78r00              5893 	mov	r0,#_strcmp_PARM_2
   18AB 74rAA              5894 	mov	a,#__str_57
   18AD F2                 5895 	movx	@r0,a
   18AE 08                 5896 	inc	r0
   18AF 74s09              5897 	mov	a,#(__str_57 >> 8)
   18B1 F2                 5898 	movx	@r0,a
   18B2 08                 5899 	inc	r0
   18B3 74 80              5900 	mov	a,#0x80
   18B5 F2                 5901 	movx	@r0,a
   18B6 90s01rD9           5902 	mov	dptr,#_getTimeBytes_strMMM_1_1
   18B9 75 F0 00           5903 	mov	b,#0x00
   18BC C0 07              5904 	push	ar7
   18BE C0 06              5905 	push	ar6
   18C0 12s00r00           5906 	lcall	_strcmp
   18C3 E5 82              5907 	mov	a,dpl
   18C5 85 83 F0           5908 	mov	b,dph
   18C8 D0 06              5909 	pop	ar6
   18CA D0 07              5910 	pop	ar7
   18CC 45 F0              5911 	orl	a,b
   18CE 70 07              5912 	jnz	00130$
   18D0                    5913 00129$:
   18D0 8E 82              5914 	mov	dpl,r6
   18D2 8F 83              5915 	mov	dph,r7
   18D4 74 31              5916 	mov	a,#0x31
   18D6 F0                 5917 	movx	@dptr,a
   18D7                    5918 00130$:
                    18D7   5919 	C$ydrip.c$711$1$1 ==.
                           5920 ;	apps/ydrip/ydrip.c:711: if (strcmp(strMMM,"Nov") == 0)	tVector->iv[5] = '1';
   18D7 78r00              5921 	mov	r0,#_strcmp_PARM_2
   18D9 74rA6              5922 	mov	a,#__str_56
   18DB F2                 5923 	movx	@r0,a
   18DC 08                 5924 	inc	r0
   18DD 74s09              5925 	mov	a,#(__str_56 >> 8)
   18DF F2                 5926 	movx	@r0,a
   18E0 08                 5927 	inc	r0
   18E1 74 80              5928 	mov	a,#0x80
   18E3 F2                 5929 	movx	@r0,a
   18E4 90s01rD9           5930 	mov	dptr,#_getTimeBytes_strMMM_1_1
   18E7 75 F0 00           5931 	mov	b,#0x00
   18EA 12s00r00           5932 	lcall	_strcmp
   18ED E5 82              5933 	mov	a,dpl
   18EF 85 83 F0           5934 	mov	b,dph
   18F2 45 F0              5935 	orl	a,b
   18F4 70 10              5936 	jnz	00134$
   18F6 78r45              5937 	mov	r0,#_getTimeBytes_tVector_1_1
   18F8 E2                 5938 	movx	a,@r0
   18F9 24 05              5939 	add	a,#0x05
   18FB F5 82              5940 	mov	dpl,a
   18FD 08                 5941 	inc	r0
   18FE E2                 5942 	movx	a,@r0
   18FF 34 00              5943 	addc	a,#0x00
   1901 F5 83              5944 	mov	dph,a
   1903 74 31              5945 	mov	a,#0x31
   1905 F0                 5946 	movx	@dptr,a
   1906                    5947 00134$:
                    1906   5948 	C$ydrip.c$712$1$1 ==.
                           5949 ;	apps/ydrip/ydrip.c:712: if (strcmp(strMMM,"Dec") == 0)	tVector->iv[5] = '2';
   1906 78r00              5950 	mov	r0,#_strcmp_PARM_2
   1908 74rAA              5951 	mov	a,#__str_57
   190A F2                 5952 	movx	@r0,a
   190B 08                 5953 	inc	r0
   190C 74s09              5954 	mov	a,#(__str_57 >> 8)
   190E F2                 5955 	movx	@r0,a
   190F 08                 5956 	inc	r0
   1910 74 80              5957 	mov	a,#0x80
   1912 F2                 5958 	movx	@r0,a
   1913 90s01rD9           5959 	mov	dptr,#_getTimeBytes_strMMM_1_1
   1916 75 F0 00           5960 	mov	b,#0x00
   1919 12s00r00           5961 	lcall	_strcmp
   191C E5 82              5962 	mov	a,dpl
   191E 85 83 F0           5963 	mov	b,dph
   1921 45 F0              5964 	orl	a,b
   1923 70 10              5965 	jnz	00137$
   1925 78r45              5966 	mov	r0,#_getTimeBytes_tVector_1_1
   1927 E2                 5967 	movx	a,@r0
   1928 24 05              5968 	add	a,#0x05
   192A F5 82              5969 	mov	dpl,a
   192C 08                 5970 	inc	r0
   192D E2                 5971 	movx	a,@r0
   192E 34 00              5972 	addc	a,#0x00
   1930 F5 83              5973 	mov	dph,a
   1932 74 32              5974 	mov	a,#0x32
   1934 F0                 5975 	movx	@dptr,a
   1935                    5976 00137$:
                    1935   5977 	C$ydrip.c$713$1$1 ==.
                    1935   5978 	XG$getTimeBytes$0$0 ==.
   1935 22                 5979 	ret
                           5980 ;------------------------------------------------------------
                           5981 ;Allocation info for local variables in function 'ESPsleep'
                           5982 ;------------------------------------------------------------
                    1936   5983 	G$ESPsleep$0$0 ==.
                    1936   5984 	C$ydrip.c$716$1$1 ==.
                           5985 ;	apps/ydrip/ydrip.c:716: void ESPsleep () {
                           5986 ;	-----------------------------------------
                           5987 ;	 function ESPsleep
                           5988 ;	-----------------------------------------
   1936                    5989 _ESPsleep:
                    1936   5990 	C$ydrip.c$717$1$1 ==.
                           5991 ;	apps/ydrip/ydrip.c:717: printf("sk:close()\r\n");										// Close the TCP connection	- Response should be CLOSE OK
   1936 74rAE              5992 	mov	a,#__str_58
   1938 C0 E0              5993 	push	acc
   193A 74s09              5994 	mov	a,#(__str_58 >> 8)
   193C C0 E0              5995 	push	acc
   193E 74 80              5996 	mov	a,#0x80
   1940 C0 E0              5997 	push	acc
   1942 12s00r00           5998 	lcall	_printf
   1945 15 81              5999 	dec	sp
   1947 15 81              6000 	dec	sp
   1949 15 81              6001 	dec	sp
                    194B   6002 	C$ydrip.c$718$1$1 ==.
                           6003 ;	apps/ydrip/ydrip.c:718: delayMs(defaultATWait);
   194B 90s00r52           6004 	mov	dptr,#_defaultATWait
   194E E0                 6005 	movx	a,@dptr
   194F FC                 6006 	mov	r4,a
   1950 A3                 6007 	inc	dptr
   1951 E0                 6008 	movx	a,@dptr
   1952 FD                 6009 	mov	r5,a
   1953 A3                 6010 	inc	dptr
   1954 E0                 6011 	movx	a,@dptr
   1955 A3                 6012 	inc	dptr
   1956 E0                 6013 	movx	a,@dptr
   1957 8C 82              6014 	mov	dpl,r4
   1959 8D 83              6015 	mov	dph,r5
   195B 12s00r00           6016 	lcall	_delayMs
                    195E   6017 	C$ydrip.c$719$1$1 ==.
                           6018 ;	apps/ydrip/ydrip.c:719: printf("node.dsleep(270000000)\r\n");							// Deep Sleep 4.5 minutes (270 Seconds) - probably tweak this a bit
   195E 74rBB              6019 	mov	a,#__str_59
   1960 C0 E0              6020 	push	acc
   1962 74s09              6021 	mov	a,#(__str_59 >> 8)
   1964 C0 E0              6022 	push	acc
   1966 74 80              6023 	mov	a,#0x80
   1968 C0 E0              6024 	push	acc
   196A 12s00r00           6025 	lcall	_printf
   196D 15 81              6026 	dec	sp
   196F 15 81              6027 	dec	sp
   1971 15 81              6028 	dec	sp
                    1973   6029 	C$ydrip.c$720$1$1 ==.
                           6030 ;	apps/ydrip/ydrip.c:720: delayMs(defaultATWait);
   1973 90s00r52           6031 	mov	dptr,#_defaultATWait
   1976 E0                 6032 	movx	a,@dptr
   1977 FC                 6033 	mov	r4,a
   1978 A3                 6034 	inc	dptr
   1979 E0                 6035 	movx	a,@dptr
   197A FD                 6036 	mov	r5,a
   197B A3                 6037 	inc	dptr
   197C E0                 6038 	movx	a,@dptr
   197D A3                 6039 	inc	dptr
   197E E0                 6040 	movx	a,@dptr
   197F 8C 82              6041 	mov	dpl,r4
   1981 8D 83              6042 	mov	dph,r5
   1983 12s00r00           6043 	lcall	_delayMs
                    1986   6044 	C$ydrip.c$721$1$1 ==.
                    1986   6045 	XG$ESPsleep$0$0 ==.
   1986 22                 6046 	ret
                           6047 ;------------------------------------------------------------
                           6048 ;Allocation info for local variables in function 'print_packet'
                           6049 ;------------------------------------------------------------
                           6050 ;sloc0                     Allocated with name '_print_packet_sloc0_1_0'
                           6051 ;sloc1                     Allocated with name '_print_packet_sloc1_1_0'
                           6052 ;sloc2                     Allocated with name '_print_packet_sloc2_1_0'
                           6053 ;transID                   Allocated with name '_print_packet_transID_1_1'
                           6054 ;iv                        Allocated with name '_print_packet_iv_1_1'
                           6055 ;i                         Allocated with name '_print_packet_i_1_1'
                           6056 ;sprintfBuffer             Allocated with name '_print_packet_sprintfBuffer_1_1'
                           6057 ;AESBuffer                 Allocated with name '_print_packet_AESBuffer_1_1'
                           6058 ;prtlen                    Allocated with name '_print_packet_prtlen_1_1'
                           6059 ;getTimeResponse           Allocated with name '_print_packet_getTimeResponse_1_1'
                           6060 ;------------------------------------------------------------
                    1987   6061 	G$print_packet$0$0 ==.
                    1987   6062 	C$ydrip.c$724$1$1 ==.
                           6063 ;	apps/ydrip/ydrip.c:724: XDATA void print_packet(Dexcom_packet* pPkt) {
                           6064 ;	-----------------------------------------
                           6065 ;	 function print_packet
                           6066 ;	-----------------------------------------
   1987                    6067 _print_packet:
   1987 AF 83              6068 	mov	r7,dph
   1989 E5 82              6069 	mov	a,dpl
   198B 78r47              6070 	mov	r0,#_print_packet_pPkt_1_1
   198D F2                 6071 	movx	@r0,a
   198E 08                 6072 	inc	r0
   198F EF                 6073 	mov	a,r7
   1990 F2                 6074 	movx	@r0,a
                    1991   6075 	C$ydrip.c$725$1$1 ==.
                           6076 ;	apps/ydrip/ydrip.c:725: XDATA char transID[] = "BLANK"; 
   1991 90s01rDD           6077 	mov	dptr,#_print_packet_transID_1_1
   1994 74 42              6078 	mov	a,#0x42
   1996 F0                 6079 	movx	@dptr,a
   1997 90s01rDE           6080 	mov	dptr,#(_print_packet_transID_1_1 + 0x0001)
   199A 74 4C              6081 	mov	a,#0x4C
   199C F0                 6082 	movx	@dptr,a
   199D 90s01rDF           6083 	mov	dptr,#(_print_packet_transID_1_1 + 0x0002)
   19A0 74 41              6084 	mov	a,#0x41
   19A2 F0                 6085 	movx	@dptr,a
   19A3 90s01rE0           6086 	mov	dptr,#(_print_packet_transID_1_1 + 0x0003)
   19A6 74 4E              6087 	mov	a,#0x4E
   19A8 F0                 6088 	movx	@dptr,a
   19A9 90s01rE1           6089 	mov	dptr,#(_print_packet_transID_1_1 + 0x0004)
   19AC 74 4B              6090 	mov	a,#0x4B
   19AE F0                 6091 	movx	@dptr,a
   19AF 90s01rE2           6092 	mov	dptr,#(_print_packet_transID_1_1 + 0x0005)
                    19B2   6093 	C$ydrip.c$732$1$1 ==.
                           6094 ;	apps/ydrip/ydrip.c:732: XDATA uint8_t iv[16]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
   19B2 E4                 6095 	clr	a
   19B3 F0                 6096 	movx	@dptr,a
   19B4 90s01rE3           6097 	mov	dptr,#_print_packet_iv_1_1
   19B7 F0                 6098 	movx	@dptr,a
   19B8 90s01rE4           6099 	mov	dptr,#(_print_packet_iv_1_1 + 0x0001)
   19BB 74 01              6100 	mov	a,#0x01
   19BD F0                 6101 	movx	@dptr,a
   19BE 90s01rE5           6102 	mov	dptr,#(_print_packet_iv_1_1 + 0x0002)
   19C1 74 02              6103 	mov	a,#0x02
   19C3 F0                 6104 	movx	@dptr,a
   19C4 90s01rE6           6105 	mov	dptr,#(_print_packet_iv_1_1 + 0x0003)
   19C7 74 03              6106 	mov	a,#0x03
   19C9 F0                 6107 	movx	@dptr,a
   19CA 90s01rE7           6108 	mov	dptr,#(_print_packet_iv_1_1 + 0x0004)
   19CD 74 04              6109 	mov	a,#0x04
   19CF F0                 6110 	movx	@dptr,a
   19D0 90s01rE8           6111 	mov	dptr,#(_print_packet_iv_1_1 + 0x0005)
   19D3 74 05              6112 	mov	a,#0x05
   19D5 F0                 6113 	movx	@dptr,a
   19D6 90s01rE9           6114 	mov	dptr,#(_print_packet_iv_1_1 + 0x0006)
   19D9 74 06              6115 	mov	a,#0x06
   19DB F0                 6116 	movx	@dptr,a
   19DC 90s01rEA           6117 	mov	dptr,#(_print_packet_iv_1_1 + 0x0007)
   19DF 74 07              6118 	mov	a,#0x07
   19E1 F0                 6119 	movx	@dptr,a
   19E2 90s01rEB           6120 	mov	dptr,#(_print_packet_iv_1_1 + 0x0008)
   19E5 74 08              6121 	mov	a,#0x08
   19E7 F0                 6122 	movx	@dptr,a
   19E8 90s01rEC           6123 	mov	dptr,#(_print_packet_iv_1_1 + 0x0009)
   19EB 74 09              6124 	mov	a,#0x09
   19ED F0                 6125 	movx	@dptr,a
   19EE 90s01rED           6126 	mov	dptr,#(_print_packet_iv_1_1 + 0x000a)
   19F1 74 0A              6127 	mov	a,#0x0A
   19F3 F0                 6128 	movx	@dptr,a
   19F4 90s01rEE           6129 	mov	dptr,#(_print_packet_iv_1_1 + 0x000b)
   19F7 74 0B              6130 	mov	a,#0x0B
   19F9 F0                 6131 	movx	@dptr,a
   19FA 90s01rEF           6132 	mov	dptr,#(_print_packet_iv_1_1 + 0x000c)
   19FD 74 0C              6133 	mov	a,#0x0C
   19FF F0                 6134 	movx	@dptr,a
   1A00 90s01rF0           6135 	mov	dptr,#(_print_packet_iv_1_1 + 0x000d)
   1A03 74 0D              6136 	mov	a,#0x0D
   1A05 F0                 6137 	movx	@dptr,a
   1A06 90s01rF1           6138 	mov	dptr,#(_print_packet_iv_1_1 + 0x000e)
   1A09 74 0E              6139 	mov	a,#0x0E
   1A0B F0                 6140 	movx	@dptr,a
   1A0C 90s01rF2           6141 	mov	dptr,#(_print_packet_iv_1_1 + 0x000f)
   1A0F 74 0F              6142 	mov	a,#0x0F
   1A11 F0                 6143 	movx	@dptr,a
                    1A12   6144 	C$ydrip.c$741$1$1 ==.
                           6145 ;	apps/ydrip/ydrip.c:741: uartEnable();
   1A12 12s00r2D           6146 	lcall	_uartEnable
                    1A15   6147 	C$ydrip.c$744$2$2 ==.
                           6148 ;	apps/ydrip/ydrip.c:744: LED_YELLOW(0);
   1A15 AD FF              6149 	mov	r5,_P2DIR
   1A17 53 05 FB           6150 	anl	ar5,#0xFB
   1A1A 8D FF              6151 	mov	_P2DIR,r5
                    1A1C   6152 	C$ydrip.c$745$2$3 ==.
                           6153 ;	apps/ydrip/ydrip.c:745: LED_RED(0);
   1A1C AD FF              6154 	mov	r5,_P2DIR
   1A1E 53 05 FD           6155 	anl	ar5,#0xFD
   1A21 8D FF              6156 	mov	_P2DIR,r5
                    1A23   6157 	C$ydrip.c$747$1$1 ==.
                           6158 ;	apps/ydrip/ydrip.c:747: getTimeBytes(&getTimeResponse);							//	Connect to google and get the time
   1A23 90s02r73           6159 	mov	dptr,#_print_packet_getTimeResponse_1_1
   1A26 12s14r90           6160 	lcall	_getTimeBytes
                    1A29   6161 	C$ydrip.c$748$1$1 ==.
                           6162 ;	apps/ydrip/ydrip.c:748: strcpy(iv, getTimeResponse.iv);							//	and use this to populate the Initialisation Vector
   1A29 78r00              6163 	mov	r0,#_strcpy_PARM_2
   1A2B 74r73              6164 	mov	a,#_print_packet_getTimeResponse_1_1
   1A2D F2                 6165 	movx	@r0,a
   1A2E 08                 6166 	inc	r0
   1A2F 74s02              6167 	mov	a,#(_print_packet_getTimeResponse_1_1 >> 8)
   1A31 F2                 6168 	movx	@r0,a
   1A32 08                 6169 	inc	r0
   1A33 E4                 6170 	clr	a
   1A34 F2                 6171 	movx	@r0,a
   1A35 90s01rE3           6172 	mov	dptr,#_print_packet_iv_1_1
   1A38 75 F0 00           6173 	mov	b,#0x00
   1A3B 12s00r00           6174 	lcall	_strcpy
                    1A3E   6175 	C$ydrip.c$749$1$1 ==.
                           6176 ;	apps/ydrip/ydrip.c:749: if (debug_mode) printf("-- **DEBUG** iv is %s\r\n", iv);
   1A3E 30*03 20           6177 	jnb	_debug_mode,00102$
   1A41 74rE3              6178 	mov	a,#_print_packet_iv_1_1
   1A43 C0 E0              6179 	push	acc
   1A45 74s01              6180 	mov	a,#(_print_packet_iv_1_1 >> 8)
   1A47 C0 E0              6181 	push	acc
   1A49 E4                 6182 	clr	a
   1A4A C0 E0              6183 	push	acc
   1A4C 74rD4              6184 	mov	a,#__str_61
   1A4E C0 E0              6185 	push	acc
   1A50 74s09              6186 	mov	a,#(__str_61 >> 8)
   1A52 C0 E0              6187 	push	acc
   1A54 74 80              6188 	mov	a,#0x80
   1A56 C0 E0              6189 	push	acc
   1A58 12s00r00           6190 	lcall	_printf
   1A5B E5 81              6191 	mov	a,sp
   1A5D 24 FA              6192 	add	a,#0xfa
   1A5F F5 81              6193 	mov	sp,a
   1A61                    6194 00102$:
                    1A61   6195 	C$ydrip.c$751$1$1 ==.
                           6196 ;	apps/ydrip/ydrip.c:751: iv[14]=pPkt->txId;										//	Randomise the IV further by updating this spare byte with the packet sequence number
   1A61 78r47              6197 	mov	r0,#_print_packet_pPkt_1_1
   1A63 E2                 6198 	movx	a,@r0
   1A64 24 0B              6199 	add	a,#0x0B
   1A66 FC                 6200 	mov	r4,a
   1A67 08                 6201 	inc	r0
   1A68 E2                 6202 	movx	a,@r0
   1A69 34 00              6203 	addc	a,#0x00
   1A6B FD                 6204 	mov	r5,a
   1A6C 8C 82              6205 	mov	dpl,r4
   1A6E 8D 83              6206 	mov	dph,r5
   1A70 E0                 6207 	movx	a,@dptr
   1A71 90s01rF1           6208 	mov	dptr,#(_print_packet_iv_1_1 + 0x000e)
   1A74 F0                 6209 	movx	@dptr,a
                    1A75   6210 	C$ydrip.c$752$1$1 ==.
                           6211 ;	apps/ydrip/ydrip.c:752: iv[15]=pPkt->checksum;									//	Randomise the IV further by updating this other spare byte with the packet checksum
   1A75 78r47              6212 	mov	r0,#_print_packet_pPkt_1_1
   1A77 E2                 6213 	movx	a,@r0
   1A78 24 12              6214 	add	a,#0x12
   1A7A F5 82              6215 	mov	dpl,a
   1A7C 08                 6216 	inc	r0
   1A7D E2                 6217 	movx	a,@r0
   1A7E 34 00              6218 	addc	a,#0x00
   1A80 F5 83              6219 	mov	dph,a
   1A82 E0                 6220 	movx	a,@dptr
   1A83 90s01rF2           6221 	mov	dptr,#(_print_packet_iv_1_1 + 0x000f)
   1A86 F0                 6222 	movx	@dptr,a
                    1A87   6223 	C$ydrip.c$754$1$1 ==.
                           6224 ;	apps/ydrip/ydrip.c:754: if (wifiConnect()) {		// Establish a connection to the Dexie server
   1A87 C0 05              6225 	push	ar5
   1A89 C0 04              6226 	push	ar4
   1A8B 12s10rFC           6227 	lcall	_wifiConnect
   1A8E D0 04              6228 	pop	ar4
   1A90 D0 05              6229 	pop	ar5
   1A92 40 03              6230 	jc	00135$
   1A94 02s1Dr3D           6231 	ljmp	00107$
   1A97                    6232 00135$:
                    1A97   6233 	C$ydrip.c$755$3$5 ==.
                           6234 ;	apps/ydrip/ydrip.c:755: LED_RED(1);
   1A97 43 FF 02           6235 	orl	_P2DIR,#0x02
                    1A9A   6236 	C$ydrip.c$756$2$4 ==.
                           6237 ;	apps/ydrip/ydrip.c:756: dexcom_src_to_ascii(pPkt->src_addr, transID);			// Get a human-readable version of the Dexcom Transmitter ID
   1A9A 78r47              6238 	mov	r0,#_print_packet_pPkt_1_1
   1A9C E2                 6239 	movx	a,@r0
   1A9D 24 05              6240 	add	a,#0x05
   1A9F F5 82              6241 	mov	dpl,a
   1AA1 08                 6242 	inc	r0
   1AA2 E2                 6243 	movx	a,@r0
   1AA3 34 00              6244 	addc	a,#0x00
   1AA5 F5 83              6245 	mov	dph,a
   1AA7 E0                 6246 	movx	a,@dptr
   1AA8 FA                 6247 	mov	r2,a
   1AA9 A3                 6248 	inc	dptr
   1AAA E0                 6249 	movx	a,@dptr
   1AAB FB                 6250 	mov	r3,a
   1AAC A3                 6251 	inc	dptr
   1AAD E0                 6252 	movx	a,@dptr
   1AAE FE                 6253 	mov	r6,a
   1AAF A3                 6254 	inc	dptr
   1AB0 E0                 6255 	movx	a,@dptr
   1AB1 FF                 6256 	mov	r7,a
   1AB2 90s00r03           6257 	mov	dptr,#_dexcom_src_to_ascii_PARM_2
   1AB5 74rDD              6258 	mov	a,#_print_packet_transID_1_1
   1AB7 F0                 6259 	movx	@dptr,a
   1AB8 A3                 6260 	inc	dptr
   1AB9 74s01              6261 	mov	a,#(_print_packet_transID_1_1 >> 8)
   1ABB F0                 6262 	movx	@dptr,a
   1ABC 8A 82              6263 	mov	dpl,r2
   1ABE 8B 83              6264 	mov	dph,r3
   1AC0 8E F0              6265 	mov	b,r6
   1AC2 EF                 6266 	mov	a,r7
   1AC3 C0 05              6267 	push	ar5
   1AC5 C0 04              6268 	push	ar4
   1AC7 12s02r17           6269 	lcall	_dexcom_src_to_ascii
   1ACA D0 04              6270 	pop	ar4
   1ACC D0 05              6271 	pop	ar5
                    1ACE   6272 	C$ydrip.c$765$2$4 ==.
                           6273 ;	apps/ydrip/ydrip.c:765: (((pPkt->RSSI)/2)-73));							//		Received Signal Strength Indicator
   1ACE 78r47              6274 	mov	r0,#_print_packet_pPkt_1_1
   1AD0 E2                 6275 	movx	a,@r0
   1AD1 24 13              6276 	add	a,#0x13
   1AD3 F5 82              6277 	mov	dpl,a
   1AD5 08                 6278 	inc	r0
   1AD6 E2                 6279 	movx	a,@r0
   1AD7 34 00              6280 	addc	a,#0x00
   1AD9 F5 83              6281 	mov	dph,a
   1ADB E0                 6282 	movx	a,@dptr
   1ADC FF                 6283 	mov	r7,a
   1ADD C2 D5              6284 	clr	F0
   1ADF 75 F0 02           6285 	mov	b,#0x02
   1AE2 EF                 6286 	mov	a,r7
   1AE3 30 E7 04           6287 	jnb	acc.7,00136$
   1AE6 B2 D5              6288 	cpl	F0
   1AE8 F4                 6289 	cpl	a
   1AE9 04                 6290 	inc	a
   1AEA                    6291 00136$:
   1AEA 84                 6292 	div	ab
   1AEB 30 D5 02           6293 	jnb	F0,00137$
   1AEE F4                 6294 	cpl	a
   1AEF 04                 6295 	inc	a
   1AF0                    6296 00137$:
   1AF0 C0 E0              6297 	push	acc
   1AF2 A2 D5              6298 	mov	c,F0
   1AF4 95 E0              6299 	subb	a,acc
   1AF6 F5 F0              6300 	mov	b,a
   1AF8 D0 E0              6301 	pop	acc
   1AFA 24 B7              6302 	add	a,#0xB7
   1AFC F5*06              6303 	mov	_print_packet_sloc1_1_0,a
   1AFE E5 F0              6304 	mov	a,b
   1B00 34 FF              6305 	addc	a,#0xFF
   1B02 F5*07              6306 	mov	(_print_packet_sloc1_1_0 + 1),a
                    1B04   6307 	C$ydrip.c$764$2$4 ==.
                           6308 ;	apps/ydrip/ydrip.c:764: pPkt->battery, 					 				// 		Dexcom Transmitter Battery
   1B04 78r47              6309 	mov	r0,#_print_packet_pPkt_1_1
   1B06 E2                 6310 	movx	a,@r0
   1B07 24 10              6311 	add	a,#0x10
   1B09 F5 82              6312 	mov	dpl,a
   1B0B 08                 6313 	inc	r0
   1B0C E2                 6314 	movx	a,@r0
   1B0D 34 00              6315 	addc	a,#0x00
   1B0F F5 83              6316 	mov	dph,a
   1B11 E0                 6317 	movx	a,@dptr
   1B12 FB                 6318 	mov	r3,a
   1B13 8B*04              6319 	mov	_print_packet_sloc0_1_0,r3
   1B15 75*05 00           6320 	mov	(_print_packet_sloc0_1_0 + 1),#0x00
                    1B18   6321 	C$ydrip.c$763$2$4 ==.
                           6322 ;	apps/ydrip/ydrip.c:763: dex_num_decoder(pPkt->filtered)*2,				// 		Filtered BG Value
   1B18 78r47              6323 	mov	r0,#_print_packet_pPkt_1_1
   1B1A E2                 6324 	movx	a,@r0
   1B1B 24 0E              6325 	add	a,#0x0E
   1B1D F5 82              6326 	mov	dpl,a
   1B1F 08                 6327 	inc	r0
   1B20 E2                 6328 	movx	a,@r0
   1B21 34 00              6329 	addc	a,#0x00
   1B23 F5 83              6330 	mov	dph,a
   1B25 E0                 6331 	movx	a,@dptr
   1B26 FA                 6332 	mov	r2,a
   1B27 A3                 6333 	inc	dptr
   1B28 E0                 6334 	movx	a,@dptr
   1B29 FB                 6335 	mov	r3,a
   1B2A 8A 82              6336 	mov	dpl,r2
   1B2C 8B 83              6337 	mov	dph,r3
   1B2E C0 05              6338 	push	ar5
   1B30 C0 04              6339 	push	ar4
   1B32 12s01rC3           6340 	lcall	_dex_num_decoder
   1B35 AA 82              6341 	mov	r2,dpl
   1B37 AB 83              6342 	mov	r3,dph
   1B39 AE F0              6343 	mov	r6,b
   1B3B FF                 6344 	mov	r7,a
   1B3C EA                 6345 	mov	a,r2
   1B3D 2A                 6346 	add	a,r2
   1B3E F5*08              6347 	mov	_print_packet_sloc2_1_0,a
   1B40 EB                 6348 	mov	a,r3
   1B41 33                 6349 	rlc	a
   1B42 F5*09              6350 	mov	(_print_packet_sloc2_1_0 + 1),a
   1B44 EE                 6351 	mov	a,r6
   1B45 33                 6352 	rlc	a
   1B46 F5*0A              6353 	mov	(_print_packet_sloc2_1_0 + 2),a
   1B48 EF                 6354 	mov	a,r7
   1B49 33                 6355 	rlc	a
   1B4A F5*0B              6356 	mov	(_print_packet_sloc2_1_0 + 3),a
                    1B4C   6357 	C$ydrip.c$762$2$4 ==.
                           6358 ;	apps/ydrip/ydrip.c:762: dex_num_decoder(pPkt->raw),		 				// 		Raw BQ Value
   1B4C 78r47              6359 	mov	r0,#_print_packet_pPkt_1_1
   1B4E E2                 6360 	movx	a,@r0
   1B4F 24 0C              6361 	add	a,#0x0C
   1B51 F5 82              6362 	mov	dpl,a
   1B53 08                 6363 	inc	r0
   1B54 E2                 6364 	movx	a,@r0
   1B55 34 00              6365 	addc	a,#0x00
   1B57 F5 83              6366 	mov	dph,a
   1B59 E0                 6367 	movx	a,@dptr
   1B5A FE                 6368 	mov	r6,a
   1B5B A3                 6369 	inc	dptr
   1B5C E0                 6370 	movx	a,@dptr
   1B5D FF                 6371 	mov	r7,a
   1B5E 8E 82              6372 	mov	dpl,r6
   1B60 8F 83              6373 	mov	dph,r7
   1B62 12s01rC3           6374 	lcall	_dex_num_decoder
   1B65 AA 82              6375 	mov	r2,dpl
   1B67 AB 83              6376 	mov	r3,dph
   1B69 AE F0              6377 	mov	r6,b
   1B6B FF                 6378 	mov	r7,a
   1B6C D0 04              6379 	pop	ar4
   1B6E D0 05              6380 	pop	ar5
                    1B70   6381 	C$ydrip.c$761$2$4 ==.
                           6382 ;	apps/ydrip/ydrip.c:761: transID,						 				// 		Transmitter ID - from packet in case only_listen_for_my_transmitter false
                    1B70   6383 	C$ydrip.c$760$2$4 ==.
                           6384 ;	apps/ydrip/ydrip.c:760: pPkt->txId, 					 				// 		Transmission ID - unique-ish identifier
   1B70 8C 82              6385 	mov	dpl,r4
   1B72 8D 83              6386 	mov	dph,r5
   1B74 E0                 6387 	movx	a,@dptr
   1B75 FC                 6388 	mov	r4,a
   1B76 7D 00              6389 	mov	r5,#0x00
                    1B78   6390 	C$ydrip.c$759$2$4 ==.
                           6391 ;	apps/ydrip/ydrip.c:759: wixFone_ID, 					 				// 		xDrip2g Device Identifier
                    1B78   6392 	C$ydrip.c$758$2$4 ==.
                           6393 ;	apps/ydrip/ydrip.c:758: prtlen = sprintf(sprintfBuffer, "%s %hhu %s %lu %lu %d %d 100 -16.127100,51.241300",		// Includes home GPS coordinates for Dexie	
   1B78 C0*06              6394 	push	_print_packet_sloc1_1_0
   1B7A C0*07              6395 	push	(_print_packet_sloc1_1_0 + 1)
   1B7C C0*04              6396 	push	_print_packet_sloc0_1_0
   1B7E C0*05              6397 	push	(_print_packet_sloc0_1_0 + 1)
   1B80 C0*08              6398 	push	_print_packet_sloc2_1_0
   1B82 C0*09              6399 	push	(_print_packet_sloc2_1_0 + 1)
   1B84 C0*0A              6400 	push	(_print_packet_sloc2_1_0 + 2)
   1B86 C0*0B              6401 	push	(_print_packet_sloc2_1_0 + 3)
   1B88 C0 02              6402 	push	ar2
   1B8A C0 03              6403 	push	ar3
   1B8C C0 06              6404 	push	ar6
   1B8E C0 07              6405 	push	ar7
   1B90 74rDD              6406 	mov	a,#_print_packet_transID_1_1
   1B92 C0 E0              6407 	push	acc
   1B94 74s01              6408 	mov	a,#(_print_packet_transID_1_1 >> 8)
   1B96 C0 E0              6409 	push	acc
   1B98 E4                 6410 	clr	a
   1B99 C0 E0              6411 	push	acc
   1B9B C0 04              6412 	push	ar4
   1B9D C0 05              6413 	push	ar5
   1B9F 74r25              6414 	mov	a,#_wixFone_ID
   1BA1 C0 E0              6415 	push	acc
   1BA3 74s00              6416 	mov	a,#(_wixFone_ID >> 8)
   1BA5 C0 E0              6417 	push	acc
   1BA7 E4                 6418 	clr	a
   1BA8 C0 E0              6419 	push	acc
   1BAA 74rEC              6420 	mov	a,#__str_62
   1BAC C0 E0              6421 	push	acc
   1BAE 74s09              6422 	mov	a,#(__str_62 >> 8)
   1BB0 C0 E0              6423 	push	acc
   1BB2 74 80              6424 	mov	a,#0x80
   1BB4 C0 E0              6425 	push	acc
   1BB6 74rF3              6426 	mov	a,#_print_packet_sprintfBuffer_1_1
   1BB8 C0 E0              6427 	push	acc
   1BBA 74s01              6428 	mov	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   1BBC C0 E0              6429 	push	acc
   1BBE E4                 6430 	clr	a
   1BBF C0 E0              6431 	push	acc
   1BC1 12s00r00           6432 	lcall	_sprintf
   1BC4 AE 82              6433 	mov	r6,dpl
   1BC6 E5 81              6434 	mov	a,sp
   1BC8 24 E6              6435 	add	a,#0xe6
   1BCA F5 81              6436 	mov	sp,a
                    1BCC   6437 	C$ydrip.c$767$2$4 ==.
                           6438 ;	apps/ydrip/ydrip.c:767: for(i = prtlen; i < 64; ++i)
   1BCC 8E 07              6439 	mov	ar7,r6
   1BCE                    6440 00108$:
   1BCE BF 40 00           6441 	cjne	r7,#0x40,00138$
   1BD1                    6442 00138$:
   1BD1 50 10              6443 	jnc	00111$
                    1BD3   6444 	C$ydrip.c$768$2$4 ==.
                           6445 ;	apps/ydrip/ydrip.c:768: sprintfBuffer[i]=' ';							//		Fill rest of array with spaces
   1BD3 EF                 6446 	mov	a,r7
   1BD4 24rF3              6447 	add	a,#_print_packet_sprintfBuffer_1_1
   1BD6 F5 82              6448 	mov	dpl,a
   1BD8 E4                 6449 	clr	a
   1BD9 34s01              6450 	addc	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   1BDB F5 83              6451 	mov	dph,a
   1BDD 74 20              6452 	mov	a,#0x20
   1BDF F0                 6453 	movx	@dptr,a
                    1BE0   6454 	C$ydrip.c$767$2$4 ==.
                           6455 ;	apps/ydrip/ydrip.c:767: for(i = prtlen; i < 64; ++i)
   1BE0 0F                 6456 	inc	r7
   1BE1 80 EB              6457 	sjmp	00108$
   1BE3                    6458 00111$:
                    1BE3   6459 	C$ydrip.c$770$2$4 ==.
                           6460 ;	apps/ydrip/ydrip.c:770: if (encrypt_output==1) {							//		Check if to encode the output using AES-128 encryption
   1BE3 20*04 03           6461 	jb	_encrypt_output,00140$
   1BE6 02s1Cr7B           6462 	ljmp	00104$
   1BE9                    6463 00140$:
                    1BE9   6464 	C$ydrip.c$771$3$6 ==.
                           6465 ;	apps/ydrip/ydrip.c:771: AES128_CBC_encrypt_buffer(AESBuffer, sprintfBuffer, 64, key, iv);   //	encrypt(output, input, length, key, vector)
   1BE9 90s00r00           6466 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_2
   1BEC 74rF3              6467 	mov	a,#_print_packet_sprintfBuffer_1_1
   1BEE F0                 6468 	movx	@dptr,a
   1BEF A3                 6469 	inc	dptr
   1BF0 74s01              6470 	mov	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   1BF2 F0                 6471 	movx	@dptr,a
   1BF3 90s00r00           6472 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_3
   1BF6 74 40              6473 	mov	a,#0x40
   1BF8 F0                 6474 	movx	@dptr,a
   1BF9 A3                 6475 	inc	dptr
   1BFA E4                 6476 	clr	a
   1BFB F0                 6477 	movx	@dptr,a
   1BFC A3                 6478 	inc	dptr
   1BFD F0                 6479 	movx	@dptr,a
   1BFE A3                 6480 	inc	dptr
   1BFF F0                 6481 	movx	@dptr,a
   1C00 90s00r00           6482 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_4
   1C03 74r2D              6483 	mov	a,#_key
   1C05 F0                 6484 	movx	@dptr,a
   1C06 A3                 6485 	inc	dptr
   1C07 74s00              6486 	mov	a,#(_key >> 8)
   1C09 F0                 6487 	movx	@dptr,a
   1C0A 90s00r00           6488 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_5
   1C0D 74rE3              6489 	mov	a,#_print_packet_iv_1_1
   1C0F F0                 6490 	movx	@dptr,a
   1C10 A3                 6491 	inc	dptr
   1C11 74s01              6492 	mov	a,#(_print_packet_iv_1_1 >> 8)
   1C13 F0                 6493 	movx	@dptr,a
   1C14 90s02r33           6494 	mov	dptr,#_print_packet_AESBuffer_1_1
   1C17 12s00r00           6495 	lcall	_AES128_CBC_encrypt_buffer
                    1C1A   6496 	C$ydrip.c$772$3$6 ==.
                           6497 ;	apps/ydrip/ydrip.c:772: printf("sk:send(\"yDrip(AES): ");				//		Send the preamble to the Dexie Server first
   1C1A 74r1E              6498 	mov	a,#__str_63
   1C1C C0 E0              6499 	push	acc
   1C1E 74s0A              6500 	mov	a,#(__str_63 >> 8)
   1C20 C0 E0              6501 	push	acc
   1C22 74 80              6502 	mov	a,#0x80
   1C24 C0 E0              6503 	push	acc
   1C26 12s00r00           6504 	lcall	_printf
   1C29 15 81              6505 	dec	sp
   1C2B 15 81              6506 	dec	sp
   1C2D 15 81              6507 	dec	sp
                    1C2F   6508 	C$ydrip.c$773$1$1 ==.
                           6509 ;	apps/ydrip/ydrip.c:773: for(i = 0; i < 16; ++i)							
   1C2F 7F 00              6510 	mov	r7,#0x00
   1C31                    6511 00112$:
   1C31 BF 10 00           6512 	cjne	r7,#0x10,00141$
   1C34                    6513 00141$:
   1C34 50 2E              6514 	jnc	00115$
                    1C36   6515 	C$ydrip.c$774$3$6 ==.
                           6516 ;	apps/ydrip/ydrip.c:774: printf("%02x", iv[i]);						//		Print initialisation vector as cleartext.  This is not a secret, just unique.
   1C36 EF                 6517 	mov	a,r7
   1C37 24rE3              6518 	add	a,#_print_packet_iv_1_1
   1C39 F5 82              6519 	mov	dpl,a
   1C3B E4                 6520 	clr	a
   1C3C 34s01              6521 	addc	a,#(_print_packet_iv_1_1 >> 8)
   1C3E F5 83              6522 	mov	dph,a
   1C40 E0                 6523 	movx	a,@dptr
   1C41 FE                 6524 	mov	r6,a
   1C42 7D 00              6525 	mov	r5,#0x00
   1C44 C0 07              6526 	push	ar7
   1C46 C0 06              6527 	push	ar6
   1C48 C0 05              6528 	push	ar5
   1C4A 74r34              6529 	mov	a,#__str_64
   1C4C C0 E0              6530 	push	acc
   1C4E 74s0A              6531 	mov	a,#(__str_64 >> 8)
   1C50 C0 E0              6532 	push	acc
   1C52 74 80              6533 	mov	a,#0x80
   1C54 C0 E0              6534 	push	acc
   1C56 12s00r00           6535 	lcall	_printf
   1C59 E5 81              6536 	mov	a,sp
   1C5B 24 FB              6537 	add	a,#0xfb
   1C5D F5 81              6538 	mov	sp,a
   1C5F D0 07              6539 	pop	ar7
                    1C61   6540 	C$ydrip.c$773$3$6 ==.
                           6541 ;	apps/ydrip/ydrip.c:773: for(i = 0; i < 16; ++i)							
   1C61 0F                 6542 	inc	r7
   1C62 80 CD              6543 	sjmp	00112$
   1C64                    6544 00115$:
                    1C64   6545 	C$ydrip.c$775$3$6 ==.
                           6546 ;	apps/ydrip/ydrip.c:775: printf(" ");									//		Separate IV from encrypted text with a delimiting space
   1C64 74r39              6547 	mov	a,#__str_65
   1C66 C0 E0              6548 	push	acc
   1C68 74s0A              6549 	mov	a,#(__str_65 >> 8)
   1C6A C0 E0              6550 	push	acc
   1C6C 74 80              6551 	mov	a,#0x80
   1C6E C0 E0              6552 	push	acc
   1C70 12s00r00           6553 	lcall	_printf
   1C73 15 81              6554 	dec	sp
   1C75 15 81              6555 	dec	sp
   1C77 15 81              6556 	dec	sp
   1C79 80 2A              6557 	sjmp	00130$
   1C7B                    6558 00104$:
                    1C7B   6559 	C$ydrip.c$777$3$7 ==.
                           6560 ;	apps/ydrip/ydrip.c:777: strcpy(AESBuffer, sprintfBuffer); 				// 		Just copy the characters that we want to send in the clear if no encryption
   1C7B 78r00              6561 	mov	r0,#_strcpy_PARM_2
   1C7D 74rF3              6562 	mov	a,#_print_packet_sprintfBuffer_1_1
   1C7F F2                 6563 	movx	@r0,a
   1C80 08                 6564 	inc	r0
   1C81 74s01              6565 	mov	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   1C83 F2                 6566 	movx	@r0,a
   1C84 08                 6567 	inc	r0
   1C85 E4                 6568 	clr	a
   1C86 F2                 6569 	movx	@r0,a
   1C87 90s02r33           6570 	mov	dptr,#_print_packet_AESBuffer_1_1
   1C8A 75 F0 00           6571 	mov	b,#0x00
   1C8D 12s00r00           6572 	lcall	_strcpy
                    1C90   6573 	C$ydrip.c$778$3$7 ==.
                           6574 ;	apps/ydrip/ydrip.c:778: printf("sk:send(\"yDrip: ");					//		Slightly different preamble so Dexie knows the/re is no encryption - and no IV needed
   1C90 74r3B              6575 	mov	a,#__str_66
   1C92 C0 E0              6576 	push	acc
   1C94 74s0A              6577 	mov	a,#(__str_66 >> 8)
   1C96 C0 E0              6578 	push	acc
   1C98 74 80              6579 	mov	a,#0x80
   1C9A C0 E0              6580 	push	acc
   1C9C 12s00r00           6581 	lcall	_printf
   1C9F 15 81              6582 	dec	sp
   1CA1 15 81              6583 	dec	sp
   1CA3 15 81              6584 	dec	sp
                    1CA5   6585 	C$ydrip.c$781$1$1 ==.
                           6586 ;	apps/ydrip/ydrip.c:781: for(i = 0; i < 64; ++i) 							//		Loop through 64 character block of encrypted text
   1CA5                    6587 00130$:
   1CA5 7F 00              6588 	mov	r7,#0x00
   1CA7                    6589 00116$:
   1CA7 BF 40 00           6590 	cjne	r7,#0x40,00143$
   1CAA                    6591 00143$:
   1CAA 50 2E              6592 	jnc	00119$
                    1CAC   6593 	C$ydrip.c$782$2$4 ==.
                           6594 ;	apps/ydrip/ydrip.c:782: printf("%02x", AESBuffer[i]);					//		and print each character, one by one
   1CAC EF                 6595 	mov	a,r7
   1CAD 24r33              6596 	add	a,#_print_packet_AESBuffer_1_1
   1CAF F5 82              6597 	mov	dpl,a
   1CB1 E4                 6598 	clr	a
   1CB2 34s02              6599 	addc	a,#(_print_packet_AESBuffer_1_1 >> 8)
   1CB4 F5 83              6600 	mov	dph,a
   1CB6 E0                 6601 	movx	a,@dptr
   1CB7 FE                 6602 	mov	r6,a
   1CB8 7D 00              6603 	mov	r5,#0x00
   1CBA C0 07              6604 	push	ar7
   1CBC C0 06              6605 	push	ar6
   1CBE C0 05              6606 	push	ar5
   1CC0 74r34              6607 	mov	a,#__str_64
   1CC2 C0 E0              6608 	push	acc
   1CC4 74s0A              6609 	mov	a,#(__str_64 >> 8)
   1CC6 C0 E0              6610 	push	acc
   1CC8 74 80              6611 	mov	a,#0x80
   1CCA C0 E0              6612 	push	acc
   1CCC 12s00r00           6613 	lcall	_printf
   1CCF E5 81              6614 	mov	a,sp
   1CD1 24 FB              6615 	add	a,#0xfb
   1CD3 F5 81              6616 	mov	sp,a
   1CD5 D0 07              6617 	pop	ar7
                    1CD7   6618 	C$ydrip.c$781$2$4 ==.
                           6619 ;	apps/ydrip/ydrip.c:781: for(i = 0; i < 64; ++i) 							//		Loop through 64 character block of encrypted text
   1CD7 0F                 6620 	inc	r7
   1CD8 80 CD              6621 	sjmp	00116$
   1CDA                    6622 00119$:
                    1CDA   6623 	C$ydrip.c$784$2$4 ==.
                           6624 ;	apps/ydrip/ydrip.c:784: printf("\\r\\n\")\r\n");	delayMs(defaultATWait);	// 		CR/LF
   1CDA 74r4C              6625 	mov	a,#__str_67
   1CDC C0 E0              6626 	push	acc
   1CDE 74s0A              6627 	mov	a,#(__str_67 >> 8)
   1CE0 C0 E0              6628 	push	acc
   1CE2 74 80              6629 	mov	a,#0x80
   1CE4 C0 E0              6630 	push	acc
   1CE6 12s00r00           6631 	lcall	_printf
   1CE9 15 81              6632 	dec	sp
   1CEB 15 81              6633 	dec	sp
   1CED 15 81              6634 	dec	sp
   1CEF 90s00r52           6635 	mov	dptr,#_defaultATWait
   1CF2 E0                 6636 	movx	a,@dptr
   1CF3 FC                 6637 	mov	r4,a
   1CF4 A3                 6638 	inc	dptr
   1CF5 E0                 6639 	movx	a,@dptr
   1CF6 FD                 6640 	mov	r5,a
   1CF7 A3                 6641 	inc	dptr
   1CF8 E0                 6642 	movx	a,@dptr
   1CF9 A3                 6643 	inc	dptr
   1CFA E0                 6644 	movx	a,@dptr
   1CFB 8C 82              6645 	mov	dpl,r4
   1CFD 8D 83              6646 	mov	dph,r5
   1CFF 12s00r00           6647 	lcall	_delayMs
                    1D02   6648 	C$ydrip.c$786$2$4 ==.
                           6649 ;	apps/ydrip/ydrip.c:786: printf("gpio.write(4, gpio.HIGH)\r\n"); delayMs(defaultATWait);	// Switch off blue LED
   1D02 74r28              6650 	mov	a,#__str_30
   1D04 C0 E0              6651 	push	acc
   1D06 74s07              6652 	mov	a,#(__str_30 >> 8)
   1D08 C0 E0              6653 	push	acc
   1D0A 74 80              6654 	mov	a,#0x80
   1D0C C0 E0              6655 	push	acc
   1D0E 12s00r00           6656 	lcall	_printf
   1D11 15 81              6657 	dec	sp
   1D13 15 81              6658 	dec	sp
   1D15 15 81              6659 	dec	sp
   1D17 90s00r52           6660 	mov	dptr,#_defaultATWait
   1D1A E0                 6661 	movx	a,@dptr
   1D1B FC                 6662 	mov	r4,a
   1D1C A3                 6663 	inc	dptr
   1D1D E0                 6664 	movx	a,@dptr
   1D1E FD                 6665 	mov	r5,a
   1D1F A3                 6666 	inc	dptr
   1D20 E0                 6667 	movx	a,@dptr
   1D21 A3                 6668 	inc	dptr
   1D22 E0                 6669 	movx	a,@dptr
   1D23 8C 82              6670 	mov	dpl,r4
   1D25 8D 83              6671 	mov	dph,r5
   1D27 12s00r00           6672 	lcall	_delayMs
                    1D2A   6673 	C$ydrip.c$788$2$4 ==.
                           6674 ;	apps/ydrip/ydrip.c:788: delayMs(defaultATWait);									// Need to wait here also as sometimes missing ctrl-z
   1D2A 90s00r52           6675 	mov	dptr,#_defaultATWait
   1D2D E0                 6676 	movx	a,@dptr
   1D2E FC                 6677 	mov	r4,a
   1D2F A3                 6678 	inc	dptr
   1D30 E0                 6679 	movx	a,@dptr
   1D31 FD                 6680 	mov	r5,a
   1D32 A3                 6681 	inc	dptr
   1D33 E0                 6682 	movx	a,@dptr
   1D34 A3                 6683 	inc	dptr
   1D35 E0                 6684 	movx	a,@dptr
   1D36 8C 82              6685 	mov	dpl,r4
   1D38 8D 83              6686 	mov	dph,r5
   1D3A 12s00r00           6687 	lcall	_delayMs
   1D3D                    6688 00107$:
                    1D3D   6689 	C$ydrip.c$807$1$1 ==.
                           6690 ;	apps/ydrip/ydrip.c:807: uartDisable();
   1D3D 12s00r3E           6691 	lcall	_uartDisable
                    1D40   6692 	C$ydrip.c$808$1$1 ==.
                    1D40   6693 	XG$print_packet$0$0 ==.
   1D40 22                 6694 	ret
                           6695 ;------------------------------------------------------------
                           6696 ;Allocation info for local variables in function 'makeAllOutputs'
                           6697 ;------------------------------------------------------------
                           6698 ;i                         Allocated with name '_makeAllOutputs_i_1_1'
                           6699 ;------------------------------------------------------------
                    1D41   6700 	G$makeAllOutputs$0$0 ==.
                    1D41   6701 	C$ydrip.c$810$1$1 ==.
                           6702 ;	apps/ydrip/ydrip.c:810: void makeAllOutputs() {
                           6703 ;	-----------------------------------------
                           6704 ;	 function makeAllOutputs
                           6705 ;	-----------------------------------------
   1D41                    6706 _makeAllOutputs:
                    1D41   6707 	C$ydrip.c$812$1$1 ==.
                           6708 ;	apps/ydrip/ydrip.c:812: for (i=1; i < 16; i++) { // in the future, this should be set to only the channels being used for output, and add the one for input
   1D41 7E 01              6709 	mov	r6,#0x01
   1D43 7F 00              6710 	mov	r7,#0x00
   1D45                    6711 00101$:
   1D45 C3                 6712 	clr	c
   1D46 EE                 6713 	mov	a,r6
   1D47 94 10              6714 	subb	a,#0x10
   1D49 EF                 6715 	mov	a,r7
   1D4A 64 80              6716 	xrl	a,#0x80
   1D4C 94 80              6717 	subb	a,#0x80
   1D4E 50 19              6718 	jnc	00105$
                    1D50   6719 	C$ydrip.c$813$2$2 ==.
                           6720 ;	apps/ydrip/ydrip.c:813: setDigitalOutput(i, LOW);
   1D50 8E 82              6721 	mov	dpl,r6
   1D52 C2 F0              6722 	clr	b[0]
   1D54 C0 07              6723 	push	ar7
   1D56 C0 06              6724 	push	ar6
   1D58 85 F0*00           6725 	mov	bits,b
   1D5B 12s00r00           6726 	lcall	_setDigitalOutput
   1D5E D0 06              6727 	pop	ar6
   1D60 D0 07              6728 	pop	ar7
                    1D62   6729 	C$ydrip.c$812$1$1 ==.
                           6730 ;	apps/ydrip/ydrip.c:812: for (i=1; i < 16; i++) { // in the future, this should be set to only the channels being used for output, and add the one for input
   1D62 0E                 6731 	inc	r6
   1D63 BE 00 DF           6732 	cjne	r6,#0x00,00101$
   1D66 0F                 6733 	inc	r7
   1D67 80 DC              6734 	sjmp	00101$
   1D69                    6735 00105$:
                    1D69   6736 	C$ydrip.c$815$1$1 ==.
                    1D69   6737 	XG$makeAllOutputs$0$0 ==.
   1D69 22                 6738 	ret
                           6739 ;------------------------------------------------------------
                           6740 ;Allocation info for local variables in function 'makeAllOutputsLow'
                           6741 ;------------------------------------------------------------
                           6742 ;i                         Allocated with name '_makeAllOutputsLow_i_1_1'
                           6743 ;------------------------------------------------------------
                    1D6A   6744 	G$makeAllOutputsLow$0$0 ==.
                    1D6A   6745 	C$ydrip.c$816$1$1 ==.
                           6746 ;	apps/ydrip/ydrip.c:816: void makeAllOutputsLow() {
                           6747 ;	-----------------------------------------
                           6748 ;	 function makeAllOutputsLow
                           6749 ;	-----------------------------------------
   1D6A                    6750 _makeAllOutputsLow:
                    1D6A   6751 	C$ydrip.c$818$1$1 ==.
                           6752 ;	apps/ydrip/ydrip.c:818: for (i=0; i < 16; i++) {
   1D6A 7E 00              6753 	mov	r6,#0x00
   1D6C 7F 00              6754 	mov	r7,#0x00
   1D6E                    6755 00101$:
   1D6E C3                 6756 	clr	c
   1D6F EE                 6757 	mov	a,r6
   1D70 94 10              6758 	subb	a,#0x10
   1D72 EF                 6759 	mov	a,r7
   1D73 64 80              6760 	xrl	a,#0x80
   1D75 94 80              6761 	subb	a,#0x80
   1D77 50 19              6762 	jnc	00105$
                    1D79   6763 	C$ydrip.c$819$2$2 ==.
                           6764 ;	apps/ydrip/ydrip.c:819: setDigitalOutput(i, LOW);
   1D79 8E 82              6765 	mov	dpl,r6
   1D7B C2 F0              6766 	clr	b[0]
   1D7D C0 07              6767 	push	ar7
   1D7F C0 06              6768 	push	ar6
   1D81 85 F0*00           6769 	mov	bits,b
   1D84 12s00r00           6770 	lcall	_setDigitalOutput
   1D87 D0 06              6771 	pop	ar6
   1D89 D0 07              6772 	pop	ar7
                    1D8B   6773 	C$ydrip.c$818$1$1 ==.
                           6774 ;	apps/ydrip/ydrip.c:818: for (i=0; i < 16; i++) {
   1D8B 0E                 6775 	inc	r6
   1D8C BE 00 DF           6776 	cjne	r6,#0x00,00101$
   1D8F 0F                 6777 	inc	r7
   1D90 80 DC              6778 	sjmp	00101$
   1D92                    6779 00105$:
                    1D92   6780 	C$ydrip.c$821$1$1 ==.
                    1D92   6781 	XG$makeAllOutputsLow$0$0 ==.
   1D92 22                 6782 	ret
                           6783 ;------------------------------------------------------------
                           6784 ;Allocation info for local variables in function 'reset_offsets'
                           6785 ;------------------------------------------------------------
                           6786 ;i                         Allocated with name '_reset_offsets_i_1_1'
                           6787 ;------------------------------------------------------------
                    1D93   6788 	G$reset_offsets$0$0 ==.
                    1D93   6789 	C$ydrip.c$823$1$1 ==.
                           6790 ;	apps/ydrip/ydrip.c:823: void reset_offsets() {
                           6791 ;	-----------------------------------------
                           6792 ;	 function reset_offsets
                           6793 ;	-----------------------------------------
   1D93                    6794 _reset_offsets:
                    1D93   6795 	C$ydrip.c$825$2$2 ==.
                           6796 ;	apps/ydrip/ydrip.c:825: for(i=0; i<4; i++) {
   1D93 7E 00              6797 	mov	r6,#0x00
   1D95 7F 00              6798 	mov	r7,#0x00
   1D97                    6799 00101$:
   1D97 C3                 6800 	clr	c
   1D98 EE                 6801 	mov	a,r6
   1D99 94 04              6802 	subb	a,#0x04
   1D9B EF                 6803 	mov	a,r7
   1D9C 64 80              6804 	xrl	a,#0x80
   1D9E 94 80              6805 	subb	a,#0x80
   1DA0 50 18              6806 	jnc	00105$
                    1DA2   6807 	C$ydrip.c$826$2$2 ==.
                           6808 ;	apps/ydrip/ydrip.c:826: fOffset[i] = defaultfOffset[i];
   1DA2 EE                 6809 	mov	a,r6
   1DA3 24r02              6810 	add	a,#_fOffset
   1DA5 F9                 6811 	mov	r1,a
   1DA6 EE                 6812 	mov	a,r6
   1DA7 24r3E              6813 	add	a,#_defaultfOffset
   1DA9 F5 82              6814 	mov	dpl,a
   1DAB EF                 6815 	mov	a,r7
   1DAC 34s00              6816 	addc	a,#(_defaultfOffset >> 8)
   1DAE F5 83              6817 	mov	dph,a
   1DB0 E0                 6818 	movx	a,@dptr
   1DB1 FD                 6819 	mov	r5,a
   1DB2 F3                 6820 	movx	@r1,a
                    1DB3   6821 	C$ydrip.c$825$1$1 ==.
                           6822 ;	apps/ydrip/ydrip.c:825: for(i=0; i<4; i++) {
   1DB3 0E                 6823 	inc	r6
   1DB4 BE 00 E0           6824 	cjne	r6,#0x00,00101$
   1DB7 0F                 6825 	inc	r7
   1DB8 80 DD              6826 	sjmp	00101$
   1DBA                    6827 00105$:
                    1DBA   6828 	C$ydrip.c$828$1$1 ==.
                    1DBA   6829 	XG$reset_offsets$0$0 ==.
   1DBA 22                 6830 	ret
                           6831 ;------------------------------------------------------------
                           6832 ;Allocation info for local variables in function 'killWithWatchdog'
                           6833 ;------------------------------------------------------------
                    1DBB   6834 	G$killWithWatchdog$0$0 ==.
                    1DBB   6835 	C$ydrip.c$830$1$1 ==.
                           6836 ;	apps/ydrip/ydrip.c:830: void killWithWatchdog() {
                           6837 ;	-----------------------------------------
                           6838 ;	 function killWithWatchdog
                           6839 ;	-----------------------------------------
   1DBB                    6840 _killWithWatchdog:
                    1DBB   6841 	C$ydrip.c$831$1$1 ==.
                           6842 ;	apps/ydrip/ydrip.c:831: WDCTL = (WDCTL & ~0x03) | 0x00;
   1DBB AF C9              6843 	mov	r7,_WDCTL
   1DBD 53 07 FC           6844 	anl	ar7,#0xFC
   1DC0 8F C9              6845 	mov	_WDCTL,r7
                    1DC2   6846 	C$ydrip.c$832$1$1 ==.
                           6847 ;	apps/ydrip/ydrip.c:832: WDCTL = (WDCTL & ~0x04) | 0x08;
   1DC2 AF C9              6848 	mov	r7,_WDCTL
   1DC4 74 FB              6849 	mov	a,#0xFB
   1DC6 5F                 6850 	anl	a,r7
   1DC7 44 08              6851 	orl	a,#0x08
   1DC9 FF                 6852 	mov	r7,a
   1DCA 8F C9              6853 	mov	_WDCTL,r7
                    1DCC   6854 	C$ydrip.c$833$1$1 ==.
                    1DCC   6855 	XG$killWithWatchdog$0$0 ==.
   1DCC 22                 6856 	ret
                           6857 ;------------------------------------------------------------
                           6858 ;Allocation info for local variables in function 'goToSleep'
                           6859 ;------------------------------------------------------------
                           6860 ;sloc0                     Allocated with name '_goToSleep_sloc0_1_0'
                           6861 ;sloc1                     Allocated with name '_goToSleep_sloc1_1_0'
                           6862 ;seconds                   Allocated with name '_goToSleep_seconds_1_1'
                           6863 ;------------------------------------------------------------
                    1DCD   6864 	G$goToSleep$0$0 ==.
                    1DCD   6865 	C$ydrip.c$835$1$1 ==.
                           6866 ;	apps/ydrip/ydrip.c:835: XDATA void goToSleep (XDATA int16 seconds) {
                           6867 ;	-----------------------------------------
                           6868 ;	 function goToSleep
                           6869 ;	-----------------------------------------
   1DCD                    6870 _goToSleep:
   1DCD AF 83              6871 	mov	r7,dph
   1DCF E5 82              6872 	mov	a,dpl
   1DD1 90s02r84           6873 	mov	dptr,#_goToSleep_seconds_1_1
   1DD4 F0                 6874 	movx	@dptr,a
   1DD5 A3                 6875 	inc	dptr
   1DD6 EF                 6876 	mov	a,r7
   1DD7 F0                 6877 	movx	@dptr,a
                    1DD8   6878 	C$ydrip.c$836$1$1 ==.
                           6879 ;	apps/ydrip/ydrip.c:836: adcSetMillivoltCalibration(adcReadVddMillivolts());
   1DD8 12s00r00           6880 	lcall	_adcReadVddMillivolts
   1DDB 12s00r00           6881 	lcall	_adcSetMillivoltCalibration
                    1DDE   6882 	C$ydrip.c$837$1$1 ==.
                           6883 ;	apps/ydrip/ydrip.c:837: makeAllOutputsLow();
   1DDE 12s1Dr6A           6884 	lcall	_makeAllOutputsLow
                    1DE1   6885 	C$ydrip.c$839$1$1 ==.
                           6886 ;	apps/ydrip/ydrip.c:839: if(!needsTimingCalibration) {
   1DE1 30*05 03           6887 	jnb	_needsTimingCalibration,00134$
   1DE4 02s1Fr96           6888 	ljmp	00120$
   1DE7                    6889 00134$:
                    1DE7   6890 	C$ydrip.c$840$2$2 ==.
                           6891 ;	apps/ydrip/ydrip.c:840: if(!usbPowerPresent()){
   1DE7 12s00r00           6892 	lcall	_usbPowerPresent
   1DEA 50 03              6893 	jnc	00135$
   1DEC 02s1Fr09           6894 	ljmp	00117$
   1DEF                    6895 00135$:
                    1DEF   6896 	C$ydrip.c$846$3$2 ==.
                           6897 ;	apps/ydrip/ydrip.c:846: uint8 savedPICTL = PICTL;
   1DEF AF 8C              6898 	mov	r7,_PICTL
                    1DF1   6899 	C$ydrip.c$847$3$2 ==.
                           6900 ;	apps/ydrip/ydrip.c:847: BIT savedP0IE = P0IE;
   1DF1 A2 BD              6901 	mov	c,_P0IE
   1DF3 92*08              6902 	mov	_goToSleep_savedP0IE_3_3,c
                    1DF5   6903 	C$ydrip.c$848$3$2 ==.
                           6904 ;	apps/ydrip/ydrip.c:848: uint8 savedP0SEL = P0SEL;
   1DF5 AE F3              6905 	mov	r6,_P0SEL
                    1DF7   6906 	C$ydrip.c$849$3$2 ==.
                           6907 ;	apps/ydrip/ydrip.c:849: uint8 savedP0DIR = P0DIR;
   1DF7 AD FD              6908 	mov	r5,_P0DIR
                    1DF9   6909 	C$ydrip.c$850$3$2 ==.
                           6910 ;	apps/ydrip/ydrip.c:850: uint8 savedP1SEL = P1SEL;
   1DF9 78r4D              6911 	mov	r0,#_goToSleep_savedP1SEL_3_3
   1DFB E5 F4              6912 	mov	a,_P1SEL
   1DFD F2                 6913 	movx	@r0,a
                    1DFE   6914 	C$ydrip.c$851$3$2 ==.
                           6915 ;	apps/ydrip/ydrip.c:851: uint8 savedP1DIR = P1DIR;
   1DFE 78r4E              6916 	mov	r0,#_goToSleep_savedP1DIR_3_3
   1E00 E5 FE              6917 	mov	a,_P1DIR
   1E02 F2                 6918 	movx	@r0,a
                    1E03   6919 	C$ydrip.c$853$3$3 ==.
                           6920 ;	apps/ydrip/ydrip.c:853: sleepInit();
   1E03 C0 07              6921 	push	ar7
   1E05 C0 06              6922 	push	ar6
   1E07 C0 05              6923 	push	ar5
   1E09 12s00r00           6924 	lcall	_sleepInit
                    1E0C   6925 	C$ydrip.c$855$3$3 ==.
                           6926 ;	apps/ydrip/ydrip.c:855: disableUsbPullup();
   1E0C 12s00r00           6927 	lcall	_disableUsbPullup
                    1E0F   6928 	C$ydrip.c$856$3$3 ==.
                           6929 ;	apps/ydrip/ydrip.c:856: usbDeviceState = USB_STATE_DETACHED;
   1E0F 90s00r00           6930 	mov	dptr,#_usbDeviceState
   1E12 E4                 6931 	clr	a
   1E13 F0                 6932 	movx	@dptr,a
                    1E14   6933 	C$ydrip.c$857$3$3 ==.
                           6934 ;	apps/ydrip/ydrip.c:857: usbEnabled = 0;
   1E14 C2*06              6935 	clr	_usbEnabled
                    1E16   6936 	C$ydrip.c$858$3$3 ==.
                           6937 ;	apps/ydrip/ydrip.c:858: SLEEP &= ~(1<<7);
   1E16 AA BE              6938 	mov	r2,_SLEEP
   1E18 53 02 7F           6939 	anl	ar2,#0x7F
   1E1B 8A BE              6940 	mov	_SLEEP,r2
                    1E1D   6941 	C$ydrip.c$860$3$3 ==.
                           6942 ;	apps/ydrip/ydrip.c:860: WORCTRL |= 0x03; // 2^5 periods
   1E1D 43 A2 03           6943 	orl	_WORCTRL,#0x03
                    1E20   6944 	C$ydrip.c$861$3$3 ==.
                           6945 ;	apps/ydrip/ydrip.c:861: switchToRCOSC();
   1E20 12s00r0E           6946 	lcall	_switchToRCOSC
   1E23 D0 05              6947 	pop	ar5
   1E25 D0 06              6948 	pop	ar6
   1E27 D0 07              6949 	pop	ar7
                    1E29   6950 	C$ydrip.c$863$3$3 ==.
                           6951 ;	apps/ydrip/ydrip.c:863: storedDescHigh = DMA0CFGH;
   1E29 78r49              6952 	mov	r0,#_goToSleep_storedDescHigh_3_3
   1E2B E5 D5              6953 	mov	a,_DMA0CFGH
   1E2D F2                 6954 	movx	@r0,a
                    1E2E   6955 	C$ydrip.c$864$3$3 ==.
                           6956 ;	apps/ydrip/ydrip.c:864: storedDescLow = DMA0CFGL;
   1E2E 78r4A              6957 	mov	r0,#_goToSleep_storedDescLow_3_3
   1E30 E5 D4              6958 	mov	a,_DMA0CFGL
   1E32 F2                 6959 	movx	@r0,a
                    1E33   6960 	C$ydrip.c$865$3$3 ==.
                           6961 ;	apps/ydrip/ydrip.c:865: storedDma0Armed = DMAARM & 0x01;
   1E33 E5 D6              6962 	mov	a,_DMAARM
   1E35 54 01              6963 	anl	a,#0x01
   1E37 24 FF              6964 	add	a,#0xff
   1E39 92*07              6965 	mov	_goToSleep_storedDma0Armed_3_3,c
                    1E3B   6966 	C$ydrip.c$866$3$3 ==.
                           6967 ;	apps/ydrip/ydrip.c:866: DMAARM |= 0x81;
   1E3B 43 D6 81           6968 	orl	_DMAARM,#0x81
                    1E3E   6969 	C$ydrip.c$867$3$3 ==.
                           6970 ;	apps/ydrip/ydrip.c:867: dmaDesc[0] = ((unsigned int)& PM2_BUF) >> 8;
   1E3E 7Ar42              6971 	mov	r2,#_PM2_BUF
   1E40 7Bs00              6972 	mov	r3,#(_PM2_BUF >> 8)
   1E42 8B 02              6973 	mov	ar2,r3
   1E44 90s00r49           6974 	mov	dptr,#_dmaDesc
   1E47 EA                 6975 	mov	a,r2
   1E48 F0                 6976 	movx	@dptr,a
                    1E49   6977 	C$ydrip.c$868$3$3 ==.
                           6978 ;	apps/ydrip/ydrip.c:868: dmaDesc[1] = (unsigned int)& PM2_BUF;
   1E49 7Ar42              6979 	mov	r2,#_PM2_BUF
   1E4B 7Bs00              6980 	mov	r3,#(_PM2_BUF >> 8)
   1E4D 90s00r4A           6981 	mov	dptr,#(_dmaDesc + 0x0001)
   1E50 EA                 6982 	mov	a,r2
   1E51 F0                 6983 	movx	@dptr,a
                    1E52   6984 	C$ydrip.c$870$3$3 ==.
                           6985 ;	apps/ydrip/ydrip.c:870: DMA0CFGH = ((unsigned int)&dmaDesc) >> 8;
   1E52 7Ar49              6986 	mov	r2,#_dmaDesc
   1E54 7Bs00              6987 	mov	r3,#(_dmaDesc >> 8)
   1E56 8B D5              6988 	mov	_DMA0CFGH,r3
                    1E58   6989 	C$ydrip.c$871$3$3 ==.
                           6990 ;	apps/ydrip/ydrip.c:871: DMA0CFGL = (unsigned int)&dmaDesc;
   1E58 7Ar49              6991 	mov	r2,#_dmaDesc
   1E5A 7Bs00              6992 	mov	r3,#(_dmaDesc >> 8)
   1E5C 8A D4              6993 	mov	_DMA0CFGL,r2
                    1E5E   6994 	C$ydrip.c$872$3$3 ==.
                           6995 ;	apps/ydrip/ydrip.c:872: DMAARM = 0x01;
   1E5E 75 D6 01           6996 	mov	_DMAARM,#0x01
                    1E61   6997 	C$ydrip.c$875$3$3 ==.
                           6998 ;	apps/ydrip/ydrip.c:875: storedIEN0 = IEN0;
   1E61 AB A8              6999 	mov	r3,_IEN0
                    1E63   7000 	C$ydrip.c$876$3$3 ==.
                           7001 ;	apps/ydrip/ydrip.c:876: storedIEN1 = IEN1;
   1E63 78r4B              7002 	mov	r0,#_goToSleep_storedIEN1_3_3
   1E65 E5 B8              7003 	mov	a,_IEN1
   1E67 F2                 7004 	movx	@r0,a
                    1E68   7005 	C$ydrip.c$877$3$3 ==.
                           7006 ;	apps/ydrip/ydrip.c:877: storedIEN2 = IEN2;
   1E68 78r4C              7007 	mov	r0,#_goToSleep_storedIEN2_3_3
   1E6A E5 9A              7008 	mov	a,_IEN2
   1E6C F2                 7009 	movx	@r0,a
                    1E6D   7010 	C$ydrip.c$880$3$3 ==.
                           7011 ;	apps/ydrip/ydrip.c:880: IEN0 |= 0xA0;
   1E6D 43 A8 A0           7012 	orl	_IEN0,#0xA0
                    1E70   7013 	C$ydrip.c$883$3$3 ==.
                           7014 ;	apps/ydrip/ydrip.c:883: IEN0 &= 0xA0;
   1E70 53 A8 A0           7015 	anl	_IEN0,#0xA0
                    1E73   7016 	C$ydrip.c$884$3$3 ==.
                           7017 ;	apps/ydrip/ydrip.c:884: IEN1 &= ~0x3F;
   1E73 AA B8              7018 	mov	r2,_IEN1
   1E75 53 02 C0           7019 	anl	ar2,#0xC0
   1E78 8A B8              7020 	mov	_IEN1,r2
                    1E7A   7021 	C$ydrip.c$885$3$3 ==.
                           7022 ;	apps/ydrip/ydrip.c:885: IEN2 &= ~0x3F;
   1E7A AA 9A              7023 	mov	r2,_IEN2
   1E7C 53 02 C0           7024 	anl	ar2,#0xC0
   1E7F 8A 9A              7025 	mov	_IEN2,r2
                    1E81   7026 	C$ydrip.c$887$3$3 ==.
                           7027 ;	apps/ydrip/ydrip.c:887: WORCTRL |= 0x04;  // Reset
   1E81 43 A2 04           7028 	orl	_WORCTRL,#0x04
                    1E84   7029 	C$ydrip.c$888$3$3 ==.
                           7030 ;	apps/ydrip/ydrip.c:888: temp = WORTIME0;
   1E84 AA A5              7031 	mov	r2,_WORTIME0
                    1E86   7032 	C$ydrip.c$889$3$3 ==.
                           7033 ;	apps/ydrip/ydrip.c:889: while(temp == WORTIME0) {};
   1E86                    7034 00101$:
   1E86 EA                 7035 	mov	a,r2
   1E87 B5 A5 02           7036 	cjne	a,_WORTIME0,00136$
   1E8A 80 FA              7037 	sjmp	00101$
   1E8C                    7038 00136$:
                    1E8C   7039 	C$ydrip.c$890$1$1 ==.
                           7040 ;	apps/ydrip/ydrip.c:890: WOREVT1 = seconds >> 8;
   1E8C C0 03              7041 	push	ar3
   1E8E 90s02r84           7042 	mov	dptr,#_goToSleep_seconds_1_1
   1E91 E0                 7043 	movx	a,@dptr
   1E92 FB                 7044 	mov	r3,a
   1E93 A3                 7045 	inc	dptr
   1E94 E0                 7046 	movx	a,@dptr
   1E95 FC                 7047 	mov	r4,a
   1E96 8C A4              7048 	mov	_WOREVT1,r4
                    1E98   7049 	C$ydrip.c$891$3$3 ==.
                           7050 ;	apps/ydrip/ydrip.c:891: WOREVT0 = seconds;
   1E98 8B A3              7051 	mov	_WOREVT0,r3
                    1E9A   7052 	C$ydrip.c$893$3$3 ==.
                           7053 ;	apps/ydrip/ydrip.c:893: temp = WORTIME0;
   1E9A AA A5              7054 	mov	r2,_WORTIME0
                    1E9C   7055 	C$ydrip.c$939$1$1 ==.
                           7056 ;	apps/ydrip/ydrip.c:939: makeAllOutputs();
   1E9C D0 03              7057 	pop	ar3
                    1E9E   7058 	C$ydrip.c$894$3$3 ==.
                           7059 ;	apps/ydrip/ydrip.c:894: while(temp == WORTIME0) {};
   1E9E                    7060 00104$:
   1E9E EA                 7061 	mov	a,r2
   1E9F B5 A5 02           7062 	cjne	a,_WORTIME0,00137$
   1EA2 80 FA              7063 	sjmp	00104$
   1EA4                    7064 00137$:
                    1EA4   7065 	C$ydrip.c$896$3$3 ==.
                           7066 ;	apps/ydrip/ydrip.c:896: MEMCTR |= 0x02;
   1EA4 43 C7 02           7067 	orl	_MEMCTR,#0x02
                    1EA7   7068 	C$ydrip.c$897$3$3 ==.
                           7069 ;	apps/ydrip/ydrip.c:897: SLEEP = 0x06;
   1EA7 75 BE 06           7070 	mov	_SLEEP,#0x06
                    1EAA   7071 	C$ydrip.c$898$3$3 ==.
                           7072 ;	apps/ydrip/ydrip.c:898: __asm nop __endasm;
   1EAA 00                 7073 	 nop 
                    1EAB   7074 	C$ydrip.c$899$3$3 ==.
                           7075 ;	apps/ydrip/ydrip.c:899: __asm nop __endasm;
   1EAB 00                 7076 	 nop 
                    1EAC   7077 	C$ydrip.c$900$3$3 ==.
                           7078 ;	apps/ydrip/ydrip.c:900: __asm nop __endasm;
   1EAC 00                 7079 	 nop 
                    1EAD   7080 	C$ydrip.c$901$3$3 ==.
                           7081 ;	apps/ydrip/ydrip.c:901: if(SLEEP & 0x03){
   1EAD E5 BE              7082 	mov	a,_SLEEP
   1EAF 54 03              7083 	anl	a,#0x03
   1EB1 60 08              7084 	jz	00108$
                    1EB3   7085 	C$ydrip.c$902$4$6 ==.
                           7086 ;	apps/ydrip/ydrip.c:902: __asm mov 0xD7, #0x01 __endasm;
   1EB3 75 D7 01           7087 	 mov 0xD7, #0x01 
                    1EB6   7088 	C$ydrip.c$903$4$6 ==.
                           7089 ;	apps/ydrip/ydrip.c:903: __asm nop __endasm;
   1EB6 00                 7090 	 nop 
                    1EB7   7091 	C$ydrip.c$904$4$6 ==.
                           7092 ;	apps/ydrip/ydrip.c:904: __asm orl 0x87, #0x01 __endasm;
   1EB7 43 87 01           7093 	 orl 0x87, #0x01 
                    1EBA   7094 	C$ydrip.c$905$4$6 ==.
                           7095 ;	apps/ydrip/ydrip.c:905: __asm nop __endasm;
   1EBA 00                 7096 	 nop 
   1EBB                    7097 00108$:
                    1EBB   7098 	C$ydrip.c$907$3$3 ==.
                           7099 ;	apps/ydrip/ydrip.c:907: IEN0 = storedIEN0;
   1EBB 8B A8              7100 	mov	_IEN0,r3
                    1EBD   7101 	C$ydrip.c$908$3$3 ==.
                           7102 ;	apps/ydrip/ydrip.c:908: IEN1 = storedIEN1;
   1EBD 78r4B              7103 	mov	r0,#_goToSleep_storedIEN1_3_3
   1EBF E2                 7104 	movx	a,@r0
   1EC0 F5 B8              7105 	mov	_IEN1,a
                    1EC2   7106 	C$ydrip.c$909$3$3 ==.
                           7107 ;	apps/ydrip/ydrip.c:909: IEN2 = storedIEN2;
   1EC2 78r4C              7108 	mov	r0,#_goToSleep_storedIEN2_3_3
   1EC4 E2                 7109 	movx	a,@r0
   1EC5 F5 9A              7110 	mov	_IEN2,a
                    1EC7   7111 	C$ydrip.c$910$3$3 ==.
                           7112 ;	apps/ydrip/ydrip.c:910: DMA0CFGH = storedDescHigh;
   1EC7 78r49              7113 	mov	r0,#_goToSleep_storedDescHigh_3_3
   1EC9 E2                 7114 	movx	a,@r0
   1ECA F5 D5              7115 	mov	_DMA0CFGH,a
                    1ECC   7116 	C$ydrip.c$911$3$3 ==.
                           7117 ;	apps/ydrip/ydrip.c:911: DMA0CFGL = storedDescLow;
   1ECC 78r4A              7118 	mov	r0,#_goToSleep_storedDescLow_3_3
   1ECE E2                 7119 	movx	a,@r0
   1ECF F5 D4              7120 	mov	_DMA0CFGL,a
                    1ED1   7121 	C$ydrip.c$912$3$3 ==.
                           7122 ;	apps/ydrip/ydrip.c:912: if(storedDma0Armed){
   1ED1 30*07 03           7123 	jnb	_goToSleep_storedDma0Armed_3_3,00110$
                    1ED4   7124 	C$ydrip.c$913$4$7 ==.
                           7125 ;	apps/ydrip/ydrip.c:913: DMAARM |= 0x01;
   1ED4 43 D6 01           7126 	orl	_DMAARM,#0x01
   1ED7                    7127 00110$:
                    1ED7   7128 	C$ydrip.c$916$3$3 ==.
                           7129 ;	apps/ydrip/ydrip.c:916: boardClockInit();
   1ED7 C0 07              7130 	push	ar7
   1ED9 C0 06              7131 	push	ar6
   1EDB C0 05              7132 	push	ar5
   1EDD 12s00r00           7133 	lcall	_boardClockInit
   1EE0 D0 05              7134 	pop	ar5
   1EE2 D0 06              7135 	pop	ar6
   1EE4 D0 07              7136 	pop	ar7
                    1EE6   7137 	C$ydrip.c$918$3$3 ==.
                           7138 ;	apps/ydrip/ydrip.c:918: PICTL = savedPICTL;
   1EE6 8F 8C              7139 	mov	_PICTL,r7
                    1EE8   7140 	C$ydrip.c$919$3$3 ==.
                           7141 ;	apps/ydrip/ydrip.c:919: P0IE = savedP0IE;
   1EE8 A2*08              7142 	mov	c,_goToSleep_savedP0IE_3_3
   1EEA 92 BD              7143 	mov	_P0IE,c
                    1EEC   7144 	C$ydrip.c$920$3$3 ==.
                           7145 ;	apps/ydrip/ydrip.c:920: P0SEL = savedP0SEL;
   1EEC 8E F3              7146 	mov	_P0SEL,r6
                    1EEE   7147 	C$ydrip.c$921$3$3 ==.
                           7148 ;	apps/ydrip/ydrip.c:921: P0DIR = savedP0DIR;
   1EEE 8D FD              7149 	mov	_P0DIR,r5
                    1EF0   7150 	C$ydrip.c$922$3$3 ==.
                           7151 ;	apps/ydrip/ydrip.c:922: P1SEL = savedP1SEL;
   1EF0 78r4D              7152 	mov	r0,#_goToSleep_savedP1SEL_3_3
   1EF2 E2                 7153 	movx	a,@r0
   1EF3 F5 F4              7154 	mov	_P1SEL,a
                    1EF5   7155 	C$ydrip.c$923$3$3 ==.
                           7156 ;	apps/ydrip/ydrip.c:923: P1DIR = savedP1DIR;
   1EF5 78r4E              7157 	mov	r0,#_goToSleep_savedP1DIR_3_3
   1EF7 E2                 7158 	movx	a,@r0
   1EF8 F5 FE              7159 	mov	_P1DIR,a
                    1EFA   7160 	C$ydrip.c$924$3$3 ==.
                           7161 ;	apps/ydrip/ydrip.c:924: USBPOW = 1;
   1EFA 90 DE 01           7162 	mov	dptr,#_USBPOW
   1EFD 74 01              7163 	mov	a,#0x01
   1EFF F0                 7164 	movx	@dptr,a
                    1F00   7165 	C$ydrip.c$925$3$3 ==.
                           7166 ;	apps/ydrip/ydrip.c:925: USBCIE = 0b0111;
   1F00 90 DE 0B           7167 	mov	dptr,#_USBCIE
   1F03 74 07              7168 	mov	a,#0x07
   1F05 F0                 7169 	movx	@dptr,a
   1F06 02s1Fr96           7170 	ljmp	00120$
   1F09                    7171 00117$:
                    1F09   7172 	C$ydrip.c$927$3$8 ==.
                           7173 ;	apps/ydrip/ydrip.c:927: uint32 start_waiting = getMs();
   1F09 12s00r00           7174 	lcall	_getMs
   1F0C 78r4F              7175 	mov	r0,#_goToSleep_start_waiting_3_8
   1F0E C0 E0              7176 	push	acc
   1F10 E5 82              7177 	mov	a,dpl
   1F12 F2                 7178 	movx	@r0,a
   1F13 08                 7179 	inc	r0
   1F14 E5 83              7180 	mov	a,dph
   1F16 F2                 7181 	movx	@r0,a
   1F17 08                 7182 	inc	r0
   1F18 E5 F0              7183 	mov	a,b
   1F1A F2                 7184 	movx	@r0,a
   1F1B D0 E0              7185 	pop	acc
   1F1D 08                 7186 	inc	r0
   1F1E F2                 7187 	movx	@r0,a
                    1F1F   7188 	C$ydrip.c$928$3$8 ==.
                           7189 ;	apps/ydrip/ydrip.c:928: if(!usbEnabled) {
   1F1F 20*06 0B           7190 	jb	_usbEnabled,00112$
                    1F22   7191 	C$ydrip.c$929$4$9 ==.
                           7192 ;	apps/ydrip/ydrip.c:929: usbDeviceState = USB_STATE_POWERED;
   1F22 90s00r00           7193 	mov	dptr,#_usbDeviceState
   1F25 74 02              7194 	mov	a,#0x02
   1F27 F0                 7195 	movx	@dptr,a
                    1F28   7196 	C$ydrip.c$930$4$9 ==.
                           7197 ;	apps/ydrip/ydrip.c:930: enableUsbPullup();
   1F28 12s00r00           7198 	lcall	_enableUsbPullup
                    1F2B   7199 	C$ydrip.c$931$4$9 ==.
                           7200 ;	apps/ydrip/ydrip.c:931: usbEnabled = 1;
   1F2B D2*06              7201 	setb	_usbEnabled
   1F2D                    7202 00112$:
                    1F2D   7203 	C$ydrip.c$933$3$8 ==.
                           7204 ;	apps/ydrip/ydrip.c:933: delayMs(100);
   1F2D 90 00 64           7205 	mov	dptr,#0x0064
   1F30 12s00r00           7206 	lcall	_delayMs
                    1F33   7207 	C$ydrip.c$934$3$8 ==.
                           7208 ;	apps/ydrip/ydrip.c:934: while((getMs() - start_waiting) < (seconds * 1000)) {
   1F33 90s02r84           7209 	mov	dptr,#_goToSleep_seconds_1_1
   1F36 E0                 7210 	movx	a,@dptr
   1F37 FA                 7211 	mov	r2,a
   1F38 A3                 7212 	inc	dptr
   1F39 E0                 7213 	movx	a,@dptr
   1F3A FB                 7214 	mov	r3,a
   1F3B 78r00              7215 	mov	r0,#__mulint_PARM_2
   1F3D EA                 7216 	mov	a,r2
   1F3E F2                 7217 	movx	@r0,a
   1F3F 08                 7218 	inc	r0
   1F40 EB                 7219 	mov	a,r3
   1F41 F2                 7220 	movx	@r0,a
   1F42 90 03 E8           7221 	mov	dptr,#0x03E8
   1F45 12s00r00           7222 	lcall	__mulint
   1F48 85 82*0C           7223 	mov	_goToSleep_sloc0_1_0,dpl
   1F4B 85 83*0D           7224 	mov	(_goToSleep_sloc0_1_0 + 1),dph
   1F4E                    7225 00113$:
   1F4E 12s00r00           7226 	lcall	_getMs
   1F51 AC 82              7227 	mov	r4,dpl
   1F53 AD 83              7228 	mov	r5,dph
   1F55 AE F0              7229 	mov	r6,b
   1F57 FF                 7230 	mov	r7,a
   1F58 78r4F              7231 	mov	r0,#_goToSleep_start_waiting_3_8
   1F5A D3                 7232 	setb	c
   1F5B E2                 7233 	movx	a,@r0
   1F5C 9C                 7234 	subb	a,r4
   1F5D F4                 7235 	cpl	a
   1F5E B3                 7236 	cpl	c
   1F5F F5*0E              7237 	mov	_goToSleep_sloc1_1_0,a
   1F61 B3                 7238 	cpl	c
   1F62 08                 7239 	inc	r0
   1F63 E2                 7240 	movx	a,@r0
   1F64 9D                 7241 	subb	a,r5
   1F65 F4                 7242 	cpl	a
   1F66 B3                 7243 	cpl	c
   1F67 F5*0F              7244 	mov	(_goToSleep_sloc1_1_0 + 1),a
   1F69 B3                 7245 	cpl	c
   1F6A 08                 7246 	inc	r0
   1F6B E2                 7247 	movx	a,@r0
   1F6C 9E                 7248 	subb	a,r6
   1F6D F4                 7249 	cpl	a
   1F6E B3                 7250 	cpl	c
   1F6F F5*10              7251 	mov	(_goToSleep_sloc1_1_0 + 2),a
   1F71 B3                 7252 	cpl	c
   1F72 08                 7253 	inc	r0
   1F73 E2                 7254 	movx	a,@r0
   1F74 9F                 7255 	subb	a,r7
   1F75 F4                 7256 	cpl	a
   1F76 F5*11              7257 	mov	(_goToSleep_sloc1_1_0 + 3),a
   1F78 AA*0C              7258 	mov	r2,_goToSleep_sloc0_1_0
   1F7A E5*0D              7259 	mov	a,(_goToSleep_sloc0_1_0 + 1)
   1F7C FB                 7260 	mov	r3,a
   1F7D 33                 7261 	rlc	a
   1F7E 95 E0              7262 	subb	a,acc
   1F80 FE                 7263 	mov	r6,a
   1F81 FF                 7264 	mov	r7,a
   1F82 C3                 7265 	clr	c
   1F83 E5*0E              7266 	mov	a,_goToSleep_sloc1_1_0
   1F85 9A                 7267 	subb	a,r2
   1F86 E5*0F              7268 	mov	a,(_goToSleep_sloc1_1_0 + 1)
   1F88 9B                 7269 	subb	a,r3
   1F89 E5*10              7270 	mov	a,(_goToSleep_sloc1_1_0 + 2)
   1F8B 9E                 7271 	subb	a,r6
   1F8C E5*11              7272 	mov	a,(_goToSleep_sloc1_1_0 + 3)
   1F8E 9F                 7273 	subb	a,r7
   1F8F 50 05              7274 	jnc	00120$
                    1F91   7275 	C$ydrip.c$935$4$10 ==.
                           7276 ;	apps/ydrip/ydrip.c:935: doServices();
   1F91 12s03r73           7277 	lcall	_doServices
   1F94 80 B8              7278 	sjmp	00113$
   1F96                    7279 00120$:
                    1F96   7280 	C$ydrip.c$939$1$1 ==.
                           7281 ;	apps/ydrip/ydrip.c:939: makeAllOutputs();
   1F96 12s1Dr41           7282 	lcall	_makeAllOutputs
                    1F99   7283 	C$ydrip.c$940$1$1 ==.
                    1F99   7284 	XG$goToSleep$0$0 ==.
   1F99 22                 7285 	ret
                           7286 ;------------------------------------------------------------
                           7287 ;Allocation info for local variables in function 'putchar'
                           7288 ;------------------------------------------------------------
                           7289 ;c                         Allocated with name '_putchar_c_1_1'
                           7290 ;------------------------------------------------------------
                    1F9A   7291 	G$putchar$0$0 ==.
                    1F9A   7292 	C$ydrip.c$943$1$1 ==.
                           7293 ;	apps/ydrip/ydrip.c:943: void putchar(XDATA char c) {
                           7294 ;	-----------------------------------------
                           7295 ;	 function putchar
                           7296 ;	-----------------------------------------
   1F9A                    7297 _putchar:
   1F9A E5 82              7298 	mov	a,dpl
   1F9C 90s02r86           7299 	mov	dptr,#_putchar_c_1_1
   1F9F F0                 7300 	movx	@dptr,a
                    1FA0   7301 	C$ydrip.c$944$1$1 ==.
                           7302 ;	apps/ydrip/ydrip.c:944: while(uart1TxAvailable() == 0) {								//  Loop until space in the TX buffer to send a character
   1FA0                    7303 00101$:
   1FA0 12s00r00           7304 	lcall	_uart1TxAvailable
   1FA3 E5 82              7305 	mov	a,dpl
   1FA5 70 08              7306 	jnz	00103$
                    1FA7   7307 	C$ydrip.c$945$3$3 ==.
                           7308 ;	apps/ydrip/ydrip.c:945: LED_RED(1);													// Error Indicator
   1FA7 43 FF 02           7309 	orl	_P2DIR,#0x02
                    1FAA   7310 	C$ydrip.c$946$2$2 ==.
                           7311 ;	apps/ydrip/ydrip.c:946: boardService();
   1FAA 12s00r00           7312 	lcall	_boardService
   1FAD 80 F1              7313 	sjmp	00101$
   1FAF                    7314 00103$:
                    1FAF   7315 	C$ydrip.c$949$1$1 ==.
                           7316 ;	apps/ydrip/ydrip.c:949: uart1TxSendByte(c);
   1FAF 90s02r86           7317 	mov	dptr,#_putchar_c_1_1
   1FB2 E0                 7318 	movx	a,@dptr
   1FB3 FF                 7319 	mov	r7,a
   1FB4 F5 82              7320 	mov	dpl,a
   1FB6 C0 07              7321 	push	ar7
   1FB8 12s00r00           7322 	lcall	_uart1TxSendByte
                    1FBB   7323 	C$ydrip.c$951$1$1 ==.
                           7324 ;	apps/ydrip/ydrip.c:951: if (usbPowerPresent()) {
   1FBB 12s00r00           7325 	lcall	_usbPowerPresent
   1FBE D0 07              7326 	pop	ar7
   1FC0 50 1C              7327 	jnc	00108$
                    1FC2   7328 	C$ydrip.c$952$2$4 ==.
                           7329 ;	apps/ydrip/ydrip.c:952: while(usbComTxAvailable() == 0) {							//  Loop until space in the TX buffer to send a character
   1FC2                    7330 00104$:
   1FC2 C0 07              7331 	push	ar7
   1FC4 12s00r00           7332 	lcall	_usbComTxAvailable
   1FC7 E5 82              7333 	mov	a,dpl
   1FC9 D0 07              7334 	pop	ar7
   1FCB 70 09              7335 	jnz	00106$
                    1FCD   7336 	C$ydrip.c$954$3$5 ==.
                           7337 ;	apps/ydrip/ydrip.c:954: boardService();
   1FCD C0 07              7338 	push	ar7
   1FCF 12s00r00           7339 	lcall	_boardService
   1FD2 D0 07              7340 	pop	ar7
   1FD4 80 EC              7341 	sjmp	00104$
   1FD6                    7342 00106$:
                    1FD6   7343 	C$ydrip.c$956$2$4 ==.
                           7344 ;	apps/ydrip/ydrip.c:956: usbComTxSendByte(c);
   1FD6 8F 82              7345 	mov	dpl,r7
   1FD8 12s00r00           7346 	lcall	_usbComTxSendByte
                    1FDB   7347 	C$ydrip.c$957$2$4 ==.
                           7348 ;	apps/ydrip/ydrip.c:957: boardService();
   1FDB 12s00r00           7349 	lcall	_boardService
   1FDE                    7350 00108$:
                    1FDE   7351 	C$ydrip.c$960$2$6 ==.
                           7352 ;	apps/ydrip/ydrip.c:960: LED_RED(0);														// Error gone
   1FDE AF FF              7353 	mov	r7,_P2DIR
   1FE0 53 07 FD           7354 	anl	ar7,#0xFD
   1FE3 8F FF              7355 	mov	_P2DIR,r7
                    1FE5   7356 	C$ydrip.c$961$2$6 ==.
                    1FE5   7357 	XG$putchar$0$0 ==.
   1FE5 22                 7358 	ret
                           7359 ;------------------------------------------------------------
                           7360 ;Allocation info for local variables in function 'printfUSB'
                           7361 ;------------------------------------------------------------
                           7362 ;length                    Allocated with name '_printfUSB_length_1_1'
                           7363 ;i                         Allocated with name '_printfUSB_i_1_1'
                           7364 ;------------------------------------------------------------
                    1FE6   7365 	G$printfUSB$0$0 ==.
                    1FE6   7366 	C$ydrip.c$964$2$6 ==.
                           7367 ;	apps/ydrip/ydrip.c:964: void printfUSB(char * stringForUSB) {
                           7368 ;	-----------------------------------------
                           7369 ;	 function printfUSB
                           7370 ;	-----------------------------------------
   1FE6                    7371 _printfUSB:
   1FE6 AD 82              7372 	mov	r5,dpl
   1FE8 AE 83              7373 	mov	r6,dph
   1FEA AF F0              7374 	mov	r7,b
                    1FEC   7375 	C$ydrip.c$967$1$1 ==.
                           7376 ;	apps/ydrip/ydrip.c:967: if (usbPowerPresent()) {
   1FEC C0 07              7377 	push	ar7
   1FEE C0 06              7378 	push	ar6
   1FF0 C0 05              7379 	push	ar5
   1FF2 12s00r00           7380 	lcall	_usbPowerPresent
   1FF5 D0 05              7381 	pop	ar5
   1FF7 D0 06              7382 	pop	ar6
   1FF9 D0 07              7383 	pop	ar7
   1FFB 40 03              7384 	jc	00117$
   1FFD 02s20rAA           7385 	ljmp	00110$
   2000                    7386 00117$:
                    2000   7387 	C$ydrip.c$969$2$2 ==.
                           7388 ;	apps/ydrip/ydrip.c:969: length = strlen(stringForUSB);
   2000 8D 82              7389 	mov	dpl,r5
   2002 8E 83              7390 	mov	dph,r6
   2004 8F F0              7391 	mov	b,r7
   2006 C0 07              7392 	push	ar7
   2008 C0 06              7393 	push	ar6
   200A C0 05              7394 	push	ar5
   200C 12s00r00           7395 	lcall	_strlen
   200F AB 82              7396 	mov	r3,dpl
   2011 D0 05              7397 	pop	ar5
   2013 D0 06              7398 	pop	ar6
   2015 D0 07              7399 	pop	ar7
                    2017   7400 	C$ydrip.c$970$2$2 ==.
                           7401 ;	apps/ydrip/ydrip.c:970: stringForUSB[length++] = ('/r');
   2017 EB                 7402 	mov	a,r3
   2018 04                 7403 	inc	a
   2019 FC                 7404 	mov	r4,a
   201A EB                 7405 	mov	a,r3
   201B 2D                 7406 	add	a,r5
   201C F8                 7407 	mov	r0,a
   201D E4                 7408 	clr	a
   201E 3E                 7409 	addc	a,r6
   201F F9                 7410 	mov	r1,a
   2020 8F 02              7411 	mov	ar2,r7
   2022 88 82              7412 	mov	dpl,r0
   2024 89 83              7413 	mov	dph,r1
   2026 8A F0              7414 	mov	b,r2
   2028 74 2F              7415 	mov	a,#0x2F
   202A 12s00r00           7416 	lcall	__gptrput
                    202D   7417 	C$ydrip.c$971$2$2 ==.
                           7418 ;	apps/ydrip/ydrip.c:971: stringForUSB[length++] = ('/n');
   202D 0B                 7419 	inc	r3
   202E 0B                 7420 	inc	r3
   202F EC                 7421 	mov	a,r4
   2030 2D                 7422 	add	a,r5
   2031 F9                 7423 	mov	r1,a
   2032 E4                 7424 	clr	a
   2033 3E                 7425 	addc	a,r6
   2034 FA                 7426 	mov	r2,a
   2035 8F 04              7427 	mov	ar4,r7
   2037 89 82              7428 	mov	dpl,r1
   2039 8A 83              7429 	mov	dph,r2
   203B 8C F0              7430 	mov	b,r4
   203D 74 2F              7431 	mov	a,#0x2F
   203F 12s00r00           7432 	lcall	__gptrput
                    2042   7433 	C$ydrip.c$973$2$1 ==.
                           7434 ;	apps/ydrip/ydrip.c:973: for(i = 0; i < length; ++i) {
   2042 7C 00              7435 	mov	r4,#0x00
   2044                    7436 00106$:
   2044 C3                 7437 	clr	c
   2045 EC                 7438 	mov	a,r4
   2046 9B                 7439 	subb	a,r3
   2047 50 61              7440 	jnc	00110$
                    2049   7441 	C$ydrip.c$974$3$3 ==.
                           7442 ;	apps/ydrip/ydrip.c:974: while(usbComTxAvailable() == 0) {							//  Loop until space in the TX buffer to send each character
   2049                    7443 00101$:
   2049 C0 07              7444 	push	ar7
   204B C0 06              7445 	push	ar6
   204D C0 05              7446 	push	ar5
   204F C0 04              7447 	push	ar4
   2051 C0 03              7448 	push	ar3
   2053 12s00r00           7449 	lcall	_usbComTxAvailable
   2056 E5 82              7450 	mov	a,dpl
   2058 D0 03              7451 	pop	ar3
   205A D0 04              7452 	pop	ar4
   205C D0 05              7453 	pop	ar5
   205E D0 06              7454 	pop	ar6
   2060 D0 07              7455 	pop	ar7
   2062 70 19              7456 	jnz	00103$
                    2064   7457 	C$ydrip.c$975$4$4 ==.
                           7458 ;	apps/ydrip/ydrip.c:975: doServices();
   2064 C0 07              7459 	push	ar7
   2066 C0 06              7460 	push	ar6
   2068 C0 05              7461 	push	ar5
   206A C0 04              7462 	push	ar4
   206C C0 03              7463 	push	ar3
   206E 12s03r73           7464 	lcall	_doServices
   2071 D0 03              7465 	pop	ar3
   2073 D0 04              7466 	pop	ar4
   2075 D0 05              7467 	pop	ar5
   2077 D0 06              7468 	pop	ar6
   2079 D0 07              7469 	pop	ar7
   207B 80 CC              7470 	sjmp	00101$
   207D                    7471 00103$:
                    207D   7472 	C$ydrip.c$977$3$3 ==.
                           7473 ;	apps/ydrip/ydrip.c:977: usbComTxSendByte(stringForUSB[i]);		
   207D EC                 7474 	mov	a,r4
   207E 2D                 7475 	add	a,r5
   207F F8                 7476 	mov	r0,a
   2080 E4                 7477 	clr	a
   2081 3E                 7478 	addc	a,r6
   2082 F9                 7479 	mov	r1,a
   2083 8F 02              7480 	mov	ar2,r7
   2085 88 82              7481 	mov	dpl,r0
   2087 89 83              7482 	mov	dph,r1
   2089 8A F0              7483 	mov	b,r2
   208B 12s00r00           7484 	lcall	__gptrget
   208E F5 82              7485 	mov	dpl,a
   2090 C0 07              7486 	push	ar7
   2092 C0 06              7487 	push	ar6
   2094 C0 05              7488 	push	ar5
   2096 C0 04              7489 	push	ar4
   2098 C0 03              7490 	push	ar3
   209A 12s00r00           7491 	lcall	_usbComTxSendByte
   209D D0 03              7492 	pop	ar3
   209F D0 04              7493 	pop	ar4
   20A1 D0 05              7494 	pop	ar5
   20A3 D0 06              7495 	pop	ar6
   20A5 D0 07              7496 	pop	ar7
                    20A7   7497 	C$ydrip.c$973$2$2 ==.
                           7498 ;	apps/ydrip/ydrip.c:973: for(i = 0; i < length; ++i) {
   20A7 0C                 7499 	inc	r4
   20A8 80 9A              7500 	sjmp	00106$
   20AA                    7501 00110$:
                    20AA   7502 	C$ydrip.c$983$2$1 ==.
                    20AA   7503 	XG$printfUSB$0$0 ==.
   20AA 22                 7504 	ret
                           7505 ;------------------------------------------------------------
                           7506 ;Allocation info for local variables in function 'swap_channel'
                           7507 ;------------------------------------------------------------
                           7508 ;newFSCTRL0                Allocated with name '_swap_channel_PARM_2'
                           7509 ;channel                   Allocated with name '_swap_channel_channel_1_1'
                           7510 ;------------------------------------------------------------
                    20AB   7511 	G$swap_channel$0$0 ==.
                    20AB   7512 	C$ydrip.c$986$2$1 ==.
                           7513 ;	apps/ydrip/ydrip.c:986: void swap_channel(XDATA uint8 channel, XDATA uint8 newFSCTRL0) {
                           7514 ;	-----------------------------------------
                           7515 ;	 function swap_channel
                           7516 ;	-----------------------------------------
   20AB                    7517 _swap_channel:
   20AB E5 82              7518 	mov	a,dpl
   20AD 90s02r88           7519 	mov	dptr,#_swap_channel_channel_1_1
   20B0 F0                 7520 	movx	@dptr,a
                    20B1   7521 	C$ydrip.c$987$1$1 ==.
                           7522 ;	apps/ydrip/ydrip.c:987: do {
   20B1                    7523 00101$:
                    20B1   7524 	C$ydrip.c$988$2$2 ==.
                           7525 ;	apps/ydrip/ydrip.c:988: RFST = 4;   //SIDLE
   20B1 75 E1 04           7526 	mov	_RFST,#0x04
                    20B4   7527 	C$ydrip.c$989$1$1 ==.
                           7528 ;	apps/ydrip/ydrip.c:989: } while (MARCSTATE != 0x01);
   20B4 90 DF 3B           7529 	mov	dptr,#_MARCSTATE
   20B7 E0                 7530 	movx	a,@dptr
   20B8 FF                 7531 	mov	r7,a
   20B9 BF 01 F5           7532 	cjne	r7,#0x01,00101$
                    20BC   7533 	C$ydrip.c$991$1$1 ==.
                           7534 ;	apps/ydrip/ydrip.c:991: FSCTRL0 = newFSCTRL0;
   20BC 90s02r87           7535 	mov	dptr,#_swap_channel_PARM_2
   20BF E0                 7536 	movx	a,@dptr
   20C0 90 DF 08           7537 	mov	dptr,#_FSCTRL0
   20C3 F0                 7538 	movx	@dptr,a
                    20C4   7539 	C$ydrip.c$992$1$1 ==.
                           7540 ;	apps/ydrip/ydrip.c:992: CHANNR = channel;
   20C4 90s02r88           7541 	mov	dptr,#_swap_channel_channel_1_1
   20C7 E0                 7542 	movx	a,@dptr
   20C8 90 DF 06           7543 	mov	dptr,#_CHANNR
   20CB F0                 7544 	movx	@dptr,a
                    20CC   7545 	C$ydrip.c$993$1$1 ==.
                           7546 ;	apps/ydrip/ydrip.c:993: RFST = 2;   //RX
   20CC 75 E1 02           7547 	mov	_RFST,#0x02
                    20CF   7548 	C$ydrip.c$994$1$1 ==.
                    20CF   7549 	XG$swap_channel$0$0 ==.
   20CF 22                 7550 	ret
                           7551 ;------------------------------------------------------------
                           7552 ;Allocation info for local variables in function 'strobe_radio'
                           7553 ;------------------------------------------------------------
                    20D0   7554 	G$strobe_radio$0$0 ==.
                    20D0   7555 	C$ydrip.c$996$1$1 ==.
                           7556 ;	apps/ydrip/ydrip.c:996: void strobe_radio(int radio_chan) {
                           7557 ;	-----------------------------------------
                           7558 ;	 function strobe_radio
                           7559 ;	-----------------------------------------
   20D0                    7560 _strobe_radio:
   20D0 AE 82              7561 	mov	r6,dpl
   20D2 AF 83              7562 	mov	r7,dph
                    20D4   7563 	C$ydrip.c$997$1$1 ==.
                           7564 ;	apps/ydrip/ydrip.c:997: radioMacInit();
   20D4 C0 07              7565 	push	ar7
   20D6 C0 06              7566 	push	ar6
   20D8 12s00r00           7567 	lcall	_radioMacInit
                    20DB   7568 	C$ydrip.c$998$1$1 ==.
                           7569 ;	apps/ydrip/ydrip.c:998: MCSM1 = 0;
   20DB 90 DF 13           7570 	mov	dptr,#_MCSM1
   20DE E4                 7571 	clr	a
   20DF F0                 7572 	movx	@dptr,a
                    20E0   7573 	C$ydrip.c$999$1$1 ==.
                           7574 ;	apps/ydrip/ydrip.c:999: radioMacStrobe();
   20E0 12s00r00           7575 	lcall	_radioMacStrobe
   20E3 D0 06              7576 	pop	ar6
   20E5 D0 07              7577 	pop	ar7
                    20E7   7578 	C$ydrip.c$1000$1$1 ==.
                           7579 ;	apps/ydrip/ydrip.c:1000: swap_channel(nChannels[radio_chan], fOffset[radio_chan]);
   20E7 EE                 7580 	mov	a,r6
   20E8 24r06              7581 	add	a,#_nChannels
   20EA F9                 7582 	mov	r1,a
   20EB E3                 7583 	movx	a,@r1
   20EC FD                 7584 	mov	r5,a
   20ED EE                 7585 	mov	a,r6
   20EE 24r02              7586 	add	a,#_fOffset
   20F0 F9                 7587 	mov	r1,a
   20F1 E3                 7588 	movx	a,@r1
   20F2 90s02r87           7589 	mov	dptr,#_swap_channel_PARM_2
   20F5 F0                 7590 	movx	@dptr,a
   20F6 8D 82              7591 	mov	dpl,r5
   20F8 12s20rAB           7592 	lcall	_swap_channel
                    20FB   7593 	C$ydrip.c$1001$1$1 ==.
                    20FB   7594 	XG$strobe_radio$0$0 ==.
   20FB 22                 7595 	ret
                           7596 ;------------------------------------------------------------
                           7597 ;Allocation info for local variables in function 'WaitForPacket'
                           7598 ;------------------------------------------------------------
                           7599 ;sloc0                     Allocated with name '_WaitForPacket_sloc0_1_0'
                           7600 ;sloc1                     Allocated with name '_WaitForPacket_sloc1_1_0'
                           7601 ;sloc2                     Allocated with name '_WaitForPacket_sloc2_1_0'
                           7602 ;sloc3                     Allocated with name '_WaitForPacket_sloc3_1_0'
                           7603 ;sloc4                     Allocated with name '_WaitForPacket_sloc4_1_0'
                           7604 ;sloc5                     Allocated with name '_WaitForPacket_sloc5_1_0'
                           7605 ;channel                   Allocated with name '_WaitForPacket_PARM_3'
                           7606 ;milliseconds              Allocated with name '_WaitForPacket_milliseconds_1_1'
                           7607 ;start                     Allocated with name '_WaitForPacket_start_1_1'
                           7608 ;i                         Allocated with name '_WaitForPacket_i_1_1'
                           7609 ;six_minutes               Allocated with name '_WaitForPacket_six_minutes_1_1'
                           7610 ;nRet                      Allocated with name '_WaitForPacket_nRet_1_1'
                           7611 ;transID                   Allocated with name '_WaitForPacket_transID_1_1'
                           7612 ;------------------------------------------------------------
                    20FC   7613 	G$WaitForPacket$0$0 ==.
                    20FC   7614 	C$ydrip.c$1004$1$1 ==.
                           7615 ;	apps/ydrip/ydrip.c:1004: int WaitForPacket(XDATA uint16 milliseconds, Dexcom_packet* pkt, XDATA uint8 channel) {
                           7616 ;	-----------------------------------------
                           7617 ;	 function WaitForPacket
                           7618 ;	-----------------------------------------
   20FC                    7619 _WaitForPacket:
   20FC AF 83              7620 	mov	r7,dph
   20FE E5 82              7621 	mov	a,dpl
   2100 90s02r8A           7622 	mov	dptr,#_WaitForPacket_milliseconds_1_1
   2103 F0                 7623 	movx	@dptr,a
   2104 A3                 7624 	inc	dptr
   2105 EF                 7625 	mov	a,r7
   2106 F0                 7626 	movx	@dptr,a
                    2107   7627 	C$ydrip.c$1005$1$1 ==.
                           7628 ;	apps/ydrip/ydrip.c:1005: XDATA uint32 start = getMs();
   2107 12s00r00           7629 	lcall	_getMs
   210A 85 82*1D           7630 	mov	_WaitForPacket_sloc4_1_0,dpl
   210D 85 83*1E           7631 	mov	(_WaitForPacket_sloc4_1_0 + 1),dph
   2110 85 F0*1F           7632 	mov	(_WaitForPacket_sloc4_1_0 + 2),b
   2113 F5*20              7633 	mov	(_WaitForPacket_sloc4_1_0 + 3),a
                    2115   7634 	C$ydrip.c$1008$1$1 ==.
                           7635 ;	apps/ydrip/ydrip.c:1008: XDATA uint32 six_minutes = 360000;						//	SWITCH TO 3600 WHEN DEBUGGING
   2115 90s02r8C           7636 	mov	dptr,#_WaitForPacket_six_minutes_1_1
   2118 74 40              7637 	mov	a,#0x40
   211A F0                 7638 	movx	@dptr,a
   211B A3                 7639 	inc	dptr
   211C 74 7E              7640 	mov	a,#0x7E
   211E F0                 7641 	movx	@dptr,a
   211F A3                 7642 	inc	dptr
   2120 74 05              7643 	mov	a,#0x05
   2122 F0                 7644 	movx	@dptr,a
   2123 A3                 7645 	inc	dptr
   2124 E4                 7646 	clr	a
   2125 F0                 7647 	movx	@dptr,a
                    2126   7648 	C$ydrip.c$1010$1$1 ==.
                           7649 ;	apps/ydrip/ydrip.c:1010: XDATA char transID[] = "BLANK"; 	// Line added
   2126 90s02r90           7650 	mov	dptr,#_WaitForPacket_transID_1_1
   2129 74 42              7651 	mov	a,#0x42
   212B F0                 7652 	movx	@dptr,a
   212C 90s02r91           7653 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0001)
   212F 74 4C              7654 	mov	a,#0x4C
   2131 F0                 7655 	movx	@dptr,a
   2132 90s02r92           7656 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0002)
   2135 74 41              7657 	mov	a,#0x41
   2137 F0                 7658 	movx	@dptr,a
   2138 90s02r93           7659 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0003)
   213B 74 4E              7660 	mov	a,#0x4E
   213D F0                 7661 	movx	@dptr,a
   213E 90s02r94           7662 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0004)
   2141 74 4B              7663 	mov	a,#0x4B
   2143 F0                 7664 	movx	@dptr,a
   2144 90s02r95           7665 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0005)
   2147 E4                 7666 	clr	a
   2148 F0                 7667 	movx	@dptr,a
                    2149   7668 	C$ydrip.c$1011$1$1 ==.
                           7669 ;	apps/ydrip/ydrip.c:1011: swap_channel(nChannels[channel], fOffset[channel]);
   2149 90s02r89           7670 	mov	dptr,#_WaitForPacket_PARM_3
   214C E0                 7671 	movx	a,@dptr
   214D FB                 7672 	mov	r3,a
   214E 24r06              7673 	add	a,#_nChannels
   2150 F9                 7674 	mov	r1,a
   2151 E3                 7675 	movx	a,@r1
   2152 F5*12              7676 	mov	_WaitForPacket_sloc0_1_0,a
   2154 EB                 7677 	mov	a,r3
   2155 24r02              7678 	add	a,#_fOffset
   2157 F9                 7679 	mov	r1,a
   2158 E3                 7680 	movx	a,@r1
   2159 90s02r87           7681 	mov	dptr,#_swap_channel_PARM_2
   215C F0                 7682 	movx	@dptr,a
   215D 85*12 82           7683 	mov	dpl,_WaitForPacket_sloc0_1_0
   2160 C0 03              7684 	push	ar3
   2162 12s20rAB           7685 	lcall	_swap_channel
   2165 D0 03              7686 	pop	ar3
                    2167   7687 	C$ydrip.c$1012$1$1 ==.
                           7688 ;	apps/ydrip/ydrip.c:1012: if (debug_mode) six_minutes = 3000;
   2167 30*03 0F           7689 	jnb	_debug_mode,00102$
   216A 90s02r8C           7690 	mov	dptr,#_WaitForPacket_six_minutes_1_1
   216D 74 B8              7691 	mov	a,#0xB8
   216F F0                 7692 	movx	@dptr,a
   2170 A3                 7693 	inc	dptr
   2171 74 0B              7694 	mov	a,#0x0B
   2173 F0                 7695 	movx	@dptr,a
   2174 A3                 7696 	inc	dptr
   2175 E4                 7697 	clr	a
   2176 F0                 7698 	movx	@dptr,a
   2177 A3                 7699 	inc	dptr
   2178 F0                 7700 	movx	@dptr,a
   2179                    7701 00102$:
                    2179   7702 	C$ydrip.c$1014$2$2 ==.
                           7703 ;	apps/ydrip/ydrip.c:1014: LED_RED(0);												// Error Indicator
   2179 AA FF              7704 	mov	r2,_P2DIR
   217B 53 02 FD           7705 	anl	ar2,#0xFD
   217E 8A FF              7706 	mov	_P2DIR,r2
                    2180   7707 	C$ydrip.c$1015$2$3 ==.
                           7708 ;	apps/ydrip/ydrip.c:1015: while (!milliseconds || (getMs() - start) < milliseconds) {
   2180 90s02r8C           7709 	mov	dptr,#_WaitForPacket_six_minutes_1_1
   2183 E0                 7710 	movx	a,@dptr
   2184 F5*13              7711 	mov	_WaitForPacket_sloc1_1_0,a
   2186 A3                 7712 	inc	dptr
   2187 E0                 7713 	movx	a,@dptr
   2188 F5*14              7714 	mov	(_WaitForPacket_sloc1_1_0 + 1),a
   218A A3                 7715 	inc	dptr
   218B E0                 7716 	movx	a,@dptr
   218C F5*15              7717 	mov	(_WaitForPacket_sloc1_1_0 + 2),a
   218E A3                 7718 	inc	dptr
   218F E0                 7719 	movx	a,@dptr
   2190 F5*16              7720 	mov	(_WaitForPacket_sloc1_1_0 + 3),a
   2192 90s02r8A           7721 	mov	dptr,#_WaitForPacket_milliseconds_1_1
   2195 E0                 7722 	movx	a,@dptr
   2196 F5*17              7723 	mov	_WaitForPacket_sloc2_1_0,a
   2198 A3                 7724 	inc	dptr
   2199 E0                 7725 	movx	a,@dptr
   219A F5*18              7726 	mov	(_WaitForPacket_sloc2_1_0 + 1),a
   219C E4                 7727 	clr	a
   219D F5*19              7728 	mov	_WaitForPacket_sloc3_1_0,a
   219F F5*1A              7729 	mov	(_WaitForPacket_sloc3_1_0 + 1),a
   21A1 F5*1B              7730 	mov	(_WaitForPacket_sloc3_1_0 + 2),a
   21A3 F5*1C              7731 	mov	(_WaitForPacket_sloc3_1_0 + 3),a
   21A5                    7732 00117$:
   21A5 E5*17              7733 	mov	a,_WaitForPacket_sloc2_1_0
   21A7 45*18              7734 	orl	a,(_WaitForPacket_sloc2_1_0 + 1)
   21A9 60 3D              7735 	jz	00118$
   21AB C0 03              7736 	push	ar3
   21AD 12s00r00           7737 	lcall	_getMs
   21B0 AA 82              7738 	mov	r2,dpl
   21B2 AB 83              7739 	mov	r3,dph
   21B4 AE F0              7740 	mov	r6,b
   21B6 FF                 7741 	mov	r7,a
   21B7 EA                 7742 	mov	a,r2
   21B8 C3                 7743 	clr	c
   21B9 95*1D              7744 	subb	a,_WaitForPacket_sloc4_1_0
   21BB F5*21              7745 	mov	_WaitForPacket_sloc5_1_0,a
   21BD EB                 7746 	mov	a,r3
   21BE 95*1E              7747 	subb	a,(_WaitForPacket_sloc4_1_0 + 1)
   21C0 F5*22              7748 	mov	(_WaitForPacket_sloc5_1_0 + 1),a
   21C2 EE                 7749 	mov	a,r6
   21C3 95*1F              7750 	subb	a,(_WaitForPacket_sloc4_1_0 + 2)
   21C5 F5*23              7751 	mov	(_WaitForPacket_sloc5_1_0 + 2),a
   21C7 EF                 7752 	mov	a,r7
   21C8 95*20              7753 	subb	a,(_WaitForPacket_sloc4_1_0 + 3)
   21CA F5*24              7754 	mov	(_WaitForPacket_sloc5_1_0 + 3),a
   21CC AC*17              7755 	mov	r4,_WaitForPacket_sloc2_1_0
   21CE AD*18              7756 	mov	r5,(_WaitForPacket_sloc2_1_0 + 1)
   21D0 7E 00              7757 	mov	r6,#0x00
   21D2 7F 00              7758 	mov	r7,#0x00
   21D4 C3                 7759 	clr	c
   21D5 E5*21              7760 	mov	a,_WaitForPacket_sloc5_1_0
   21D7 9C                 7761 	subb	a,r4
   21D8 E5*22              7762 	mov	a,(_WaitForPacket_sloc5_1_0 + 1)
   21DA 9D                 7763 	subb	a,r5
   21DB E5*23              7764 	mov	a,(_WaitForPacket_sloc5_1_0 + 2)
   21DD 9E                 7765 	subb	a,r6
   21DE E5*24              7766 	mov	a,(_WaitForPacket_sloc5_1_0 + 3)
   21E0 9F                 7767 	subb	a,r7
   21E1 D0 03              7768 	pop	ar3
   21E3 40 03              7769 	jc	00132$
   21E5 02s23rA0           7770 	ljmp	00119$
   21E8                    7771 00132$:
   21E8                    7772 00118$:
                    21E8   7773 	C$ydrip.c$1016$2$3 ==.
                           7774 ;	apps/ydrip/ydrip.c:1016: doServices();
   21E8 C0 03              7775 	push	ar3
   21EA 12s03r73           7776 	lcall	_doServices
                    21ED   7777 	C$ydrip.c$1017$2$3 ==.
                           7778 ;	apps/ydrip/ydrip.c:1017: blink_yellow_led();
   21ED 12s00r53           7779 	lcall	_blink_yellow_led
   21F0 D0 03              7780 	pop	ar3
                    21F2   7781 	C$ydrip.c$1018$2$3 ==.
                           7782 ;	apps/ydrip/ydrip.c:1018: i++;
   21F2 05*19              7783 	inc	_WaitForPacket_sloc3_1_0
   21F4 E4                 7784 	clr	a
   21F5 B5*19 0C           7785 	cjne	a,_WaitForPacket_sloc3_1_0,00133$
   21F8 05*1A              7786 	inc	(_WaitForPacket_sloc3_1_0 + 1)
   21FA B5*1A 07           7787 	cjne	a,(_WaitForPacket_sloc3_1_0 + 1),00133$
   21FD 05*1B              7788 	inc	(_WaitForPacket_sloc3_1_0 + 2)
   21FF B5*1B 02           7789 	cjne	a,(_WaitForPacket_sloc3_1_0 + 2),00133$
   2202 05*1C              7790 	inc	(_WaitForPacket_sloc3_1_0 + 3)
   2204                    7791 00133$:
                    2204   7792 	C$ydrip.c$1019$1$1 ==.
                           7793 ;	apps/ydrip/ydrip.c:1019: if(!(i % 40000)) {
   2204 78r00              7794 	mov	r0,#__modulong_PARM_2
   2206 74 40              7795 	mov	a,#0x40
   2208 F2                 7796 	movx	@r0,a
   2209 08                 7797 	inc	r0
   220A 74 9C              7798 	mov	a,#0x9C
   220C F2                 7799 	movx	@r0,a
   220D 08                 7800 	inc	r0
   220E E4                 7801 	clr	a
   220F F2                 7802 	movx	@r0,a
   2210 08                 7803 	inc	r0
   2211 F2                 7804 	movx	@r0,a
   2212 85*19 82           7805 	mov	dpl,_WaitForPacket_sloc3_1_0
   2215 85*1A 83           7806 	mov	dph,(_WaitForPacket_sloc3_1_0 + 1)
   2218 85*1B F0           7807 	mov	b,(_WaitForPacket_sloc3_1_0 + 2)
   221B E5*1C              7808 	mov	a,(_WaitForPacket_sloc3_1_0 + 3)
   221D C0 03              7809 	push	ar3
   221F 12s00r00           7810 	lcall	__modulong
   2222 AC 82              7811 	mov	r4,dpl
   2224 AD 83              7812 	mov	r5,dph
   2226 AE F0              7813 	mov	r6,b
   2228 FF                 7814 	mov	r7,a
   2229 D0 03              7815 	pop	ar3
   222B EC                 7816 	mov	a,r4
   222C 4D                 7817 	orl	a,r5
   222D 4E                 7818 	orl	a,r6
   222E 4F                 7819 	orl	a,r7
                    222F   7820 	C$ydrip.c$1020$3$4 ==.
                           7821 ;	apps/ydrip/ydrip.c:1020: strobe_radio(channel);
   222F 70 0E              7822 	jnz	00104$
   2231 8B 06              7823 	mov	ar6,r3
   2233 FF                 7824 	mov	r7,a
   2234 8E 82              7825 	mov	dpl,r6
   2236 8F 83              7826 	mov	dph,r7
   2238 C0 03              7827 	push	ar3
   223A 12s20rD0           7828 	lcall	_strobe_radio
   223D D0 03              7829 	pop	ar3
   223F                    7830 00104$:
                    223F   7831 	C$ydrip.c$1022$2$3 ==.
                           7832 ;	apps/ydrip/ydrip.c:1022: if(getMs() - start > six_minutes) {
   223F C0 03              7833 	push	ar3
   2241 12s00r00           7834 	lcall	_getMs
   2244 AC 82              7835 	mov	r4,dpl
   2246 AD 83              7836 	mov	r5,dph
   2248 AE F0              7837 	mov	r6,b
   224A FF                 7838 	mov	r7,a
   224B D0 03              7839 	pop	ar3
   224D EC                 7840 	mov	a,r4
   224E C3                 7841 	clr	c
   224F 95*1D              7842 	subb	a,_WaitForPacket_sloc4_1_0
   2251 FC                 7843 	mov	r4,a
   2252 ED                 7844 	mov	a,r5
   2253 95*1E              7845 	subb	a,(_WaitForPacket_sloc4_1_0 + 1)
   2255 FD                 7846 	mov	r5,a
   2256 EE                 7847 	mov	a,r6
   2257 95*1F              7848 	subb	a,(_WaitForPacket_sloc4_1_0 + 2)
   2259 FE                 7849 	mov	r6,a
   225A EF                 7850 	mov	a,r7
   225B 95*20              7851 	subb	a,(_WaitForPacket_sloc4_1_0 + 3)
   225D FF                 7852 	mov	r7,a
   225E C3                 7853 	clr	c
   225F E5*13              7854 	mov	a,_WaitForPacket_sloc1_1_0
   2261 9C                 7855 	subb	a,r4
   2262 E5*14              7856 	mov	a,(_WaitForPacket_sloc1_1_0 + 1)
   2264 9D                 7857 	subb	a,r5
   2265 E5*15              7858 	mov	a,(_WaitForPacket_sloc1_1_0 + 2)
   2267 9E                 7859 	subb	a,r6
   2268 E5*16              7860 	mov	a,(_WaitForPacket_sloc1_1_0 + 3)
   226A 9F                 7861 	subb	a,r7
   226B 50 10              7862 	jnc	00106$
                    226D   7863 	C$ydrip.c$1023$3$5 ==.
                           7864 ;	apps/ydrip/ydrip.c:1023: killWithWatchdog();
   226D C0 03              7865 	push	ar3
   226F 12s1DrBB           7866 	lcall	_killWithWatchdog
                    2272   7867 	C$ydrip.c$1024$3$5 ==.
                           7868 ;	apps/ydrip/ydrip.c:1024: delayMs(2000);
   2272 90 07 D0           7869 	mov	dptr,#0x07D0
   2275 12s00r00           7870 	lcall	_delayMs
   2278 D0 03              7871 	pop	ar3
                    227A   7872 	C$ydrip.c$1025$4$6 ==.
                           7873 ;	apps/ydrip/ydrip.c:1025: LED_RED(1);												// Error Indicator
   227A 43 FF 02           7874 	orl	_P2DIR,#0x02
   227D                    7875 00106$:
                    227D   7876 	C$ydrip.c$1027$2$3 ==.
                           7877 ;	apps/ydrip/ydrip.c:1027: if (packet = radioQueueRxCurrentPacket()) {
   227D C0 03              7878 	push	ar3
   227F 12s00r00           7879 	lcall	_radioQueueRxCurrentPacket
   2282 AE 82              7880 	mov	r6,dpl
   2284 AF 83              7881 	mov	r7,dph
   2286 D0 03              7882 	pop	ar3
   2288 8E 04              7883 	mov	ar4,r6
   228A 8F 05              7884 	mov	ar5,r7
   228C EE                 7885 	mov	a,r6
   228D 4F                 7886 	orl	a,r7
   228E 70 03              7887 	jnz	00136$
   2290 02s21rA5           7888 	ljmp	00117$
   2293                    7889 00136$:
                    2293   7890 	C$ydrip.c$1028$3$7 ==.
                           7891 ;	apps/ydrip/ydrip.c:1028: uint8 len = packet[0];
   2293 8C 82              7892 	mov	dpl,r4
   2295 8D 83              7893 	mov	dph,r5
   2297 E0                 7894 	movx	a,@dptr
   2298 FF                 7895 	mov	r7,a
                    2299   7896 	C$ydrip.c$1029$3$7 ==.
                           7897 ;	apps/ydrip/ydrip.c:1029: fOffset[channel] += FREQEST;
   2299 EB                 7898 	mov	a,r3
   229A 24r02              7899 	add	a,#_fOffset
   229C F9                 7900 	mov	r1,a
   229D E3                 7901 	movx	a,@r1
   229E FE                 7902 	mov	r6,a
   229F 90 DF 38           7903 	mov	dptr,#_FREQEST
   22A2 E0                 7904 	movx	a,@dptr
   22A3 2E                 7905 	add	a,r6
   22A4 F3                 7906 	movx	@r1,a
                    22A5   7907 	C$ydrip.c$1030$1$1 ==.
                           7908 ;	apps/ydrip/ydrip.c:1030: memcpy(pkt, packet, min8(len+2, sizeof(Dexcom_packet)));
   22A5 C0 03              7909 	push	ar3
   22A7 78r53              7910 	mov	r0,#_WaitForPacket_PARM_2
   22A9 E2                 7911 	movx	a,@r0
   22AA FA                 7912 	mov	r2,a
   22AB 08                 7913 	inc	r0
   22AC E2                 7914 	movx	a,@r0
   22AD FB                 7915 	mov	r3,a
   22AE 7E 00              7916 	mov	r6,#0x00
   22B0 8C*21              7917 	mov	_WaitForPacket_sloc5_1_0,r4
   22B2 8D*22              7918 	mov	(_WaitForPacket_sloc5_1_0 + 1),r5
   22B4 75*23 00           7919 	mov	(_WaitForPacket_sloc5_1_0 + 2),#0x00
   22B7 74 02              7920 	mov	a,#0x02
   22B9 2F                 7921 	add	a,r7
   22BA F5 82              7922 	mov	dpl,a
   22BC 78r40              7923 	mov	r0,#_min8_PARM_2
   22BE 74 15              7924 	mov	a,#0x15
   22C0 F2                 7925 	movx	@r0,a
   22C1 C0 06              7926 	push	ar6
   22C3 C0 03              7927 	push	ar3
   22C5 C0 02              7928 	push	ar2
   22C7 12s01r55           7929 	lcall	_min8
   22CA AF 82              7930 	mov	r7,dpl
   22CC D0 02              7931 	pop	ar2
   22CE D0 03              7932 	pop	ar3
   22D0 D0 06              7933 	pop	ar6
   22D2 78r00              7934 	mov	r0,#_memcpy_PARM_3
   22D4 EF                 7935 	mov	a,r7
   22D5 F2                 7936 	movx	@r0,a
   22D6 08                 7937 	inc	r0
   22D7 E4                 7938 	clr	a
   22D8 F2                 7939 	movx	@r0,a
   22D9 78r00              7940 	mov	r0,#_memcpy_PARM_2
   22DB E5*21              7941 	mov	a,_WaitForPacket_sloc5_1_0
   22DD F2                 7942 	movx	@r0,a
   22DE 08                 7943 	inc	r0
   22DF E5*22              7944 	mov	a,(_WaitForPacket_sloc5_1_0 + 1)
   22E1 F2                 7945 	movx	@r0,a
   22E2 08                 7946 	inc	r0
   22E3 E5*23              7947 	mov	a,(_WaitForPacket_sloc5_1_0 + 2)
   22E5 F2                 7948 	movx	@r0,a
   22E6 8A 82              7949 	mov	dpl,r2
   22E8 8B 83              7950 	mov	dph,r3
   22EA 8E F0              7951 	mov	b,r6
   22EC C0 03              7952 	push	ar3
   22EE 12s00r00           7953 	lcall	_memcpy
                    22F1   7954 	C$ydrip.c$1031$3$7 ==.
                           7955 ;	apps/ydrip/ydrip.c:1031: if(radioCrcPassed()) {
   22F1 12s00r00           7956 	lcall	_radioCrcPassed
   22F4 D0 03              7957 	pop	ar3
   22F6 D0 03              7958 	pop	ar3
   22F8 40 03              7959 	jc	00137$
   22FA 02s23r91           7960 	ljmp	00112$
   22FD                    7961 00137$:
                    22FD   7962 	C$ydrip.c$1032$1$1 ==.
                           7963 ;	apps/ydrip/ydrip.c:1032: dexcom_src_to_ascii(pkt->src_addr, transID);			// Get a human-readable version of the Dexcom Transmitter ID
   22FD C0 03              7964 	push	ar3
   22FF 78r53              7965 	mov	r0,#_WaitForPacket_PARM_2
   2301 E2                 7966 	movx	a,@r0
   2302 FE                 7967 	mov	r6,a
   2303 08                 7968 	inc	r0
   2304 E2                 7969 	movx	a,@r0
   2305 FF                 7970 	mov	r7,a
   2306 8E 82              7971 	mov	dpl,r6
   2308 8F 83              7972 	mov	dph,r7
   230A A3                 7973 	inc	dptr
   230B A3                 7974 	inc	dptr
   230C A3                 7975 	inc	dptr
   230D A3                 7976 	inc	dptr
   230E A3                 7977 	inc	dptr
   230F E0                 7978 	movx	a,@dptr
   2310 FA                 7979 	mov	r2,a
   2311 A3                 7980 	inc	dptr
   2312 E0                 7981 	movx	a,@dptr
   2313 FB                 7982 	mov	r3,a
   2314 A3                 7983 	inc	dptr
   2315 E0                 7984 	movx	a,@dptr
   2316 FC                 7985 	mov	r4,a
   2317 A3                 7986 	inc	dptr
   2318 E0                 7987 	movx	a,@dptr
   2319 FD                 7988 	mov	r5,a
   231A 90s00r03           7989 	mov	dptr,#_dexcom_src_to_ascii_PARM_2
   231D 74r90              7990 	mov	a,#_WaitForPacket_transID_1_1
   231F F0                 7991 	movx	@dptr,a
   2320 A3                 7992 	inc	dptr
   2321 74s02              7993 	mov	a,#(_WaitForPacket_transID_1_1 >> 8)
   2323 F0                 7994 	movx	@dptr,a
   2324 8A 82              7995 	mov	dpl,r2
   2326 8B 83              7996 	mov	dph,r3
   2328 8C F0              7997 	mov	b,r4
   232A ED                 7998 	mov	a,r5
   232B C0 07              7999 	push	ar7
   232D C0 06              8000 	push	ar6
   232F C0 03              8001 	push	ar3
   2331 12s02r17           8002 	lcall	_dexcom_src_to_ascii
                    2334   8003 	C$ydrip.c$1034$4$8 ==.
                           8004 ;	apps/ydrip/ydrip.c:1034: if(strcmp(transID,transmitter_id) == 0 || only_listen_for_my_transmitter == 0) { // strcmp will be zero if they match
   2334 78r00              8005 	mov	r0,#_strcmp_PARM_2
   2336 74r00              8006 	mov	a,#_transmitter_id
   2338 F2                 8007 	movx	@r0,a
   2339 08                 8008 	inc	r0
   233A 74s00              8009 	mov	a,#(_transmitter_id >> 8)
   233C F2                 8010 	movx	@r0,a
   233D 08                 8011 	inc	r0
   233E E4                 8012 	clr	a
   233F F2                 8013 	movx	@r0,a
   2340 90s02r90           8014 	mov	dptr,#_WaitForPacket_transID_1_1
   2343 75 F0 00           8015 	mov	b,#0x00
   2346 12s00r00           8016 	lcall	_strcmp
   2349 E5 82              8017 	mov	a,dpl
   234B 85 83 F0           8018 	mov	b,dph
   234E D0 03              8019 	pop	ar3
   2350 D0 06              8020 	pop	ar6
   2352 D0 07              8021 	pop	ar7
   2354 D0 03              8022 	pop	ar3
   2356 45 F0              8023 	orl	a,b
   2358 60 03              8024 	jz	00107$
   235A 20*00 2A           8025 	jb	_only_listen_for_my_transmitter,00108$
   235D                    8026 00107$:
                    235D   8027 	C$ydrip.c$1035$5$9 ==.
                           8028 ;	apps/ydrip/ydrip.c:1035: pkt->txId -= channel;
   235D 74 0B              8029 	mov	a,#0x0B
   235F 2E                 8030 	add	a,r6
   2360 FE                 8031 	mov	r6,a
   2361 E4                 8032 	clr	a
   2362 3F                 8033 	addc	a,r7
   2363 FF                 8034 	mov	r7,a
   2364 8E 82              8035 	mov	dpl,r6
   2366 8F 83              8036 	mov	dph,r7
   2368 E0                 8037 	movx	a,@dptr
   2369 C3                 8038 	clr	c
   236A 9B                 8039 	subb	a,r3
   236B 8E 82              8040 	mov	dpl,r6
   236D 8F 83              8041 	mov	dph,r7
   236F F0                 8042 	movx	@dptr,a
                    2370   8043 	C$ydrip.c$1036$5$9 ==.
                           8044 ;	apps/ydrip/ydrip.c:1036: radioQueueRxDoneWithPacket();
   2370 C0 03              8045 	push	ar3
   2372 12s00r00           8046 	lcall	_radioQueueRxDoneWithPacket
   2375 D0 03              8047 	pop	ar3
                    2377   8048 	C$ydrip.c$1037$6$10 ==.
                           8049 ;	apps/ydrip/ydrip.c:1037: LED_YELLOW(0);
   2377 AF FF              8050 	mov	r7,_P2DIR
   2379 53 07 FB           8051 	anl	ar7,#0xFB
   237C 8F FF              8052 	mov	_P2DIR,r7
                    237E   8053 	C$ydrip.c$1038$5$9 ==.
                           8054 ;	apps/ydrip/ydrip.c:1038: last_catch_channel = channel;
   237E 78r3A              8055 	mov	r0,#_last_catch_channel
   2380 EB                 8056 	mov	a,r3
   2381 F2                 8057 	movx	@r0,a
                    2382   8058 	C$ydrip.c$1040$5$9 ==.
                           8059 ;	apps/ydrip/ydrip.c:1040: return 1;
   2382 90 00 01           8060 	mov	dptr,#0x0001
   2385 80 23              8061 	sjmp	00120$
   2387                    8062 00108$:
                    2387   8063 	C$ydrip.c$1042$5$11 ==.
                           8064 ;	apps/ydrip/ydrip.c:1042: radioQueueRxDoneWithPacket();
   2387 C0 03              8065 	push	ar3
   2389 12s00r00           8066 	lcall	_radioQueueRxDoneWithPacket
   238C D0 03              8067 	pop	ar3
   238E 02s21rA5           8068 	ljmp	00117$
   2391                    8069 00112$:
                    2391   8070 	C$ydrip.c$1045$4$12 ==.
                           8071 ;	apps/ydrip/ydrip.c:1045: radioQueueRxDoneWithPacket();
   2391 12s00r00           8072 	lcall	_radioQueueRxDoneWithPacket
                    2394   8073 	C$ydrip.c$1046$5$13 ==.
                           8074 ;	apps/ydrip/ydrip.c:1046: LED_YELLOW(0);
   2394 AF FF              8075 	mov	r7,_P2DIR
   2396 53 07 FB           8076 	anl	ar7,#0xFB
   2399 8F FF              8077 	mov	_P2DIR,r7
                    239B   8078 	C$ydrip.c$1047$4$12 ==.
                           8079 ;	apps/ydrip/ydrip.c:1047: return 0;
   239B 90 00 00           8080 	mov	dptr,#0x0000
   239E 80 0A              8081 	sjmp	00120$
   23A0                    8082 00119$:
                    23A0   8083 	C$ydrip.c$1051$2$14 ==.
                           8084 ;	apps/ydrip/ydrip.c:1051: LED_YELLOW(0);
   23A0 AF FF              8085 	mov	r7,_P2DIR
   23A2 53 07 FB           8086 	anl	ar7,#0xFB
   23A5 8F FF              8087 	mov	_P2DIR,r7
                    23A7   8088 	C$ydrip.c$1052$1$1 ==.
                           8089 ;	apps/ydrip/ydrip.c:1052: return nRet;
   23A7 90 00 00           8090 	mov	dptr,#0x0000
   23AA                    8091 00120$:
                    23AA   8092 	C$ydrip.c$1053$1$1 ==.
                    23AA   8093 	XG$WaitForPacket$0$0 ==.
   23AA 22                 8094 	ret
                           8095 ;------------------------------------------------------------
                           8096 ;Allocation info for local variables in function 'delayFor'
                           8097 ;------------------------------------------------------------
                           8098 ;sloc0                     Allocated with name '_delayFor_sloc0_1_0'
                           8099 ;wait_chan                 Allocated with name '_delayFor_wait_chan_1_1'
                           8100 ;------------------------------------------------------------
                    23AB   8101 	G$delayFor$0$0 ==.
                    23AB   8102 	C$ydrip.c$1055$1$1 ==.
                           8103 ;	apps/ydrip/ydrip.c:1055: XDATA uint32 delayFor(XDATA int wait_chan) {
                           8104 ;	-----------------------------------------
                           8105 ;	 function delayFor
                           8106 ;	-----------------------------------------
   23AB                    8107 _delayFor:
   23AB AF 83              8108 	mov	r7,dph
   23AD E5 82              8109 	mov	a,dpl
   23AF 90s02r96           8110 	mov	dptr,#_delayFor_wait_chan_1_1
   23B2 F0                 8111 	movx	@dptr,a
   23B3 A3                 8112 	inc	dptr
   23B4 EF                 8113 	mov	a,r7
   23B5 F0                 8114 	movx	@dptr,a
                    23B6   8115 	C$ydrip.c$1056$1$1 ==.
                           8116 ;	apps/ydrip/ydrip.c:1056: if(needsTimingCalibration) {
   23B6 30*05 29           8117 	jnb	_needsTimingCalibration,00102$
                    23B9   8118 	C$ydrip.c$1057$2$2 ==.
                           8119 ;	apps/ydrip/ydrip.c:1057: return delayedWaitTimes[wait_chan];
   23B9 90s02r96           8120 	mov	dptr,#_delayFor_wait_chan_1_1
   23BC E0                 8121 	movx	a,@dptr
   23BD FE                 8122 	mov	r6,a
   23BE A3                 8123 	inc	dptr
   23BF E0                 8124 	movx	a,@dptr
   23C0 CE                 8125 	xch	a,r6
   23C1 25 E0              8126 	add	a,acc
   23C3 CE                 8127 	xch	a,r6
   23C4 33                 8128 	rlc	a
   23C5 CE                 8129 	xch	a,r6
   23C6 25 E0              8130 	add	a,acc
   23C8 CE                 8131 	xch	a,r6
   23C9 33                 8132 	rlc	a
   23CA EE                 8133 	mov	a,r6
   23CB 24r1A              8134 	add	a,#_delayedWaitTimes
   23CD F9                 8135 	mov	r1,a
   23CE E3                 8136 	movx	a,@r1
   23CF FC                 8137 	mov	r4,a
   23D0 09                 8138 	inc	r1
   23D1 E3                 8139 	movx	a,@r1
   23D2 FD                 8140 	mov	r5,a
   23D3 09                 8141 	inc	r1
   23D4 E3                 8142 	movx	a,@r1
   23D5 FE                 8143 	mov	r6,a
   23D6 09                 8144 	inc	r1
   23D7 E3                 8145 	movx	a,@r1
   23D8 FF                 8146 	mov	r7,a
   23D9 8C 82              8147 	mov	dpl,r4
   23DB 8D 83              8148 	mov	dph,r5
   23DD 8E F0              8149 	mov	b,r6
   23DF 02s24r6D           8150 	ljmp	00107$
   23E2                    8151 00102$:
                    23E2   8152 	C$ydrip.c$1059$1$1 ==.
                           8153 ;	apps/ydrip/ydrip.c:1059: if(!wait_chan && sequential_missed_packets) {
   23E2 90s02r96           8154 	mov	dptr,#_delayFor_wait_chan_1_1
   23E5 E0                 8155 	movx	a,@dptr
   23E6 FE                 8156 	mov	r6,a
   23E7 A3                 8157 	inc	dptr
   23E8 E0                 8158 	movx	a,@dptr
   23E9 FF                 8159 	mov	r7,a
   23EA 4E                 8160 	orl	a,r6
   23EB 70 60              8161 	jnz	00104$
   23ED 78r3E              8162 	mov	r0,#_sequential_missed_packets
   23EF E2                 8163 	movx	a,@r0
   23F0 60 5B              8164 	jz	00104$
                    23F2   8165 	C$ydrip.c$1060$2$3 ==.
                           8166 ;	apps/ydrip/ydrip.c:1060: return waitTimes[wait_chan] + (sequential_missed_packets * wake_earlier_for_next_miss * 2 * 1000);
   23F2 8E 04              8167 	mov	ar4,r6
   23F4 EF                 8168 	mov	a,r7
   23F5 CC                 8169 	xch	a,r4
   23F6 25 E0              8170 	add	a,acc
   23F8 CC                 8171 	xch	a,r4
   23F9 33                 8172 	rlc	a
   23FA CC                 8173 	xch	a,r4
   23FB 25 E0              8174 	add	a,acc
   23FD CC                 8175 	xch	a,r4
   23FE 33                 8176 	rlc	a
   23FF EC                 8177 	mov	a,r4
   2400 24r0A              8178 	add	a,#_waitTimes
   2402 F9                 8179 	mov	r1,a
   2403 E3                 8180 	movx	a,@r1
   2404 F5*25              8181 	mov	_delayFor_sloc0_1_0,a
   2406 09                 8182 	inc	r1
   2407 E3                 8183 	movx	a,@r1
   2408 F5*26              8184 	mov	(_delayFor_sloc0_1_0 + 1),a
   240A 09                 8185 	inc	r1
   240B E3                 8186 	movx	a,@r1
   240C F5*27              8187 	mov	(_delayFor_sloc0_1_0 + 2),a
   240E 09                 8188 	inc	r1
   240F E3                 8189 	movx	a,@r1
   2410 F5*28              8190 	mov	(_delayFor_sloc0_1_0 + 3),a
   2412 78r3E              8191 	mov	r0,#_sequential_missed_packets
   2414 79r00              8192 	mov	r1,#_wake_earlier_for_next_miss
   2416 E2                 8193 	movx	a,@r0
   2417 F5 F0              8194 	mov	b,a
   2419 E3                 8195 	movx	a,@r1
   241A A4                 8196 	mul	ab
   241B FC                 8197 	mov	r4,a
   241C AD F0              8198 	mov	r5,b
   241E 78r00              8199 	mov	r0,#__mulint_PARM_2
   2420 EC                 8200 	mov	a,r4
   2421 F2                 8201 	movx	@r0,a
   2422 08                 8202 	inc	r0
   2423 ED                 8203 	mov	a,r5
   2424 F2                 8204 	movx	@r0,a
   2425 90 07 D0           8205 	mov	dptr,#0x07D0
   2428 12s00r00           8206 	lcall	__mulint
   242B AC 82              8207 	mov	r4,dpl
   242D E5 83              8208 	mov	a,dph
   242F FD                 8209 	mov	r5,a
   2430 33                 8210 	rlc	a
   2431 95 E0              8211 	subb	a,acc
   2433 FB                 8212 	mov	r3,a
   2434 FA                 8213 	mov	r2,a
   2435 EC                 8214 	mov	a,r4
   2436 25*25              8215 	add	a,_delayFor_sloc0_1_0
   2438 FC                 8216 	mov	r4,a
   2439 ED                 8217 	mov	a,r5
   243A 35*26              8218 	addc	a,(_delayFor_sloc0_1_0 + 1)
   243C FD                 8219 	mov	r5,a
   243D EB                 8220 	mov	a,r3
   243E 35*27              8221 	addc	a,(_delayFor_sloc0_1_0 + 2)
   2440 FB                 8222 	mov	r3,a
   2441 EA                 8223 	mov	a,r2
   2442 35*28              8224 	addc	a,(_delayFor_sloc0_1_0 + 3)
   2444 FA                 8225 	mov	r2,a
   2445 8C 82              8226 	mov	dpl,r4
   2447 8D 83              8227 	mov	dph,r5
   2449 8B F0              8228 	mov	b,r3
   244B 80 20              8229 	sjmp	00107$
   244D                    8230 00104$:
                    244D   8231 	C$ydrip.c$1062$2$4 ==.
                           8232 ;	apps/ydrip/ydrip.c:1062: return waitTimes[wait_chan];
   244D EF                 8233 	mov	a,r7
   244E CE                 8234 	xch	a,r6
   244F 25 E0              8235 	add	a,acc
   2451 CE                 8236 	xch	a,r6
   2452 33                 8237 	rlc	a
   2453 CE                 8238 	xch	a,r6
   2454 25 E0              8239 	add	a,acc
   2456 CE                 8240 	xch	a,r6
   2457 33                 8241 	rlc	a
   2458 EE                 8242 	mov	a,r6
   2459 24r0A              8243 	add	a,#_waitTimes
   245B F9                 8244 	mov	r1,a
   245C E3                 8245 	movx	a,@r1
   245D FC                 8246 	mov	r4,a
   245E 09                 8247 	inc	r1
   245F E3                 8248 	movx	a,@r1
   2460 FD                 8249 	mov	r5,a
   2461 09                 8250 	inc	r1
   2462 E3                 8251 	movx	a,@r1
   2463 FE                 8252 	mov	r6,a
   2464 09                 8253 	inc	r1
   2465 E3                 8254 	movx	a,@r1
   2466 FF                 8255 	mov	r7,a
   2467 8C 82              8256 	mov	dpl,r4
   2469 8D 83              8257 	mov	dph,r5
   246B 8E F0              8258 	mov	b,r6
   246D                    8259 00107$:
                    246D   8260 	C$ydrip.c$1064$1$1 ==.
                    246D   8261 	XG$delayFor$0$0 ==.
   246D 22                 8262 	ret
                           8263 ;------------------------------------------------------------
                           8264 ;Allocation info for local variables in function 'get_packet'
                           8265 ;------------------------------------------------------------
                    246E   8266 	G$get_packet$0$0 ==.
                    246E   8267 	C$ydrip.c$1066$1$1 ==.
                           8268 ;	apps/ydrip/ydrip.c:1066: BIT get_packet(Dexcom_packet* pPkt) {
                           8269 ;	-----------------------------------------
                           8270 ;	 function get_packet
                           8271 ;	-----------------------------------------
   246E                    8272 _get_packet:
   246E AF 83              8273 	mov	r7,dph
   2470 E5 82              8274 	mov	a,dpl
   2472 78r55              8275 	mov	r0,#_get_packet_pPkt_1_1
   2474 F2                 8276 	movx	@r0,a
   2475 08                 8277 	inc	r0
   2476 EF                 8278 	mov	a,r7
   2477 F2                 8279 	movx	@r0,a
                    2478   8280 	C$ydrip.c$1068$1$1 ==.
                           8281 ;	apps/ydrip/ydrip.c:1068: for(nChannel = start_channel; nChannel < NUM_CHANNELS; nChannel++) {
   2478 90s00r3D           8282 	mov	dptr,#_start_channel
   247B E0                 8283 	movx	a,@dptr
   247C FC                 8284 	mov	r4,a
   247D 33                 8285 	rlc	a
   247E 95 E0              8286 	subb	a,acc
   2480 FD                 8287 	mov	r5,a
   2481                    8288 00104$:
   2481 C3                 8289 	clr	c
   2482 EC                 8290 	mov	a,r4
   2483 94 04              8291 	subb	a,#0x04
   2485 ED                 8292 	mov	a,r5
   2486 64 80              8293 	xrl	a,#0x80
   2488 94 80              8294 	subb	a,#0x80
   248A 50 4F              8295 	jnc	00107$
                    248C   8296 	C$ydrip.c$1069$2$2 ==.
                           8297 ;	apps/ydrip/ydrip.c:1069: switch(WaitForPacket(delayFor(nChannel), pPkt, nChannel)) {
   248C 8C 82              8298 	mov	dpl,r4
   248E 8D 83              8299 	mov	dph,r5
   2490 C0 05              8300 	push	ar5
   2492 C0 04              8301 	push	ar4
   2494 12s23rAB           8302 	lcall	_delayFor
   2497 AA 82              8303 	mov	r2,dpl
   2499 AB 83              8304 	mov	r3,dph
   249B D0 04              8305 	pop	ar4
   249D 90s02r89           8306 	mov	dptr,#_WaitForPacket_PARM_3
   24A0 EC                 8307 	mov	a,r4
   24A1 F0                 8308 	movx	@dptr,a
   24A2 78r55              8309 	mov	r0,#_get_packet_pPkt_1_1
   24A4 79r53              8310 	mov	r1,#_WaitForPacket_PARM_2
   24A6 E2                 8311 	movx	a,@r0
   24A7 F3                 8312 	movx	@r1,a
   24A8 08                 8313 	inc	r0
   24A9 E2                 8314 	movx	a,@r0
   24AA 09                 8315 	inc	r1
   24AB F3                 8316 	movx	@r1,a
   24AC 8A 82              8317 	mov	dpl,r2
   24AE 8B 83              8318 	mov	dph,r3
   24B0 C0 04              8319 	push	ar4
   24B2 12s20rFC           8320 	lcall	_WaitForPacket
   24B5 AE 82              8321 	mov	r6,dpl
   24B7 AF 83              8322 	mov	r7,dph
   24B9 D0 04              8323 	pop	ar4
   24BB D0 05              8324 	pop	ar5
   24BD BE 00 05           8325 	cjne	r6,#0x00,00118$
   24C0 BF 00 02           8326 	cjne	r7,#0x00,00118$
   24C3 80 0F              8327 	sjmp	00106$
   24C5                    8328 00118$:
   24C5 BE 01 0C           8329 	cjne	r6,#0x01,00106$
   24C8 BF 00 09           8330 	cjne	r7,#0x00,00106$
                    24CB   8331 	C$ydrip.c$1071$3$3 ==.
                           8332 ;	apps/ydrip/ydrip.c:1071: needsTimingCalibration = 0;
   24CB C2*05              8333 	clr	_needsTimingCalibration
                    24CD   8334 	C$ydrip.c$1072$3$3 ==.
                           8335 ;	apps/ydrip/ydrip.c:1072: sequential_missed_packets = 0;
   24CD 78r3E              8336 	mov	r0,#_sequential_missed_packets
   24CF E4                 8337 	clr	a
   24D0 F2                 8338 	movx	@r0,a
                    24D1   8339 	C$ydrip.c$1073$3$3 ==.
                           8340 ;	apps/ydrip/ydrip.c:1073: return 1;
   24D1 D3                 8341 	setb	c
                    24D2   8342 	C$ydrip.c$1076$1$1 ==.
                           8343 ;	apps/ydrip/ydrip.c:1076: }
   24D2 80 28              8344 	sjmp	00110$
   24D4                    8345 00106$:
                    24D4   8346 	C$ydrip.c$1068$1$1 ==.
                           8347 ;	apps/ydrip/ydrip.c:1068: for(nChannel = start_channel; nChannel < NUM_CHANNELS; nChannel++) {
   24D4 0C                 8348 	inc	r4
   24D5 BC 00 A9           8349 	cjne	r4,#0x00,00104$
   24D8 0D                 8350 	inc	r5
   24D9 80 A6              8351 	sjmp	00104$
   24DB                    8352 00107$:
                    24DB   8353 	C$ydrip.c$1078$1$1 ==.
                           8354 ;	apps/ydrip/ydrip.c:1078: sequential_missed_packets ++;
   24DB 78r3E              8355 	mov	r0,#_sequential_missed_packets
   24DD E2                 8356 	movx	a,@r0
   24DE 24 01              8357 	add	a,#0x01
   24E0 F2                 8358 	movx	@r0,a
                    24E1   8359 	C$ydrip.c$1079$1$1 ==.
                           8360 ;	apps/ydrip/ydrip.c:1079: if(sequential_missed_packets > misses_until_failure) {
   24E1 78r3E              8361 	mov	r0,#_sequential_missed_packets
   24E3 79r01              8362 	mov	r1,#_misses_until_failure
   24E5 C3                 8363 	clr	c
   24E6 E2                 8364 	movx	a,@r0
   24E7 F5 F0              8365 	mov	b,a
   24E9 E3                 8366 	movx	a,@r1
   24EA 95 F0              8367 	subb	a,b
   24EC 50 06              8368 	jnc	00109$
                    24EE   8369 	C$ydrip.c$1080$2$4 ==.
                           8370 ;	apps/ydrip/ydrip.c:1080: sequential_missed_packets = 0;
   24EE 78r3E              8371 	mov	r0,#_sequential_missed_packets
   24F0 E4                 8372 	clr	a
   24F1 F2                 8373 	movx	@r0,a
                    24F2   8374 	C$ydrip.c$1081$2$4 ==.
                           8375 ;	apps/ydrip/ydrip.c:1081: needsTimingCalibration = 1;
   24F2 D2*05              8376 	setb	_needsTimingCalibration
   24F4                    8377 00109$:
                    24F4   8378 	C$ydrip.c$1083$1$1 ==.
                           8379 ;	apps/ydrip/ydrip.c:1083: reset_offsets();
   24F4 12s1Dr93           8380 	lcall	_reset_offsets
                    24F7   8381 	C$ydrip.c$1084$1$1 ==.
                           8382 ;	apps/ydrip/ydrip.c:1084: last_catch_channel = 0;
   24F7 78r3A              8383 	mov	r0,#_last_catch_channel
   24F9 E4                 8384 	clr	a
   24FA F2                 8385 	movx	@r0,a
                    24FB   8386 	C$ydrip.c$1085$1$1 ==.
                           8387 ;	apps/ydrip/ydrip.c:1085: return 0;
   24FB C3                 8388 	clr	c
   24FC                    8389 00110$:
                    24FC   8390 	C$ydrip.c$1086$1$1 ==.
                    24FC   8391 	XG$get_packet$0$0 ==.
   24FC 22                 8392 	ret
                           8393 ;------------------------------------------------------------
                           8394 ;Allocation info for local variables in function 'setADCInputs'
                           8395 ;------------------------------------------------------------
                    24FD   8396 	G$setADCInputs$0$0 ==.
                    24FD   8397 	C$ydrip.c$1088$1$1 ==.
                           8398 ;	apps/ydrip/ydrip.c:1088: void setADCInputs() {
                           8399 ;	-----------------------------------------
                           8400 ;	 function setADCInputs
                           8401 ;	-----------------------------------------
   24FD                    8402 _setADCInputs:
                    24FD   8403 	C$ydrip.c$1089$1$1 ==.
                           8404 ;	apps/ydrip/ydrip.c:1089: P0INP=0; //set pull resistors on pins 0_0 - 0_5 to low
   24FD 75 8F 00           8405 	mov	_P0INP,#0x00
                    2500   8406 	C$ydrip.c$1090$1$1 ==.
                    2500   8407 	XG$setADCInputs$0$0 ==.
   2500 22                 8408 	ret
                           8409 ;------------------------------------------------------------
                           8410 ;Allocation info for local variables in function 'main'
                           8411 ;------------------------------------------------------------
                           8412 ;Pkt                       Allocated with name '_main_Pkt_2_2'
                           8413 ;------------------------------------------------------------
                    2501   8414 	G$main$0$0 ==.
                    2501   8415 	C$ydrip.c$1093$1$1 ==.
                           8416 ;	apps/ydrip/ydrip.c:1093: void main() {
                           8417 ;	-----------------------------------------
                           8418 ;	 function main
                           8419 ;	-----------------------------------------
   2501                    8420 _main:
                    2501   8421 	C$ydrip.c$1095$1$1 ==.
                           8422 ;	apps/ydrip/ydrip.c:1095: systemInit();
   2501 12s00r00           8423 	lcall	_systemInit
                    2504   8424 	C$ydrip.c$1096$1$1 ==.
                           8425 ;	apps/ydrip/ydrip.c:1096: initUart1();
   2504 12s03r82           8426 	lcall	_initUart1
                    2507   8427 	C$ydrip.c$1098$1$1 ==.
                           8428 ;	apps/ydrip/ydrip.c:1098: P1DIR |= 0x08; // RTS
   2507 43 FE 08           8429 	orl	_P1DIR,#0x08
                    250A   8430 	C$ydrip.c$1099$1$1 ==.
                           8431 ;	apps/ydrip/ydrip.c:1099: sleepInit();
   250A 12s00r00           8432 	lcall	_sleepInit
                    250D   8433 	C$ydrip.c$1100$1$1 ==.
                           8434 ;	apps/ydrip/ydrip.c:1100: makeAllOutputs();
   250D 12s1Dr41           8435 	lcall	_makeAllOutputs
                    2510   8436 	C$ydrip.c$1101$1$1 ==.
                           8437 ;	apps/ydrip/ydrip.c:1101: setADCInputs();
   2510 12s24rFD           8438 	lcall	_setADCInputs
                    2513   8439 	C$ydrip.c$1102$1$1 ==.
                           8440 ;	apps/ydrip/ydrip.c:1102: delayMs(1000);
   2513 90 03 E8           8441 	mov	dptr,#0x03E8
   2516 12s00r00           8442 	lcall	_delayMs
                    2519   8443 	C$ydrip.c$1112$1$1 ==.
                           8444 ;	apps/ydrip/ydrip.c:1112: radioQueueInit();
   2519 12s00r00           8445 	lcall	_radioQueueInit
                    251C   8446 	C$ydrip.c$1113$1$1 ==.
                           8447 ;	apps/ydrip/ydrip.c:1113: radioQueueAllowCrcErrors = 1;
   251C D2*00              8448 	setb	_radioQueueAllowCrcErrors
                    251E   8449 	C$ydrip.c$1114$1$1 ==.
                           8450 ;	apps/ydrip/ydrip.c:1114: MCSM1 = 0;
   251E 90 DF 13           8451 	mov	dptr,#_MCSM1
   2521 E4                 8452 	clr	a
   2522 F0                 8453 	movx	@dptr,a
                    2523   8454 	C$ydrip.c$1115$1$1 ==.
                           8455 ;	apps/ydrip/ydrip.c:1115: enableESP();
   2523 12s06r88           8456 	lcall	_enableESP
                    2526   8457 	C$ydrip.c$1117$1$1 ==.
                           8458 ;	apps/ydrip/ydrip.c:1117: while(1) {
   2526                    8459 00113$:
                    2526   8460 	C$ydrip.c$1119$2$2 ==.
                           8461 ;	apps/ydrip/ydrip.c:1119: memset(&Pkt, 0, sizeof(Dexcom_packet));
   2526 78r00              8462 	mov	r0,#_memset_PARM_2
   2528 E4                 8463 	clr	a
   2529 F2                 8464 	movx	@r0,a
   252A 78r00              8465 	mov	r0,#_memset_PARM_3
   252C 74 15              8466 	mov	a,#0x15
   252E F2                 8467 	movx	@r0,a
   252F 08                 8468 	inc	r0
   2530 E4                 8469 	clr	a
   2531 F2                 8470 	movx	@r0,a
   2532 90s02r98           8471 	mov	dptr,#_main_Pkt_2_2
   2535 75 F0 00           8472 	mov	b,#0x00
   2538 12s00r00           8473 	lcall	_memset
                    253B   8474 	C$ydrip.c$1120$2$2 ==.
                           8475 ;	apps/ydrip/ydrip.c:1120: boardService();
   253B 12s00r00           8476 	lcall	_boardService
                    253E   8477 	C$ydrip.c$1122$2$2 ==.
                           8478 ;	apps/ydrip/ydrip.c:1122: if (debug_mode) {
   253E 30*03 08           8479 	jnb	_debug_mode,00105$
                    2541   8480 	C$ydrip.c$1123$3$3 ==.
                           8481 ;	apps/ydrip/ydrip.c:1123: print_packet(&Pkt);	
   2541 90s02r98           8482 	mov	dptr,#_main_Pkt_2_2
   2544 12s19r87           8483 	lcall	_print_packet
   2547 80 49              8484 	sjmp	00106$
   2549                    8485 00105$:
                    2549   8486 	C$ydrip.c$1125$3$4 ==.
                           8487 ;	apps/ydrip/ydrip.c:1125: if(get_packet(&Pkt)) {
   2549 90s02r98           8488 	mov	dptr,#_main_Pkt_2_2
   254C 12s24r6E           8489 	lcall	_get_packet
   254F 50 17              8490 	jnc	00102$
                    2551   8491 	C$ydrip.c$1126$4$5 ==.
                           8492 ;	apps/ydrip/ydrip.c:1126: RFST = 4;
   2551 75 E1 04           8493 	mov	_RFST,#0x04
                    2554   8494 	C$ydrip.c$1127$4$5 ==.
                           8495 ;	apps/ydrip/ydrip.c:1127: delayMs(100);
   2554 90 00 64           8496 	mov	dptr,#0x0064
   2557 12s00r00           8497 	lcall	_delayMs
                    255A   8498 	C$ydrip.c$1128$4$5 ==.
                           8499 ;	apps/ydrip/ydrip.c:1128: radioMacSleep();
   255A 12s00r00           8500 	lcall	_radioMacSleep
                    255D   8501 	C$ydrip.c$1129$4$5 ==.
                           8502 ;	apps/ydrip/ydrip.c:1129: print_packet(&Pkt);
   255D 90s02r98           8503 	mov	dptr,#_main_Pkt_2_2
   2560 12s19r87           8504 	lcall	_print_packet
                    2563   8505 	C$ydrip.c$1130$4$5 ==.
                           8506 ;	apps/ydrip/ydrip.c:1130: ESPsleep();											// Disconnect and send the fona asleep
   2563 12s19r36           8507 	lcall	_ESPsleep
   2566 80 2A              8508 	sjmp	00106$
   2568                    8509 00102$:
                    2568   8510 	C$ydrip.c$1133$4$6 ==.
                           8511 ;	apps/ydrip/ydrip.c:1133: RFST = 4;
   2568 75 E1 04           8512 	mov	_RFST,#0x04
                    256B   8513 	C$ydrip.c$1134$4$6 ==.
                           8514 ;	apps/ydrip/ydrip.c:1134: delayMs(100);
   256B 90 00 64           8515 	mov	dptr,#0x0064
   256E 12s00r00           8516 	lcall	_delayMs
                    2571   8517 	C$ydrip.c$1135$4$6 ==.
                           8518 ;	apps/ydrip/ydrip.c:1135: radioMacSleep();
   2571 12s00r00           8519 	lcall	_radioMacSleep
                    2574   8520 	C$ydrip.c$1136$5$7 ==.
                           8521 ;	apps/ydrip/ydrip.c:1136: LED_RED(1);	    LED_YELLOW(0);    delayMs(7000);	LED_RED(0);	    LED_YELLOW(0);    //		delayMs(3000);
   2574 43 FF 02           8522 	orl	_P2DIR,#0x02
   2577 AF FF              8523 	mov	r7,_P2DIR
   2579 53 07 FB           8524 	anl	ar7,#0xFB
   257C 8F FF              8525 	mov	_P2DIR,r7
   257E 90 1B 58           8526 	mov	dptr,#0x1B58
   2581 12s00r00           8527 	lcall	_delayMs
   2584 AF FF              8528 	mov	r7,_P2DIR
   2586 53 07 FD           8529 	anl	ar7,#0xFD
   2589 8F FF              8530 	mov	_P2DIR,r7
   258B AF FF              8531 	mov	r7,_P2DIR
   258D 53 07 FB           8532 	anl	ar7,#0xFB
   2590 8F FF              8533 	mov	_P2DIR,r7
   2592                    8534 00106$:
                    2592   8535 	C$ydrip.c$1144$2$2 ==.
                           8536 ;	apps/ydrip/ydrip.c:1144: if(usbPowerPresent()){
   2592 12s00r00           8537 	lcall	_usbPowerPresent
   2595 50 06              8538 	jnc	00108$
                    2597   8539 	C$ydrip.c$1145$3$11 ==.
                           8540 ;	apps/ydrip/ydrip.c:1145: sequential_missed_packets++;	// Why only increment this if usb connected?  It is incremented in get_packet also so a bit confusing
   2597 78r3E              8541 	mov	r0,#_sequential_missed_packets
   2599 E2                 8542 	movx	a,@r0
   259A 24 01              8543 	add	a,#0x01
   259C F2                 8544 	movx	@r0,a
   259D                    8545 00108$:
                    259D   8546 	C$ydrip.c$1147$2$2 ==.
                           8547 ;	apps/ydrip/ydrip.c:1147: if(sequential_missed_packets > 0) {
   259D 78r3E              8548 	mov	r0,#_sequential_missed_packets
   259F E2                 8549 	movx	a,@r0
   25A0 60 73              8550 	jz	00110$
                    25A2   8551 	C$ydrip.c$1148$3$12 ==.
                           8552 ;	apps/ydrip/ydrip.c:1148: int first_square = sequential_missed_packets * sequential_missed_packets * wake_earlier_for_next_miss;
   25A2 78r3E              8553 	mov	r0,#_sequential_missed_packets
   25A4 E2                 8554 	movx	a,@r0
   25A5 F5 F0              8555 	mov	b,a
   25A7 E2                 8556 	movx	a,@r0
   25A8 A4                 8557 	mul	ab
   25A9 F5 82              8558 	mov	dpl,a
   25AB 85 F0 83           8559 	mov	dph,b
   25AE 78r00              8560 	mov	r0,#_wake_earlier_for_next_miss
   25B0 79r00              8561 	mov	r1,#__mulint_PARM_2
   25B2 E2                 8562 	movx	a,@r0
   25B3 F3                 8563 	movx	@r1,a
   25B4 09                 8564 	inc	r1
   25B5 E4                 8565 	clr	a
   25B6 F3                 8566 	movx	@r1,a
   25B7 12s00r00           8567 	lcall	__mulint
   25BA AE 82              8568 	mov	r6,dpl
   25BC AF 83              8569 	mov	r7,dph
                    25BE   8570 	C$ydrip.c$1149$3$12 ==.
                           8571 ;	apps/ydrip/ydrip.c:1149: int second_square = (sequential_missed_packets - 1) * (sequential_missed_packets - 1) * wake_earlier_for_next_miss;
   25BE 78r3E              8572 	mov	r0,#_sequential_missed_packets
   25C0 E2                 8573 	movx	a,@r0
   25C1 7D 00              8574 	mov	r5,#0x00
   25C3 24 FF              8575 	add	a,#0xFF
   25C5 F5 82              8576 	mov	dpl,a
   25C7 ED                 8577 	mov	a,r5
   25C8 34 FF              8578 	addc	a,#0xFF
   25CA F5 83              8579 	mov	dph,a
   25CC 78r3E              8580 	mov	r0,#_sequential_missed_packets
   25CE E2                 8581 	movx	a,@r0
   25CF FC                 8582 	mov	r4,a
   25D0 7D 00              8583 	mov	r5,#0x00
   25D2 78r00              8584 	mov	r0,#__mulint_PARM_2
   25D4 EC                 8585 	mov	a,r4
   25D5 24 FF              8586 	add	a,#0xFF
   25D7 F2                 8587 	movx	@r0,a
   25D8 ED                 8588 	mov	a,r5
   25D9 34 FF              8589 	addc	a,#0xFF
   25DB 08                 8590 	inc	r0
   25DC F2                 8591 	movx	@r0,a
   25DD C0 07              8592 	push	ar7
   25DF C0 06              8593 	push	ar6
   25E1 12s00r00           8594 	lcall	__mulint
   25E4 AC 82              8595 	mov	r4,dpl
   25E6 AD 83              8596 	mov	r5,dph
   25E8 78r00              8597 	mov	r0,#_wake_earlier_for_next_miss
   25EA 79r00              8598 	mov	r1,#__mulint_PARM_2
   25EC E2                 8599 	movx	a,@r0
   25ED F3                 8600 	movx	@r1,a
   25EE 09                 8601 	inc	r1
   25EF E4                 8602 	clr	a
   25F0 F3                 8603 	movx	@r1,a
   25F1 8C 82              8604 	mov	dpl,r4
   25F3 8D 83              8605 	mov	dph,r5
   25F5 12s00r00           8606 	lcall	__mulint
   25F8 AC 82              8607 	mov	r4,dpl
   25FA AD 83              8608 	mov	r5,dph
   25FC D0 06              8609 	pop	ar6
   25FE D0 07              8610 	pop	ar7
                    2600   8611 	C$ydrip.c$1150$3$12 ==.
                           8612 ;	apps/ydrip/ydrip.c:1150: int sleep_time = (245 - first_square + second_square);
   2600 74 F5              8613 	mov	a,#0xF5
   2602 C3                 8614 	clr	c
   2603 9E                 8615 	subb	a,r6
   2604 FE                 8616 	mov	r6,a
   2605 E4                 8617 	clr	a
   2606 9F                 8618 	subb	a,r7
   2607 FF                 8619 	mov	r7,a
   2608 EC                 8620 	mov	a,r4
   2609 2E                 8621 	add	a,r6
   260A F5 82              8622 	mov	dpl,a
   260C ED                 8623 	mov	a,r5
   260D 3F                 8624 	addc	a,r7
   260E F5 83              8625 	mov	dph,a
                    2610   8626 	C$ydrip.c$1151$3$12 ==.
                           8627 ;	apps/ydrip/ydrip.c:1151: goToSleep(sleep_time);
   2610 12s1DrCD           8628 	lcall	_goToSleep
   2613 80 06              8629 	sjmp	00111$
   2615                    8630 00110$:
                    2615   8631 	C$ydrip.c$1153$3$13 ==.
                           8632 ;	apps/ydrip/ydrip.c:1153: goToSleep(260);		// Wixel sleep for 260 seconds
   2615 90 01 04           8633 	mov	dptr,#0x0104
   2618 12s1DrCD           8634 	lcall	_goToSleep
   261B                    8635 00111$:
                    261B   8636 	C$ydrip.c$1156$2$2 ==.
                           8637 ;	apps/ydrip/ydrip.c:1156: radioMacResume();
   261B 12s00r00           8638 	lcall	_radioMacResume
                    261E   8639 	C$ydrip.c$1157$2$2 ==.
                           8640 ;	apps/ydrip/ydrip.c:1157: MCSM1 = 0;
   261E 90 DF 13           8641 	mov	dptr,#_MCSM1
   2621 E4                 8642 	clr	a
   2622 F0                 8643 	movx	@dptr,a
                    2623   8644 	C$ydrip.c$1158$2$2 ==.
                           8645 ;	apps/ydrip/ydrip.c:1158: radioMacStrobe();
   2623 12s00r00           8646 	lcall	_radioMacStrobe
   2626 02s25r26           8647 	ljmp	00113$
                    2629   8648 	C$ydrip.c$1160$1$1 ==.
                    2629   8649 	XG$main$0$0 ==.
   2629 22                 8650 	ret
                           8651 	.area CSEG    (CODE)
                           8652 	.area CONST   (CODE)
                    0000   8653 Fydrip$apnString$0$0 == .
   0000                    8654 _apnString:
   0000 69 6E 74 65 72 6E  8655 	.ascii "internet"
        65 74
   0008 00                 8656 	.db 0x00
                    0009   8657 Fydrip$_str_1$0$0 == .
   0009                    8658 __str_1:
   0009 64 6F 66 69 6C 65  8659 	.ascii "dofile("
        28
   0010 22                 8660 	.db 0x22
   0011 69 6E 69 74 2E 6C  8661 	.ascii "init.lua"
        75 61
   0019 22                 8662 	.db 0x22
   001A 29                 8663 	.ascii ")"
   001B 0D                 8664 	.db 0x0D
   001C 0A                 8665 	.db 0x0A
   001D 00                 8666 	.db 0x00
                    001E   8667 Fydrip$_str_2$0$0 == .
   001E                    8668 __str_2:
   001E 2D 2D 20 4E 6F 20  8669 	.ascii "-- No need to write out .lua files as they seem to already e"
        6E 65 65 64 20 74
        6F 20 77 72 69 74
        65 20 6F 75 74 20
        2E 6C 75 61 20 66
        69 6C 65 73 20 61
        73 20 74 68 65 79
        20 73 65 65 6D 20
        74 6F 20 61 6C 72
        65 61 64 79 20 65
   005A 78 69 73 74 20 2D  8670 	.ascii "xist --"
        2D
   0061 0D                 8671 	.db 0x0D
   0062 0A                 8672 	.db 0x0A
   0063 00                 8673 	.db 0x00
                    0064   8674 Fydrip$_str_3$0$0 == .
   0064                    8675 __str_3:
   0064 2D 2D 20 57 72 69  8676 	.ascii "-- Writing out .lua files as they cannot be found --"
        74 69 6E 67 20 6F
        75 74 20 2E 6C 75
        61 20 66 69 6C 65
        73 20 61 73 20 74
        68 65 79 20 63 61
        6E 6E 6F 74 20 62
        65 20 66 6F 75 6E
        64 20 2D 2D
   0098 0D                 8677 	.db 0x0D
   0099 0A                 8678 	.db 0x0A
   009A 00                 8679 	.db 0x00
                    009B   8680 Fydrip$_str_4$0$0 == .
   009B                    8681 __str_4:
   009B 66 69 6C 65 2E 6F  8682 	.ascii "file.open("
        70 65 6E 28
   00A5 22                 8683 	.db 0x22
   00A6 69 6E 69 74 2E 6C  8684 	.ascii "init.lua"
        75 61
   00AE 22                 8685 	.db 0x22
   00AF 2C 20              8686 	.ascii ", "
   00B1 22                 8687 	.db 0x22
   00B2 77                 8688 	.ascii "w"
   00B3 22                 8689 	.db 0x22
   00B4 29                 8690 	.ascii ")"
   00B5 0D                 8691 	.db 0x0D
   00B6 0A                 8692 	.db 0x0A
   00B7 00                 8693 	.db 0x00
                    00B8   8694 Fydrip$_str_5$0$0 == .
   00B8                    8695 __str_5:
   00B8 66 69 6C 65 2E 77  8696 	.ascii "file.writeline([[gpio.mode(3, gpio.OUTPUT)]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 67
        70 69 6F 2E 6D 6F
        64 65 28 33 2C 20
        67 70 69 6F 2E 4F
        55 54 50 55 54 29
        5D 5D 29
   00E5 0D                 8697 	.db 0x0D
   00E6 0A                 8698 	.db 0x0A
   00E7 00                 8699 	.db 0x00
                    00E8   8700 Fydrip$_str_6$0$0 == .
   00E8                    8701 __str_6:
   00E8 66 69 6C 65 2E 77  8702 	.ascii "file.writeline([[gpio.write(3, gpio.LOW)]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 67
        70 69 6F 2E 77 72
        69 74 65 28 33 2C
        20 67 70 69 6F 2E
        4C 4F 57 29 5D 5D
        29
   0113 0D                 8703 	.db 0x0D
   0114 0A                 8704 	.db 0x0A
   0115 00                 8705 	.db 0x00
                    0116   8706 Fydrip$_str_7$0$0 == .
   0116                    8707 __str_7:
   0116 66 69 6C 65 2E 77  8708 	.ascii "file.writeline([[gpio.mode(5, gpio.OUTPUT)]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 67
        70 69 6F 2E 6D 6F
        64 65 28 35 2C 20
        67 70 69 6F 2E 4F
        55 54 50 55 54 29
        5D 5D 29
   0143 0D                 8709 	.db 0x0D
   0144 0A                 8710 	.db 0x0A
   0145 00                 8711 	.db 0x00
                    0146   8712 Fydrip$_str_8$0$0 == .
   0146                    8713 __str_8:
   0146 66 69 6C 65 2E 77  8714 	.ascii "file.writeline([[gpio.write(5, gpio.LOW)]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 67
        70 69 6F 2E 77 72
        69 74 65 28 35 2C
        20 67 70 69 6F 2E
        4C 4F 57 29 5D 5D
        29
   0171 0D                 8715 	.db 0x0D
   0172 0A                 8716 	.db 0x0A
   0173 00                 8717 	.db 0x00
                    0174   8718 Fydrip$_str_9$0$0 == .
   0174                    8719 __str_9:
   0174 66 69 6C 65 2E 77  8720 	.ascii "file.writeline([[gpio.mode(4, gpio.OUTPUT)]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 67
        70 69 6F 2E 6D 6F
        64 65 28 34 2C 20
        67 70 69 6F 2E 4F
        55 54 50 55 54 29
        5D 5D 29
   01A1 0D                 8721 	.db 0x0D
   01A2 0A                 8722 	.db 0x0A
   01A3 00                 8723 	.db 0x00
                    01A4   8724 Fydrip$_str_10$0$0 == .
   01A4                    8725 __str_10:
   01A4 66 69 6C 65 2E 63  8726 	.ascii "file.close()"
        6C 6F 73 65 28 29
   01B0 0D                 8727 	.db 0x0D
   01B1 0A                 8728 	.db 0x0A
   01B2 00                 8729 	.db 0x00
                    01B3   8730 Fydrip$_str_11$0$0 == .
   01B3                    8731 __str_11:
   01B3 66 69 6C 65 2E 72  8732 	.ascii "file.remove('googletime.lua')"
        65 6D 6F 76 65 28
        27 67 6F 6F 67 6C
        65 74 69 6D 65 2E
        6C 75 61 27 29
   01D0 0D                 8733 	.db 0x0D
   01D1 0A                 8734 	.db 0x0A
   01D2 00                 8735 	.db 0x00
                    01D3   8736 Fydrip$_str_12$0$0 == .
   01D3                    8737 __str_12:
   01D3 66 69 6C 65 2E 6F  8738 	.ascii "file.open("
        70 65 6E 28
   01DD 22                 8739 	.db 0x22
   01DE 67 6F 6F 67 6C 65  8740 	.ascii "googletime.lua"
        74 69 6D 65 2E 6C
        75 61
   01EC 22                 8741 	.db 0x22
   01ED 2C 20              8742 	.ascii ", "
   01EF 22                 8743 	.db 0x22
   01F0 77                 8744 	.ascii "w"
   01F1 22                 8745 	.db 0x22
   01F2 29                 8746 	.ascii ")"
   01F3 0D                 8747 	.db 0x0D
   01F4 0A                 8748 	.db 0x0A
   01F5 00                 8749 	.db 0x00
                    01F6   8750 Fydrip$_str_13$0$0 == .
   01F6                    8751 __str_13:
   01F6 66 69 6C 65 2E 77  8752 	.ascii "file.writeline([[connG=net.createConnection(net.TCP, 0)]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 63
        6F 6E 6E 47 3D 6E
        65 74 2E 63 72 65
        61 74 65 43 6F 6E
        6E 65 63 74 69 6F
        6E 28 6E 65 74 2E
        54 43 50 2C 20 30
        29 5D 5D 29
   0230 0D                 8753 	.db 0x0D
   0231 0A                 8754 	.db 0x0A
   0232 00                 8755 	.db 0x00
                    0233   8756 Fydrip$_str_14$0$0 == .
   0233                    8757 __str_14:
   0233 66 69 6C 65 2E 77  8758 	.ascii "file.writeline([[connG:on("
        72 69 74 65 6C 69
        6E 65 28 5B 5B 63
        6F 6E 6E 47 3A 6F
        6E 28
   024D 22                 8759 	.db 0x22
   024E 63 6F 6E 6E 65 63  8760 	.ascii "connection"
        74 69 6F 6E
   0258 22                 8761 	.db 0x22
   0259 2C 66 75 6E 63 74  8762 	.ascii ",function(conn, payloa"
        69 6F 6E 28 63 6F
        6E 6E 2C 20 70 61
        79 6C 6F 61
   026F 64 29 5D 5D 29     8763 	.ascii "d)]])"
   0274 0D                 8764 	.db 0x0D
   0275 0A                 8765 	.db 0x0A
   0276 00                 8766 	.db 0x00
                    0277   8767 Fydrip$_str_15$0$0 == .
   0277                    8768 __str_15:
   0277 66 69 6C 65 2E 77  8769 	.ascii "file.writeline([[connG:send("
        72 69 74 65 6C 69
        6E 65 28 5B 5B 63
        6F 6E 6E 47 3A 73
        65 6E 64 28
   0293 22                 8770 	.db 0x22
   0294 48 45 41 44 20 2F  8771 	.ascii "HEAD / HTTP/1.1"
        20 48 54 54 50 2F
        31 2E 31
   02A3 5C                 8772 	.db 0x5C
   02A4 72                 8773 	.ascii "r"
   02A5 5C                 8774 	.db 0x5C
   02A6 6E 48 6F 73 74 3A  8775 	.ascii "nHost: google"
        20 67 6F 6F 67 6C
        65
   02B3 2E 63 6F 6D        8776 	.ascii ".com"
   02B7 5C                 8777 	.db 0x5C
   02B8 72                 8778 	.ascii "r"
   02B9 5C                 8779 	.db 0x5C
   02BA 6E 41 63 63 65 70  8780 	.ascii "nAccept: */*"
        74 3A 20 2A 2F 2A
   02C6 5C                 8781 	.db 0x5C
   02C7 72                 8782 	.ascii "r"
   02C8 5C                 8783 	.db 0x5C
   02C9 6E                 8784 	.ascii "n"
   02CA 22                 8785 	.db 0x22
   02CB 2E 2E 5D 5D 29     8786 	.ascii "..]])"
   02D0 0D                 8787 	.db 0x0D
   02D1 0A                 8788 	.db 0x0A
   02D2 00                 8789 	.db 0x00
                    02D3   8790 Fydrip$_str_16$0$0 == .
   02D3                    8791 __str_16:
   02D3 66 69 6C 65 2E 77  8792 	.ascii "file.writeline([["
        72 69 74 65 6C 69
        6E 65 28 5B 5B
   02E4 22                 8793 	.db 0x22
   02E5 55 73 65 72 2D 41  8794 	.ascii "User-Agent: Mozilla/4.0 (compatible; esp82"
        67 65 6E 74 3A 20
        4D 6F 7A 69 6C 6C
        61 2F 34 2E 30 20
        28 63 6F 6D 70 61
        74 69 62 6C 65 3B
        20 65 73 70 38 32
   030F 36 36 20 4C 75 61  8795 	.ascii "66 Lua;)"
        3B 29
   0317 5C                 8796 	.db 0x5C
   0318 72                 8797 	.ascii "r"
   0319 5C                 8798 	.db 0x5C
   031A 6E                 8799 	.ascii "n"
   031B 5C                 8800 	.db 0x5C
   031C 72                 8801 	.ascii "r"
   031D 5C                 8802 	.db 0x5C
   031E 6E                 8803 	.ascii "n"
   031F 22                 8804 	.db 0x22
   0320 29 20 65 6E 64 29  8805 	.ascii ") end)]])"
        5D 5D 29
   0329 0D                 8806 	.db 0x0D
   032A 0A                 8807 	.db 0x0A
   032B 00                 8808 	.db 0x00
                    032C   8809 Fydrip$_str_17$0$0 == .
   032C                    8810 __str_17:
   032C 66 69 6C 65 2E 77  8811 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   033B 22                 8812 	.db 0x22
   033C 63 6F 6E 6E 47 3A  8813 	.ascii "connG:on("
        6F 6E 28
   0345 5C                 8814 	.db 0x5C
   0346 22                 8815 	.db 0x22
   0347 72 65 63 65 69 76  8816 	.ascii "receive"
        65
   034E 5C                 8817 	.db 0x5C
   034F 22                 8818 	.db 0x22
   0350 2C 20 66 75 6E 63  8819 	.ascii ", function(connG, payloa"
        74 69 6F 6E 28 63
        6F 6E 6E 47 2C 20
        70 61 79 6C 6F 61
   0368 64 29              8820 	.ascii "d)"
   036A 22                 8821 	.db 0x22
   036B 29                 8822 	.ascii ")"
   036C 0D                 8823 	.db 0x0D
   036D 0A                 8824 	.db 0x0A
   036E 00                 8825 	.db 0x00
                    036F   8826 Fydrip$_str_18$0$0 == .
   036F                    8827 __str_18:
   036F 66 69 6C 65 2E 77  8828 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   037E 22                 8829 	.db 0x22
   037F 70 72 69 6E 74 28  8830 	.ascii "print(string.sub(payload,string.find(payload"
        73 74 72 69 6E 67
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64
   03AB 2C                 8831 	.ascii ","
   03AC 5C                 8832 	.db 0x5C
   03AD 22                 8833 	.db 0x22
   03AE 44 61 74 65 3A     8834 	.ascii "Date:"
   03B3 5C                 8835 	.db 0x5C
   03B4 22                 8836 	.db 0x22
   03B5 29 2B 31 38 2C 73  8837 	.ascii ")+18,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   03CE 5C                 8838 	.db 0x5C
   03CF 22                 8839 	.db 0x22
   03D0 44 61 74 65 3A     8840 	.ascii "Date:"
   03D5 5C                 8841 	.db 0x5C
   03D6 22                 8842 	.db 0x22
   03D7 29 2B 32 31 29 2E  8843 	.ascii ")+21).."
        2E
   03DE 22                 8844 	.db 0x22
   03DF 29                 8845 	.ascii ")"
   03E0 0D                 8846 	.db 0x0D
   03E1 0A                 8847 	.db 0x0A
   03E2 00                 8848 	.db 0x00
                    03E3   8849 Fydrip$_str_19$0$0 == .
   03E3                    8850 __str_19:
   03E3 66 69 6C 65 2E 77  8851 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   03F2 22                 8852 	.db 0x22
   03F3 73 74 72 69 6E 67  8853 	.ascii "string.sub(payload,string.find(payload,"
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64 2C
   041A 5C                 8854 	.db 0x5C
   041B 22                 8855 	.db 0x22
   041C 44 61 74           8856 	.ascii "Dat"
   041F 65 3A              8857 	.ascii "e:"
   0421 5C                 8858 	.db 0x5C
   0422 22                 8859 	.db 0x22
   0423 29 2B 31 35 2C 73  8860 	.ascii ")+15,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   043C 5C                 8861 	.db 0x5C
   043D 22                 8862 	.db 0x22
   043E 44 61 74 65 3A     8863 	.ascii "Date:"
   0443 5C                 8864 	.db 0x5C
   0444 22                 8865 	.db 0x22
   0445 29 2B 31 36 29 2E  8866 	.ascii ")+16).."
        2E
   044C 22                 8867 	.db 0x22
   044D 29                 8868 	.ascii ")"
   044E 0D                 8869 	.db 0x0D
   044F 0A                 8870 	.db 0x0A
   0450 00                 8871 	.db 0x00
                    0451   8872 Fydrip$_str_20$0$0 == .
   0451                    8873 __str_20:
   0451 66 69 6C 65 2E 77  8874 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   0460 22                 8875 	.db 0x22
   0461 73 74 72 69 6E 67  8876 	.ascii "string.sub(payload,string.find(payload,"
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64 2C
   0488 5C                 8877 	.db 0x5C
   0489 22                 8878 	.db 0x22
   048A 44 61 74           8879 	.ascii "Dat"
   048D 65 3A              8880 	.ascii "e:"
   048F 5C                 8881 	.db 0x5C
   0490 22                 8882 	.db 0x22
   0491 29 2B 31 31 2C 73  8883 	.ascii ")+11,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   04AA 5C                 8884 	.db 0x5C
   04AB 22                 8885 	.db 0x22
   04AC 44 61 74 65 3A     8886 	.ascii "Date:"
   04B1 5C                 8887 	.db 0x5C
   04B2 22                 8888 	.db 0x22
   04B3 29 2B 31 32 29 2E  8889 	.ascii ")+12).."
        2E
   04BA 22                 8890 	.db 0x22
   04BB 29                 8891 	.ascii ")"
   04BC 0D                 8892 	.db 0x0D
   04BD 0A                 8893 	.db 0x0A
   04BE 00                 8894 	.db 0x00
                    04BF   8895 Fydrip$_str_21$0$0 == .
   04BF                    8896 __str_21:
   04BF 66 69 6C 65 2E 77  8897 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   04CE 22                 8898 	.db 0x22
   04CF 73 74 72 69 6E 67  8899 	.ascii "string.sub(payload,string.find(payload,"
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64 2C
   04F6 5C                 8900 	.db 0x5C
   04F7 22                 8901 	.db 0x22
   04F8 44 61 74           8902 	.ascii "Dat"
   04FB 65 3A              8903 	.ascii "e:"
   04FD 5C                 8904 	.db 0x5C
   04FE 22                 8905 	.db 0x22
   04FF 29 2B 32 33 2C 73  8906 	.ascii ")+23,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   0518 5C                 8907 	.db 0x5C
   0519 22                 8908 	.db 0x22
   051A 44 61 74 65 3A     8909 	.ascii "Date:"
   051F 5C                 8910 	.db 0x5C
   0520 22                 8911 	.db 0x22
   0521 29 2B 32 34 29 2E  8912 	.ascii ")+24).."
        2E
   0528 22                 8913 	.db 0x22
   0529 29                 8914 	.ascii ")"
   052A 0D                 8915 	.db 0x0D
   052B 0A                 8916 	.db 0x0A
   052C 00                 8917 	.db 0x00
                    052D   8918 Fydrip$_str_22$0$0 == .
   052D                    8919 __str_22:
   052D 66 69 6C 65 2E 77  8920 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   053C 22                 8921 	.db 0x22
   053D 73 74 72 69 6E 67  8922 	.ascii "string.sub(payload,string.find(payload,"
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64 2C
   0564 5C                 8923 	.db 0x5C
   0565 22                 8924 	.db 0x22
   0566 44 61 74           8925 	.ascii "Dat"
   0569 65 3A              8926 	.ascii "e:"
   056B 5C                 8927 	.db 0x5C
   056C 22                 8928 	.db 0x22
   056D 29 2B 32 36 2C 73  8929 	.ascii ")+26,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   0586 5C                 8930 	.db 0x5C
   0587 22                 8931 	.db 0x22
   0588 44 61 74 65 3A     8932 	.ascii "Date:"
   058D 5C                 8933 	.db 0x5C
   058E 22                 8934 	.db 0x22
   058F 29 2B 32 37 29 2E  8935 	.ascii ")+27).."
        2E
   0596 22                 8936 	.db 0x22
   0597 29                 8937 	.ascii ")"
   0598 0D                 8938 	.db 0x0D
   0599 0A                 8939 	.db 0x0A
   059A 00                 8940 	.db 0x00
                    059B   8941 Fydrip$_str_23$0$0 == .
   059B                    8942 __str_23:
   059B 66 69 6C 65 2E 77  8943 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   05AA 22                 8944 	.db 0x22
   05AB 73 74 72 69 6E 67  8945 	.ascii "string.sub(payload,string.find(payload,"
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64 2C
   05D2 5C                 8946 	.db 0x5C
   05D3 22                 8947 	.db 0x22
   05D4 44 61 74           8948 	.ascii "Dat"
   05D7 65 3A              8949 	.ascii "e:"
   05D9 5C                 8950 	.db 0x5C
   05DA 22                 8951 	.db 0x22
   05DB 29 2B 32 39 2C 73  8952 	.ascii ")+29,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   05F4 5C                 8953 	.db 0x5C
   05F5 22                 8954 	.db 0x22
   05F6 44 61 74 65 3A     8955 	.ascii "Date:"
   05FB 5C                 8956 	.db 0x5C
   05FC 22                 8957 	.db 0x22
   05FD 29 2B 33 30 29 2E  8958 	.ascii ")+30).."
        2E
   0604 22                 8959 	.db 0x22
   0605 29                 8960 	.ascii ")"
   0606 0D                 8961 	.db 0x0D
   0607 0A                 8962 	.db 0x0A
   0608 00                 8963 	.db 0x00
                    0609   8964 Fydrip$_str_24$0$0 == .
   0609                    8965 __str_24:
   0609 66 69 6C 65 2E 77  8966 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   0618 22                 8967 	.db 0x22
   0619 73 74 72 69 6E 67  8968 	.ascii "string.sub(payload,string.find(payload,"
        2E 73 75 62 28 70
        61 79 6C 6F 61 64
        2C 73 74 72 69 6E
        67 2E 66 69 6E 64
        28 70 61 79 6C 6F
        61 64 2C
   0640 5C                 8969 	.db 0x5C
   0641 22                 8970 	.db 0x22
   0642 44 61 74           8971 	.ascii "Dat"
   0645 65 3A              8972 	.ascii "e:"
   0647 5C                 8973 	.db 0x5C
   0648 22                 8974 	.db 0x22
   0649 29 2B 31 34 2C 73  8975 	.ascii ")+14,string.find(payload,"
        74 72 69 6E 67 2E
        66 69 6E 64 28 70
        61 79 6C 6F 61 64
        2C
   0662 5C                 8976 	.db 0x5C
   0663 22                 8977 	.db 0x22
   0664 44 61 74 65 3A     8978 	.ascii "Date:"
   0669 5C                 8979 	.db 0x5C
   066A 22                 8980 	.db 0x22
   066B 29 2B 31 36 29 2E  8981 	.ascii ")+16).."
        2E
   0672 5C                 8982 	.db 0x5C
   0673 22                 8983 	.db 0x22
   0674 5C                 8984 	.db 0x5C
   0675 5C                 8985 	.db 0x5C
   0676 72                 8986 	.ascii "r"
   0677 5C                 8987 	.db 0x5C
   0678 5C                 8988 	.db 0x5C
   0679 6E                 8989 	.ascii "n"
   067A 5C                 8990 	.db 0x5C
   067B 22                 8991 	.db 0x22
   067C 29                 8992 	.ascii ")"
   067D 22                 8993 	.db 0x22
   067E 29                 8994 	.ascii ")"
   067F 0D                 8995 	.db 0x0D
   0680 0A                 8996 	.db 0x0A
   0681 00                 8997 	.db 0x00
                    0682   8998 Fydrip$_str_25$0$0 == .
   0682                    8999 __str_25:
   0682 66 69 6C 65 2E 77  9000 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   0691 22                 9001 	.db 0x22
   0692 63 6F 6E 6E 47 3A  9002 	.ascii "connG:close()"
        63 6C 6F 73 65 28
        29
   069F 22                 9003 	.db 0x22
   06A0 29                 9004 	.ascii ")"
   06A1 0D                 9005 	.db 0x0D
   06A2 0A                 9006 	.db 0x0A
   06A3 00                 9007 	.db 0x00
                    06A4   9008 Fydrip$_str_26$0$0 == .
   06A4                    9009 __str_26:
   06A4 66 69 6C 65 2E 77  9010 	.ascii "file.writeline("
        72 69 74 65 6C 69
        6E 65 28
   06B3 22                 9011 	.db 0x22
   06B4 65 6E 64 29        9012 	.ascii "end)"
   06B8 22                 9013 	.db 0x22
   06B9 29                 9014 	.ascii ")"
   06BA 0D                 9015 	.db 0x0D
   06BB 0A                 9016 	.db 0x0A
   06BC 00                 9017 	.db 0x00
                    06BD   9018 Fydrip$_str_27$0$0 == .
   06BD                    9019 __str_27:
   06BD 66 69 6C 65 2E 77  9020 	.ascii "file.writeline([[connG:connect(80,'google.com')]])"
        72 69 74 65 6C 69
        6E 65 28 5B 5B 63
        6F 6E 6E 47 3A 63
        6F 6E 6E 65 63 74
        28 38 30 2C 27 67
        6F 6F 67 6C 65 2E
        63 6F 6D 27 29 5D
        5D 29
   06EF 0D                 9021 	.db 0x0D
   06F0 0A                 9022 	.db 0x0A
   06F1 00                 9023 	.db 0x00
                    06F2   9024 Fydrip$_str_28$0$0 == .
   06F2                    9025 __str_28:
   06F2 70 72 69 6E 74 28  9026 	.ascii "print('connG ready"
        27 63 6F 6E 6E 47
        20 72 65 61 64 79
   0704 5C                 9027 	.db 0x5C
   0705 72                 9028 	.ascii "r"
   0706 5C                 9029 	.db 0x5C
   0707 6E 27 29           9030 	.ascii "n')"
   070A 0D                 9031 	.db 0x0D
   070B 0A                 9032 	.db 0x0A
   070C 00                 9033 	.db 0x00
                    070D   9034 Fydrip$_str_29$0$0 == .
   070D                    9035 __str_29:
   070D 70 72 69 6E 74 28  9036 	.ascii "print(wifi.sta.status())"
        77 69 66 69 2E 73
        74 61 2E 73 74 61
        74 75 73 28 29 29
   0725 0D                 9037 	.db 0x0D
   0726 0A                 9038 	.db 0x0A
   0727 00                 9039 	.db 0x00
                    0728   9040 Fydrip$_str_30$0$0 == .
   0728                    9041 __str_30:
   0728 67 70 69 6F 2E 77  9042 	.ascii "gpio.write(4, gpio.HIGH)"
        72 69 74 65 28 34
        2C 20 67 70 69 6F
        2E 48 49 47 48 29
   0740 0D                 9043 	.db 0x0D
   0741 0A                 9044 	.db 0x0A
   0742 00                 9045 	.db 0x00
                    0743   9046 Fydrip$_str_31$0$0 == .
   0743                    9047 __str_31:
   0743 67 70 69 6F 2E 77  9048 	.ascii "gpio.write(4, gpio.LOW)"
        72 69 74 65 28 34
        2C 20 67 70 69 6F
        2E 4C 4F 57 29
   075A 0D                 9049 	.db 0x0D
   075B 0A                 9050 	.db 0x0A
   075C 00                 9051 	.db 0x00
                    075D   9052 Fydrip$_str_32$0$0 == .
   075D                    9053 __str_32:
   075D 77 69 66 69 2E 73  9054 	.ascii "wifi.sta.connect()"
        74 61 2E 63 6F 6E
        6E 65 63 74 28 29
   076F 0D                 9055 	.db 0x0D
   0770 0A                 9056 	.db 0x0A
   0771 00                 9057 	.db 0x00
                    0772   9058 Fydrip$_str_33$0$0 == .
   0772                    9059 __str_33:
   0772 77 69 66 69 2E 73  9060 	.ascii "wifi.sta.config("
        74 61 2E 63 6F 6E
        66 69 67 28
   0782 22                 9061 	.db 0x22
   0783 49 6E 74 65 72 73  9062 	.ascii "Intersect_1"
        65 63 74 5F 31
   078E 22                 9063 	.db 0x22
   078F 2C                 9064 	.ascii ","
   0790 22                 9065 	.db 0x22
   0791 41 6C 6F 6E 67 6B  9066 	.ascii "Alongkey123"
        65 79 31 32 33
   079C 22                 9067 	.db 0x22
   079D 29 20 20 77 69 66  9068 	.ascii ")  wifi.sta.conne"
        69 2E 73 74 61 2E
        63 6F 6E 6E 65
   07AE 63 74 28 29        9069 	.ascii "ct()"
   07B2 0D                 9070 	.db 0x0D
   07B3 0A                 9071 	.db 0x0A
   07B4 00                 9072 	.db 0x00
                    07B5   9073 Fydrip$_str_34$0$0 == .
   07B5                    9074 __str_34:
   07B5 77 69 66 69 2E 73  9075 	.ascii "wifi.sta.config("
        74 61 2E 63 6F 6E
        66 69 67 28
   07C5 22                 9076 	.db 0x22
   07C6 54 52 45 4E 44 6E  9077 	.ascii "TRENDnet653{downstairs}"
        65 74 36 35 33 7B
        64 6F 77 6E 73 74
        61 69 72 73 7D
   07DD 22                 9078 	.db 0x22
   07DE 2C                 9079 	.ascii ","
   07DF 22                 9080 	.db 0x22
   07E0 73 74 6F 6E 65 62  9081 	.ascii "stonebr!dge"
        72 21 64 67 65
   07EB 22                 9082 	.db 0x22
   07EC 29 20 20 77 69     9083 	.ascii ")  wi"
   07F1 66 69 2E 73 74 61  9084 	.ascii "fi.sta.connect()"
        2E 63 6F 6E 6E 65
        63 74 28 29
   0801 0D                 9085 	.db 0x0D
   0802 0A                 9086 	.db 0x0A
   0803 00                 9087 	.db 0x00
                    0804   9088 Fydrip$_str_35$0$0 == .
   0804                    9089 __str_35:
   0804 77 69 66 69 2E 73  9090 	.ascii "wifi.sta.config("
        74 61 2E 63 6F 6E
        66 69 67 28
   0814 22                 9091 	.db 0x22
   0815 54 52 45 4E 44 6E  9092 	.ascii "TRENDnet653{upstairs}"
        65 74 36 35 33 7B
        75 70 73 74 61 69
        72 73 7D
   082A 22                 9093 	.db 0x22
   082B 2C                 9094 	.ascii ","
   082C 22                 9095 	.db 0x22
   082D 73 74 6F 6E 65 62  9096 	.ascii "stonebr!dge"
        72 21 64 67 65
   0838 22                 9097 	.db 0x22
   0839 29 20 20 77 69 66  9098 	.ascii ")  wifi"
        69
   0840 2E 73 74 61 2E 63  9099 	.ascii ".sta.connect()"
        6F 6E 6E 65 63 74
        28 29
   084E 0D                 9100 	.db 0x0D
   084F 0A                 9101 	.db 0x0A
   0850 00                 9102 	.db 0x00
                    0851   9103 Fydrip$_str_36$0$0 == .
   0851                    9104 __str_36:
   0851 77 69 66 69 2E 73  9105 	.ascii "wifi.sta.config("
        74 61 2E 63 6F 6E
        66 69 67 28
   0861 22                 9106 	.db 0x22
   0862 48 69 6C 6C 73 69  9107 	.ascii "Hillside"
        64 65
   086A 22                 9108 	.db 0x22
   086B 2C                 9109 	.ascii ","
   086C 22                 9110 	.db 0x22
   086D 56 61 72 69 6F 75  9111 	.ascii "VariousChars"
        73 43 68 61 72 73
   0879 22                 9112 	.db 0x22
   087A 29 20 20 77 69 66  9113 	.ascii ")  wifi.sta.connect"
        69 2E 73 74 61 2E
        63 6F 6E 6E 65 63
        74
   088D 28 29              9114 	.ascii "()"
   088F 0D                 9115 	.db 0x0D
   0890 0A                 9116 	.db 0x0A
   0891 00                 9117 	.db 0x00
                    0892   9118 Fydrip$_str_37$0$0 == .
   0892                    9119 __str_37:
   0892 77 69 66 69 2E 73  9120 	.ascii "wifi.sta.config("
        74 61 2E 63 6F 6E
        66 69 67 28
   08A2 22                 9121 	.db 0x22
   08A3 43 61 67 65 79 5F  9122 	.ascii "Cagey_HTC"
        48 54 43
   08AC 22                 9123 	.db 0x22
   08AD 2C                 9124 	.ascii ","
   08AE 22                 9125 	.db 0x22
   08AF 31 32 33 34 35 36  9126 	.ascii "1234567890"
        37 38 39 30
   08B9 22                 9127 	.db 0x22
   08BA 29 20 20 77 69 66  9128 	.ascii ")  wifi.sta.connect("
        69 2E 73 74 61 2E
        63 6F 6E 6E 65 63
        74 28
   08CE 29                 9129 	.ascii ")"
   08CF 0D                 9130 	.db 0x0D
   08D0 0A                 9131 	.db 0x0A
   08D1 00                 9132 	.db 0x00
                    08D2   9133 Fydrip$_str_38$0$0 == .
   08D2                    9134 __str_38:
   08D2 73 6B 3D 6E 65 74  9135 	.ascii "sk=net.createConnection(net.TCP, 0)"
        2E 63 72 65 61 74
        65 43 6F 6E 6E 65
        63 74 69 6F 6E 28
        6E 65 74 2E 54 43
        50 2C 20 30 29
   08F5 0D                 9136 	.db 0x0D
   08F6 0A                 9137 	.db 0x0A
   08F7 00                 9138 	.db 0x00
                    08F8   9139 Fydrip$_str_39$0$0 == .
   08F8                    9140 __str_39:
   08F8 73 6B 3A 6F 6E 28  9141 	.ascii "sk:on("
   08FE 22                 9142 	.db 0x22
   08FF 72 65 63 65 69 76  9143 	.ascii "receive"
        65
   0906 22                 9144 	.db 0x22
   0907 2C 20 66 75 6E 63  9145 	.ascii ", function(sck, c) print(c) end )"
        74 69 6F 6E 28 73
        63 6B 2C 20 63 29
        20 70 72 69 6E 74
        28 63 29 20 65 6E
        64 20 29
   0928 0D                 9146 	.db 0x0D
   0929 0A                 9147 	.db 0x0A
   092A 00                 9148 	.db 0x00
                    092B   9149 Fydrip$_str_40$0$0 == .
   092B                    9150 __str_40:
   092B 73 6B 3A 63 6F 6E  9151 	.ascii "sk:connect("
        6E 65 63 74 28
   0936 00                 9152 	.db 0x00
                    0937   9153 Fydrip$_str_41$0$0 == .
   0937                    9154 __str_41:
   0937 2C                 9155 	.ascii ","
   0938 22                 9156 	.db 0x22
   0939 00                 9157 	.db 0x00
                    093A   9158 Fydrip$_str_42$0$0 == .
   093A                    9159 __str_42:
   093A 22                 9160 	.db 0x22
   093B 29                 9161 	.ascii ")"
   093C 0D                 9162 	.db 0x0D
   093D 0A                 9163 	.db 0x0A
   093E 00                 9164 	.db 0x00
                    093F   9165 Fydrip$_str_43$0$0 == .
   093F                    9166 __str_43:
   093F 64 6F 66 69 6C 65  9167 	.ascii "dofile("
        28
   0946 22                 9168 	.db 0x22
   0947 67 6F 6F 67 6C 65  9169 	.ascii "googletime.lua"
        74 69 6D 65 2E 6C
        75 61
   0955 22                 9170 	.db 0x22
   0956 29                 9171 	.ascii ")"
   0957 0D                 9172 	.db 0x0D
   0958 0A                 9173 	.db 0x0A
   0959 00                 9174 	.db 0x00
                    095A   9175 Fydrip$_str_44$0$0 == .
   095A                    9176 __str_44:
   095A 2D 2D 20 2A 2A 44  9177 	.ascii "-- **DEBUG** length of C is %d"
        45 42 55 47 2A 2A
        20 6C 65 6E 67 74
        68 20 6F 66 20 43
        20 69 73 20 25 64
   0978 0D                 9178 	.db 0x0D
   0979 0A                 9179 	.db 0x0A
   097A 00                 9180 	.db 0x00
                    097B   9181 Fydrip$_str_45$0$0 == .
   097B                    9182 __str_45:
   097B 0D                 9183 	.db 0x0D
   097C 0A                 9184 	.db 0x0A
   097D 00                 9185 	.db 0x00
                    097E   9186 Fydrip$_str_46$0$0 == .
   097E                    9187 __str_46:
   097E 4A 61 6E           9188 	.ascii "Jan"
   0981 00                 9189 	.db 0x00
                    0982   9190 Fydrip$_str_47$0$0 == .
   0982                    9191 __str_47:
   0982 46 65 62           9192 	.ascii "Feb"
   0985 00                 9193 	.db 0x00
                    0986   9194 Fydrip$_str_48$0$0 == .
   0986                    9195 __str_48:
   0986 4D 61 72           9196 	.ascii "Mar"
   0989 00                 9197 	.db 0x00
                    098A   9198 Fydrip$_str_49$0$0 == .
   098A                    9199 __str_49:
   098A 41 70 72           9200 	.ascii "Apr"
   098D 00                 9201 	.db 0x00
                    098E   9202 Fydrip$_str_50$0$0 == .
   098E                    9203 __str_50:
   098E 4D 61 79           9204 	.ascii "May"
   0991 00                 9205 	.db 0x00
                    0992   9206 Fydrip$_str_51$0$0 == .
   0992                    9207 __str_51:
   0992 4A 75 6E           9208 	.ascii "Jun"
   0995 00                 9209 	.db 0x00
                    0996   9210 Fydrip$_str_52$0$0 == .
   0996                    9211 __str_52:
   0996 4A 75 6C           9212 	.ascii "Jul"
   0999 00                 9213 	.db 0x00
                    099A   9214 Fydrip$_str_53$0$0 == .
   099A                    9215 __str_53:
   099A 41 75 67           9216 	.ascii "Aug"
   099D 00                 9217 	.db 0x00
                    099E   9218 Fydrip$_str_54$0$0 == .
   099E                    9219 __str_54:
   099E 53 65 70           9220 	.ascii "Sep"
   09A1 00                 9221 	.db 0x00
                    09A2   9222 Fydrip$_str_55$0$0 == .
   09A2                    9223 __str_55:
   09A2 4F 63 74           9224 	.ascii "Oct"
   09A5 00                 9225 	.db 0x00
                    09A6   9226 Fydrip$_str_56$0$0 == .
   09A6                    9227 __str_56:
   09A6 4E 6F 76           9228 	.ascii "Nov"
   09A9 00                 9229 	.db 0x00
                    09AA   9230 Fydrip$_str_57$0$0 == .
   09AA                    9231 __str_57:
   09AA 44 65 63           9232 	.ascii "Dec"
   09AD 00                 9233 	.db 0x00
                    09AE   9234 Fydrip$_str_58$0$0 == .
   09AE                    9235 __str_58:
   09AE 73 6B 3A 63 6C 6F  9236 	.ascii "sk:close()"
        73 65 28 29
   09B8 0D                 9237 	.db 0x0D
   09B9 0A                 9238 	.db 0x0A
   09BA 00                 9239 	.db 0x00
                    09BB   9240 Fydrip$_str_59$0$0 == .
   09BB                    9241 __str_59:
   09BB 6E 6F 64 65 2E 64  9242 	.ascii "node.dsleep(270000000)"
        73 6C 65 65 70 28
        32 37 30 30 30 30
        30 30 30 29
   09D1 0D                 9243 	.db 0x0D
   09D2 0A                 9244 	.db 0x0A
   09D3 00                 9245 	.db 0x00
                    09D4   9246 Fydrip$_str_61$0$0 == .
   09D4                    9247 __str_61:
   09D4 2D 2D 20 2A 2A 44  9248 	.ascii "-- **DEBUG** iv is %s"
        45 42 55 47 2A 2A
        20 69 76 20 69 73
        20 25 73
   09E9 0D                 9249 	.db 0x0D
   09EA 0A                 9250 	.db 0x0A
   09EB 00                 9251 	.db 0x00
                    09EC   9252 Fydrip$_str_62$0$0 == .
   09EC                    9253 __str_62:
   09EC 25 73 20 25 68 68  9254 	.ascii "%s %hhu %s %lu %lu %d %d 100 -16.127100,51.241300"
        75 20 25 73 20 25
        6C 75 20 25 6C 75
        20 25 64 20 25 64
        20 31 30 30 20 2D
        31 36 2E 31 32 37
        31 30 30 2C 35 31
        2E 32 34 31 33 30
        30
   0A1D 00                 9255 	.db 0x00
                    0A1E   9256 Fydrip$_str_63$0$0 == .
   0A1E                    9257 __str_63:
   0A1E 73 6B 3A 73 65 6E  9258 	.ascii "sk:send("
        64 28
   0A26 22                 9259 	.db 0x22
   0A27 79 44 72 69 70 28  9260 	.ascii "yDrip(AES): "
        41 45 53 29 3A 20
   0A33 00                 9261 	.db 0x00
                    0A34   9262 Fydrip$_str_64$0$0 == .
   0A34                    9263 __str_64:
   0A34 25 30 32 78        9264 	.ascii "%02x"
   0A38 00                 9265 	.db 0x00
                    0A39   9266 Fydrip$_str_65$0$0 == .
   0A39                    9267 __str_65:
   0A39 20                 9268 	.ascii " "
   0A3A 00                 9269 	.db 0x00
                    0A3B   9270 Fydrip$_str_66$0$0 == .
   0A3B                    9271 __str_66:
   0A3B 73 6B 3A 73 65 6E  9272 	.ascii "sk:send("
        64 28
   0A43 22                 9273 	.db 0x22
   0A44 79 44 72 69 70 3A  9274 	.ascii "yDrip: "
        20
   0A4B 00                 9275 	.db 0x00
                    0A4C   9276 Fydrip$_str_67$0$0 == .
   0A4C                    9277 __str_67:
   0A4C 5C                 9278 	.db 0x5C
   0A4D 72                 9279 	.ascii "r"
   0A4E 5C                 9280 	.db 0x5C
   0A4F 6E                 9281 	.ascii "n"
   0A50 22                 9282 	.db 0x22
   0A51 29                 9283 	.ascii ")"
   0A52 0D                 9284 	.db 0x0D
   0A53 0A                 9285 	.db 0x0A
   0A54 00                 9286 	.db 0x00
                    0A55   9287 Fydrip$_str_69$0$0 == .
   0A55                    9288 __str_69:
   0A55 36 46 35 59 50     9289 	.ascii "6F5YP"
   0A5A 00                 9290 	.db 0x00
                    0A5B   9291 Fydrip$_str_70$0$0 == .
   0A5B                    9292 __str_70:
   0A5B 69 6E 74 65 72 73  9293 	.ascii "intersecting.DuckDNS.org"
        65 63 74 69 6E 67
        2E 44 75 63 6B 44
        4E 53 2E 6F 72 67
   0A73 00                 9294 	.db 0x00
                    0A74   9295 Fydrip$_str_71$0$0 == .
   0A74                    9296 __str_71:
   0A74 31 37 36 31 31     9297 	.ascii "17611"
   0A79 00                 9298 	.db 0x00
                    0A7A   9299 Fydrip$_str_72$0$0 == .
   0A7A                    9300 __str_72:
   0A7A 47 47 79 44 72 69  9301 	.ascii "GGyDrip"
        70
   0A81 00                 9302 	.db 0x00
                           9303 	.area XINIT   (CODE)
                    0000   9304 Fydrip$__xinit_transmitter_id$0$0 == .
   0000                    9305 __xinit__transmitter_id:
   0000 36 46 35 59 50     9306 	.ascii "6F5YP"
   0005 00                 9307 	.db 0x00
                    0006   9308 Fydrip$__xinit_dexie_host_address$0$0 == .
   0006                    9309 __xinit__dexie_host_address:
   0006 69 6E 74 65 72 73  9310 	.ascii "intersecting.DuckDNS.org"
        65 63 74 69 6E 67
        2E 44 75 63 6B 44
        4E 53 2E 6F 72 67
   001E 00                 9311 	.db 0x00
                    001F   9312 Fydrip$__xinit_dexie_host_port$0$0 == .
   001F                    9313 __xinit__dexie_host_port:
   001F 31 37 36 31 31     9314 	.ascii "17611"
   0024 00                 9315 	.db 0x00
                    0025   9316 Fydrip$__xinit_wixFone_ID$0$0 == .
   0025                    9317 __xinit__wixFone_ID:
   0025 47 47 79 44 72 69  9318 	.ascii "GGyDrip"
        70
   002C 00                 9319 	.db 0x00
                    002D   9320 Fydrip$__xinit_key$0$0 == .
   002D                    9321 __xinit__key:
   002D 78                 9322 	.db #0x78	; 120	'x'
   002E 44                 9323 	.db #0x44	; 68	'D'
   002F 72                 9324 	.db #0x72	; 114	'r'
   0030 7C                 9325 	.db #0x7C	; 124
   0031 50                 9326 	.db #0x50	; 80	'P'
   0032 32                 9327 	.db #0x32	; 50	'2'
   0033 67                 9328 	.db #0x67	; 103	'g'
   0034 26                 9329 	.db #0x26	; 38
   0035 41                 9330 	.db #0x41	; 65	'A'
   0036 45                 9331 	.db #0x45	; 69	'E'
   0037 53                 9332 	.db #0x53	; 83	'S'
   0038 72                 9333 	.db #0x72	; 114	'r'
   0039 40                 9334 	.db #0x40	; 64
   003A 5B                 9335 	.db #0x5B	; 91
   003B 4B                 9336 	.db #0x4B	; 75	'K'
   003C 21                 9337 	.db #0x21	; 33
                    003D   9338 Fydrip$__xinit_start_channel$0$0 == .
   003D                    9339 __xinit__start_channel:
   003D 00                 9340 	.db #0x00	;  0
                    003E   9341 Fydrip$__xinit_defaultfOffset$0$0 == .
   003E                    9342 __xinit__defaultfOffset:
   003E CE                 9343 	.db #0xCE	; -50
   003F D5                 9344 	.db #0xD5	; -43
   0040 E6                 9345 	.db #0xE6	; -26
   0041 E5                 9346 	.db #0xE5	; -27
                    0042   9347 Fydrip$__xinit_PM2_BUF$0$0 == .
   0042                    9348 __xinit__PM2_BUF:
   0042 06                 9349 	.db #0x06	; 6
   0043 06                 9350 	.db #0x06	; 6
   0044 06                 9351 	.db #0x06	; 6
   0045 06                 9352 	.db #0x06	; 6
   0046 06                 9353 	.db #0x06	; 6
   0047 06                 9354 	.db #0x06	; 6
   0048 04                 9355 	.db #0x04	; 4
                    0049   9356 Fydrip$__xinit_dmaDesc$0$0 == .
   0049                    9357 __xinit__dmaDesc:
   0049 00                 9358 	.db #0x00	; 0
   004A 00                 9359 	.db #0x00	; 0
   004B DF                 9360 	.db #0xDF	; 223
   004C BE                 9361 	.db #0xBE	; 190
   004D 00                 9362 	.db #0x00	; 0
   004E 07                 9363 	.db #0x07	; 7
   004F 20                 9364 	.db #0x20	; 32
   0050 42                 9365 	.db #0x42	; 66	'B'
                    0051   9366 Fydrip$__xinit_AT_TIMEOUT$0$0 == .
   0051                    9367 __xinit__AT_TIMEOUT:
   0051 01                 9368 	.db #0x01	; 1
                    0052   9369 Fydrip$__xinit_defaultATWait$0$0 == .
   0052                    9370 __xinit__defaultATWait:
   0052 F4 01 00 00        9371 	.byte #0xF4,#0x01,#0x00,#0x00	; 500
                    0056   9372 Fydrip$__xinit_SrcNameTable$0$0 == .
   0056                    9373 __xinit__SrcNameTable:
   0056 30                 9374 	.db #0x30	;  48	'0'
   0057 31                 9375 	.db #0x31	;  49	'1'
   0058 32                 9376 	.db #0x32	;  50	'2'
   0059 33                 9377 	.db #0x33	;  51	'3'
   005A 34                 9378 	.db #0x34	;  52	'4'
   005B 35                 9379 	.db #0x35	;  53	'5'
   005C 36                 9380 	.db #0x36	;  54	'6'
   005D 37                 9381 	.db #0x37	;  55	'7'
   005E 38                 9382 	.db #0x38	;  56	'8'
   005F 39                 9383 	.db #0x39	;  57	'9'
   0060 41                 9384 	.db #0x41	;  65	'A'
   0061 42                 9385 	.db #0x42	;  66	'B'
   0062 43                 9386 	.db #0x43	;  67	'C'
   0063 44                 9387 	.db #0x44	;  68	'D'
   0064 45                 9388 	.db #0x45	;  69	'E'
   0065 46                 9389 	.db #0x46	;  70	'F'
   0066 47                 9390 	.db #0x47	;  71	'G'
   0067 48                 9391 	.db #0x48	;  72	'H'
   0068 4A                 9392 	.db #0x4A	;  74	'J'
   0069 4B                 9393 	.db #0x4B	;  75	'K'
   006A 4C                 9394 	.db #0x4C	;  76	'L'
   006B 4D                 9395 	.db #0x4D	;  77	'M'
   006C 4E                 9396 	.db #0x4E	;  78	'N'
   006D 50                 9397 	.db #0x50	;  80	'P'
   006E 51                 9398 	.db #0x51	;  81	'Q'
   006F 52                 9399 	.db #0x52	;  82	'R'
   0070 53                 9400 	.db #0x53	;  83	'S'
   0071 54                 9401 	.db #0x54	;  84	'T'
   0072 55                 9402 	.db #0x55	;  85	'U'
   0073 57                 9403 	.db #0x57	;  87	'W'
   0074 58                 9404 	.db #0x58	;  88	'X'
   0075 59                 9405 	.db #0x59	;  89	'Y'
                           9406 	.area CABS    (ABS,CODE)
